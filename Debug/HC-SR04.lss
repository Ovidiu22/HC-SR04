
HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001234  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080014e  0080014e  00001316  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ed  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7f  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147c  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00004bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011e6d  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d40  00000000  00000000  00016cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00017a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000042d9  00000000  00000000  00017b1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	88 c0       	rjmp	.+272    	; 0x116 <__vector_1>
       6:	00 00       	nop
       8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__vector_6>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c0       	rjmp	.+102    	; 0xa0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e3       	ldi	r30, 0x34	; 52
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 34       	cpi	r26, 0x4E	; 78
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e4       	ldi	r26, 0x4E	; 78
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 35       	cpi	r26, 0x51	; 81
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	03 d0       	rcall	.+6      	; 0xa2 <main>
      9c:	0c 94 18 09 	jmp	0x1230	; 0x1230 <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <main>:
volatile uint16_t pulse;
volatile uint8_t iIRC = 0;
volatile int f_wdt = 1;

int main(void)
{
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	/* Initialization */
	
	initLCD();
      b0:	35 d2       	rcall	.+1130   	; 0x51c <initLCD>
	init_ultrasonic();
      b2:	b5 d0       	rcall	.+362    	; 0x21e <init_ultrasonic>
      b4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t distance = 0;
	uint8_t diagnostics = 0;
      b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	uint8_t iteration = 0;
	
	while( f_wdt == 1 )
      ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
      be:	01 97       	sbiw	r24, 0x01	; 1
      c0:	11 f5       	brne	.+68     	; 0x106 <main+0x64>
      c2:	10 e0       	ldi	r17, 0x00	; 0
      c4:	1f 5f       	subi	r17, 0xFF	; 255
	{
		iteration += 1;
      c6:	ce 01       	movw	r24, r28
		/* Ultrasonic sensor */
		distance = getDistance_main(&diagnostics);
      c8:	01 96       	adiw	r24, 0x01	; 1
      ca:	bb d0       	rcall	.+374    	; 0x242 <getDistance_main>
      cc:	08 2f       	mov	r16, r24
      ce:	22 e0       	ldi	r18, 0x02	; 2
		
		/* Display measurements */
		displayLCD_main(1, "Iteration ", iteration, "NONE");
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	41 2f       	mov	r20, r17
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	71 e0       	ldi	r23, 0x01	; 1
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	6b d3       	rcall	.+1750   	; 0x7b2 <displayLCD_main>
      dc:	22 e1       	ldi	r18, 0x12	; 18
		displayLCD_main(2, "Distance = ", distance, " cm");
      de:	31 e0       	ldi	r19, 0x01	; 1
      e0:	40 2f       	mov	r20, r16
      e2:	66 e1       	ldi	r22, 0x16	; 22
      e4:	71 e0       	ldi	r23, 0x01	; 1
      e6:	82 e0       	ldi	r24, 0x02	; 2
      e8:	64 d3       	rcall	.+1736   	; 0x7b2 <displayLCD_main>
      ea:	22 e0       	ldi	r18, 0x02	; 2
		displayLCD_main(3, "DTC = ", diagnostics, "NONE");
      ec:	31 e0       	ldi	r19, 0x01	; 1
      ee:	49 81       	ldd	r20, Y+1	; 0x01
      f0:	62 e2       	ldi	r22, 0x22	; 34
      f2:	71 e0       	ldi	r23, 0x01	; 1
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	5d d3       	rcall	.+1722   	; 0x7b2 <displayLCD_main>
		
		/* Power management - processor sleep for energy reduction */
		PwrMngmnt_main();
      f8:	82 d0       	rcall	.+260    	; 0x1fe <PwrMngmnt_main>
      fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	init_ultrasonic();
	uint8_t distance = 0;
	uint8_t diagnostics = 0;
	uint8_t iteration = 0;
	
	while( f_wdt == 1 )
      fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     102:	01 97       	sbiw	r24, 0x01	; 1
     104:	f9 f2       	breq	.-66     	; 0xc4 <main+0x22>
     106:	80 e0       	ldi	r24, 0x00	; 0
		displayLCD_main(3, "DTC = ", diagnostics, "NONE");
		
		/* Power management - processor sleep for energy reduction */
		PwrMngmnt_main();
	}
}
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0f 90       	pop	r0
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <__vector_1>:
     116:	1f 92       	push	r1
Inputs:		none
Outputs:	internal timer
Description:calculates elapsed time of a measurement
******************************************************************** */
ISR(INT0_vect)
{
     118:	0f 92       	push	r0
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
     120:	8f 93       	push	r24
     122:	9f 93       	push	r25
     124:	ef 93       	push	r30
     126:	ff 93       	push	r31
	switch (iIRC)
     128:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     12c:	88 23       	and	r24, r24
     12e:	19 f0       	breq	.+6      	; 0x136 <__vector_1+0x20>
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	51 f0       	breq	.+20     	; 0x148 <__vector_1+0x32>
     134:	1a c0       	rjmp	.+52     	; 0x16a <__vector_1+0x54>
	{
		case 0: //when logic changes from LOW to HIGH
		{
			iIRC = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
			TCCR1B |= (1<<CS11);
     13c:	e1 e8       	ldi	r30, 0x81	; 129
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
			break;
     146:	11 c0       	rjmp	.+34     	; 0x16a <__vector_1+0x54>
		}
		case 1:
		{
			/* reset iIRC */
			iIRC = 0;
     148:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
			/* stop counter */
			TCCR1B &= ~(1<<CS11);
     14c:	e1 e8       	ldi	r30, 0x81	; 129
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	8d 7f       	andi	r24, 0xFD	; 253
     154:	80 83       	st	Z, r24
			/* assign counter value to pulse */
			pulse = TCNT1;
     156:	e4 e8       	ldi	r30, 0x84	; 132
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	91 81       	ldd	r25, Z+1	; 0x01
     15e:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pulse+0x1>
     162:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pulse>
			/* reset counter */
			TCNT1=0;
     166:	11 82       	std	Z+1, r1	; 0x01
     168:	10 82       	st	Z, r1
			break;
		}
	}
}
     16a:	ff 91       	pop	r31
     16c:	ef 91       	pop	r30
     16e:	9f 91       	pop	r25
     170:	8f 91       	pop	r24
     172:	0f 90       	pop	r0
     174:	0f be       	out	0x3f, r0	; 63
     176:	0f 90       	pop	r0
     178:	1f 90       	pop	r1
     17a:	18 95       	reti

0000017c <__vector_6>:
Inputs:		none
Outputs:	f_wdt
Description:wakes up processor after internal timer limit reached (8 sec)
******************************************************************** */
ISR(WDT_vect)
{
     17c:	1f 92       	push	r1
     17e:	0f 92       	push	r0
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	0f 92       	push	r0
     184:	11 24       	eor	r1, r1
     186:	8f 93       	push	r24
     188:	9f 93       	push	r25
	/* set the flag. */
	if(f_wdt == 0)
     18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     192:	89 2b       	or	r24, r25
     194:	31 f4       	brne	.+12     	; 0x1a2 <__vector_6+0x26>
	{
		f_wdt = 1;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	//else there is an error -> flag was not cleared
}
     1a2:	9f 91       	pop	r25
     1a4:	8f 91       	pop	r24
     1a6:	0f 90       	pop	r0
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	0f 90       	pop	r0
     1ac:	1f 90       	pop	r1
     1ae:	18 95       	reti

000001b0 <PwrMngmnt_init>:
Description:initialization of power management / watchdog
******************************************************************** */
void PwrMngmnt_init(void)
{
	/* Disable global interrupts */
	cli(); 
     1b0:	f8 94       	cli
	
	/* Clear the reset flag. */
	MCUSR &= ~(1<<WDRF); // WDRF is set if a WDG system reset occurs
     1b2:	84 b7       	in	r24, 0x34	; 52
     1b4:	87 7f       	andi	r24, 0xF7	; 247
     1b6:	84 bf       	out	0x34, r24	; 52
  
	/* In order to change WDE or the prescaler, we need to
	* set WDCE (This will allow updates for 4 clock cycles).
	*/
	WDTCSR |= (1<<WDCE) | (1<<WDE);
     1b8:	e0 e6       	ldi	r30, 0x60	; 96
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	88 61       	ori	r24, 0x18	; 24
     1c0:	80 83       	st	Z, r24

	/* set new watchdog timeout prescaler value */
	WDTCSR = 1<<WDP3; /* 4.0 seconds */
     1c2:	80 e2       	ldi	r24, 0x20	; 32
     1c4:	80 83       	st	Z, r24
  
	/* Enable global interrupts */
	sei();
     1c6:	78 94       	sei
	
	/* Enable watchdog interrupt */
	WDTCSR |= (1 << WDIE);
     1c8:	80 81       	ld	r24, Z
     1ca:	80 64       	ori	r24, 0x40	; 64
     1cc:	80 83       	st	Z, r24
     1ce:	08 95       	ret

000001d0 <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     1d0:	83 b7       	in	r24, 0x33	; 51
     1d2:	81 7f       	andi	r24, 0xF1	; 241
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
     1d8:	83 b7       	in	r24, 0x33	; 51
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
     1de:	83 b7       	in	r24, 0x33	; 51
     1e0:	81 60       	ori	r24, 0x01	; 1
     1e2:	83 bf       	out	0x33, r24	; 51
     1e4:	88 95       	sleep
     1e6:	83 b7       	in	r24, 0x33	; 51
     1e8:	8e 7f       	andi	r24, 0xFE	; 254
     1ea:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
     1ec:	83 b7       	in	r24, 0x33	; 51
     1ee:	8e 7f       	andi	r24, 0xFE	; 254
     1f0:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
     1f2:	e4 e6       	ldi	r30, 0x64	; 100
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 71       	andi	r24, 0x10	; 16
     1fa:	80 83       	st	Z, r24
     1fc:	08 95       	ret

000001fe <PwrMngmnt_main>:
Description:main function of power management
******************************************************************** */
void PwrMngmnt_main(void)
{
	/* Initialize watchdog */
	PwrMngmnt_init();
     1fe:	d8 df       	rcall	.-80     	; 0x1b0 <PwrMngmnt_init>

	/* Re-enter sleep mode. */
	enterSleep();
     200:	e7 cf       	rjmp	.-50     	; 0x1d0 <enterSleep>
     202:	08 95       	ret

00000204 <configUltrasonicPorts>:
     204:	52 98       	cbi	0x0a, 2	; 10
******************************************************************** */
void configUltrasonicPorts()
{
	/* ECHO - input - port ECHO_pin */
	U_DDR_echo &= ~(1<<U_ECHO_pin);
	U_Port_echo &= ~(1<<U_ECHO_pin);
     206:	5a 98       	cbi	0x0b, 2	; 11
	
	/* TRIG - output - port TRIG_pin */
	U_DDR_trig |= (1<<U_TRIG_pin);
     208:	20 9a       	sbi	0x04, 0	; 4
	U_Port_trig &= ~(1<<U_TRIG_pin); 
     20a:	28 98       	cbi	0x05, 0	; 5
     20c:	08 95       	ret

0000020e <enable_interrupts>:
Outputs:	none
Description:configures the interrupts and enables the global interrupts
******************************************************************** */
 void enable_interrupts()
 {
	EIMSK |= (1<<INT0);
     20e:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00);
     210:	e9 e6       	ldi	r30, 0x69	; 105
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	81 60       	ori	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
	sei();
     21a:	78 94       	sei
     21c:	08 95       	ret

0000021e <init_ultrasonic>:
Outputs:	none
Description:main function for the ultrasonic initialization
******************************************************************** */
void init_ultrasonic(void)
{
	configUltrasonicPorts();
     21e:	f2 df       	rcall	.-28     	; 0x204 <configUltrasonicPorts>
	enable_interrupts();
     220:	f6 cf       	rjmp	.-20     	; 0x20e <enable_interrupts>
     222:	08 95       	ret

00000224 <triggerUltrasonic>:
     224:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	20 e5       	ldi	r18, 0x50	; 80
     228:	2a 95       	dec	r18
     22a:	f1 f7       	brne	.-4      	; 0x228 <triggerUltrasonic+0x4>
		/* trigger ultrasonic */
		U_Port_trig |= (1<<U_TRIG_pin);
		_delay_us(15);

		/* stop trigger ultrasonic */
		U_Port_trig &= ~(1<<U_TRIG_pin);
     22c:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	99 ef       	ldi	r25, 0xF9	; 249
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	81 50       	subi	r24, 0x01	; 1
     236:	90 40       	sbci	r25, 0x00	; 0
     238:	20 40       	sbci	r18, 0x00	; 0
     23a:	e1 f7       	brne	.-8      	; 0x234 <triggerUltrasonic+0x10>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <triggerUltrasonic+0x1a>
     23e:	00 00       	nop
     240:	08 95       	ret

00000242 <getDistance_main>:
Inputs:		pointer to diagnosis
Outputs:	distance measurements
Description:triggers measurements and plausibility checks
******************************************************************** */
 uint8_t getDistance_main(uint8_t * diag)
 {
     242:	2f 92       	push	r2
     244:	3f 92       	push	r3
     246:	4f 92       	push	r4
     248:	5f 92       	push	r5
     24a:	6f 92       	push	r6
     24c:	7f 92       	push	r7
     24e:	8f 92       	push	r8
     250:	9f 92       	push	r9
     252:	af 92       	push	r10
     254:	bf 92       	push	r11
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	8c 01       	movw	r16, r24
     268:	c4 e0       	ldi	r28, 0x04	; 4
		{
			* diag = 15; // DTC: Low sensor range
		}		
		else if ( abs(distance_array[0] - distance_array[1]) > SNSR_TOLERANCE ) /* Check measurements tolerance */
		{	
			* diag = 12;		// DTC: Imprecise meas.
     26a:	0f 2e       	mov	r0, r31
     26c:	fc e0       	ldi	r31, 0x0C	; 12
     26e:	2f 2e       	mov	r2, r31
     270:	f0 2d       	mov	r31, r0
		{
			* diag = 13; // DTC: Defect sensor 
		}
		else if ( dist <= 20 ) // Too low range for the sensor (in case of sensor AJ-SR04M)
		{
			* diag = 15; // DTC: Low sensor range
     272:	df e0       	ldi	r29, 0x0F	; 15
		dist = sum/2;
		distance = dist;
		
		if ( dist <= 0 ) // Check if sensor defect or not connected (in which case it shows 0)
		{
			* diag = 13; // DTC: Defect sensor 
     274:	0f 2e       	mov	r0, r31
     276:	fd e0       	ldi	r31, 0x0D	; 13
     278:	3f 2e       	mov	r3, r31
     27a:	f0 2d       	mov	r31, r0
	/* re-measurements for confirmation of unexpected results */
	for (uint8_t i = 0; i <= ULTRAS_ITER_MAX; i++)
	{
		/* Reset before measurement */
		sum = 0;
		* diag = 0;
     27c:	f8 01       	movw	r30, r16
     27e:	10 82       	st	Z, r1
		
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
     280:	d1 df       	rcall	.-94     	; 0x224 <triggerUltrasonic>
{
	/* factor to be multiplied by pulse
	f = speedOfSound (343 m/s) * 100 * 8 (prescale factor) / 2 (way-back) / F_CPU;  ( ~0.008575 ); */
	/* distance = pulse * factor or
	distance = pulse / (1/factor) */
	return pulse / 116.618;
     282:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <pulse>
     286:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <pulse+0x1>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	95 d3       	rcall	.+1834   	; 0x9ba <__floatunsisf>
     290:	2a e6       	ldi	r18, 0x6A	; 106
     292:	3c e3       	ldi	r19, 0x3C	; 60
     294:	49 ee       	ldi	r20, 0xE9	; 233
     296:	52 e4       	ldi	r21, 0x42	; 66
     298:	f7 d2       	rcall	.+1518   	; 0x888 <__divsf3>
     29a:	4b 01       	movw	r8, r22
     29c:	5c 01       	movw	r10, r24
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
			distance_array[j] = getDistance();
			sum +=distance_array[j];
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	a9 01       	movw	r20, r18
     2a4:	89 d2       	rcall	.+1298   	; 0x7b8 <__addsf3>
     2a6:	6b 01       	movw	r12, r22
     2a8:	7c 01       	movw	r14, r24
     2aa:	ff ef       	ldi	r31, 0xFF	; 255
     2ac:	20 e7       	ldi	r18, 0x70	; 112
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	f1 50       	subi	r31, 0x01	; 1
     2b2:	20 40       	sbci	r18, 0x00	; 0
     2b4:	80 40       	sbci	r24, 0x00	; 0
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <getDistance_main+0x6e>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <getDistance_main+0x78>
		* diag = 0;
		
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
     2ba:	00 00       	nop
     2bc:	b3 df       	rcall	.-154    	; 0x224 <triggerUltrasonic>
{
	/* factor to be multiplied by pulse
	f = speedOfSound (343 m/s) * 100 * 8 (prescale factor) / 2 (way-back) / F_CPU;  ( ~0.008575 ); */
	/* distance = pulse * factor or
	distance = pulse / (1/factor) */
	return pulse / 116.618;
     2be:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <pulse>
     2c2:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <pulse+0x1>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	77 d3       	rcall	.+1774   	; 0x9ba <__floatunsisf>
     2cc:	2a e6       	ldi	r18, 0x6A	; 106
     2ce:	3c e3       	ldi	r19, 0x3C	; 60
     2d0:	49 ee       	ldi	r20, 0xE9	; 233
     2d2:	52 e4       	ldi	r21, 0x42	; 66
     2d4:	d9 d2       	rcall	.+1458   	; 0x888 <__divsf3>
     2d6:	2b 01       	movw	r4, r22
     2d8:	3c 01       	movw	r6, r24
     2da:	9f ef       	ldi	r25, 0xFF	; 255
     2dc:	e0 e7       	ldi	r30, 0x70	; 112
     2de:	f2 e0       	ldi	r31, 0x02	; 2
     2e0:	91 50       	subi	r25, 0x01	; 1
     2e2:	e0 40       	sbci	r30, 0x00	; 0
     2e4:	f0 40       	sbci	r31, 0x00	; 0
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <getDistance_main+0x9e>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <getDistance_main+0xa8>
			distance_array[j] = getDistance();
			sum +=distance_array[j];
			_delay_ms(50);
		}

		dist = sum/2;
     2ea:	00 00       	nop
     2ec:	a7 01       	movw	r20, r14
     2ee:	96 01       	movw	r18, r12
     2f0:	c3 01       	movw	r24, r6
     2f2:	b2 01       	movw	r22, r4
     2f4:	61 d2       	rcall	.+1218   	; 0x7b8 <__addsf3>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	5f e3       	ldi	r21, 0x3F	; 63
     2fe:	13 d4       	rcall	.+2086   	; 0xb26 <__mulsf3>
     300:	6b 01       	movw	r12, r22
		distance = dist;
		
		if ( dist <= 0 ) // Check if sensor defect or not connected (in which case it shows 0)
     302:	7c 01       	movw	r14, r24
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	a9 01       	movw	r20, r18
     30a:	ba d2       	rcall	.+1396   	; 0x880 <__cmpsf2>
     30c:	18 16       	cp	r1, r24
		{
			* diag = 13; // DTC: Defect sensor 
     30e:	1c f0       	brlt	.+6      	; 0x316 <getDistance_main+0xd4>
     310:	f8 01       	movw	r30, r16
     312:	30 82       	st	Z, r3
		}
		else if ( dist <= 20 ) // Too low range for the sensor (in case of sensor AJ-SR04M)
     314:	2b c0       	rjmp	.+86     	; 0x36c <getDistance_main+0x12a>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 ea       	ldi	r20, 0xA0	; 160
     31c:	51 e4       	ldi	r21, 0x41	; 65
     31e:	c7 01       	movw	r24, r14
     320:	b6 01       	movw	r22, r12
     322:	ae d2       	rcall	.+1372   	; 0x880 <__cmpsf2>
		{
			* diag = 15; // DTC: Low sensor range
     324:	18 16       	cp	r1, r24
     326:	1c f0       	brlt	.+6      	; 0x32e <getDistance_main+0xec>
     328:	f8 01       	movw	r30, r16
		}		
		else if ( abs(distance_array[0] - distance_array[1]) > SNSR_TOLERANCE ) /* Check measurements tolerance */
     32a:	d0 83       	st	Z, r29
     32c:	1f c0       	rjmp	.+62     	; 0x36c <getDistance_main+0x12a>
     32e:	a3 01       	movw	r20, r6
     330:	92 01       	movw	r18, r4
     332:	c5 01       	movw	r24, r10
     334:	b4 01       	movw	r22, r8
     336:	3f d2       	rcall	.+1150   	; 0x7b6 <__subsf3>
     338:	0f d3       	rcall	.+1566   	; 0x958 <__fixsfsi>
     33a:	9b 01       	movw	r18, r22
     33c:	77 23       	and	r23, r23
     33e:	24 f4       	brge	.+8      	; 0x348 <getDistance_main+0x106>
     340:	22 27       	eor	r18, r18
     342:	33 27       	eor	r19, r19
     344:	26 1b       	sub	r18, r22
     346:	37 0b       	sbc	r19, r23
     348:	26 30       	cpi	r18, 0x06	; 6
     34a:	31 05       	cpc	r19, r1
		{	
			* diag = 12;		// DTC: Imprecise meas.
     34c:	1c f0       	brlt	.+6      	; 0x354 <getDistance_main+0x112>
     34e:	f8 01       	movw	r30, r16
     350:	20 82       	st	Z, r2
		}
		else if ( dist >= 250 ) // distance too high
     352:	0c c0       	rjmp	.+24     	; 0x36c <getDistance_main+0x12a>
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	4a e7       	ldi	r20, 0x7A	; 122
     35a:	53 e4       	ldi	r21, 0x43	; 67
     35c:	c7 01       	movw	r24, r14
     35e:	b6 01       	movw	r22, r12
     360:	de d3       	rcall	.+1980   	; 0xb1e <__gesf2>
     362:	88 23       	and	r24, r24
		{
			* diag = 14; // DTC: Sensor out of range
     364:	34 f0       	brlt	.+12     	; 0x372 <getDistance_main+0x130>
     366:	2e e0       	ldi	r18, 0x0E	; 14
     368:	f8 01       	movw	r30, r16
     36a:	20 83       	st	Z, r18
	float dist = 0;
	float distance_array[2];
	float sum = 0;
		
	/* re-measurements for confirmation of unexpected results */
	for (uint8_t i = 0; i <= ULTRAS_ITER_MAX; i++)
     36c:	c1 50       	subi	r28, 0x01	; 1
     36e:	09 f0       	breq	.+2      	; 0x372 <getDistance_main+0x130>
		{ 
			break;
		}
	}

	return distance;
     370:	85 cf       	rjmp	.-246    	; 0x27c <getDistance_main+0x3a>
     372:	c7 01       	movw	r24, r14
     374:	b6 01       	movw	r22, r12
     376:	f5 d2       	rcall	.+1514   	; 0x962 <__fixunssfsi>
     378:	86 2f       	mov	r24, r22
 }
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	9f 90       	pop	r9
     390:	8f 90       	pop	r8
     392:	7f 90       	pop	r7
     394:	6f 90       	pop	r6
     396:	5f 90       	pop	r5
     398:	4f 90       	pop	r4
     39a:	3f 90       	pop	r3
     39c:	2f 90       	pop	r2
     39e:	08 95       	ret

000003a0 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
     3a0:	8a b1       	in	r24, 0x0a	; 10
     3a2:	80 6f       	ori	r24, 0xF0	; 240
     3a4:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
     3a6:	8a b1       	in	r24, 0x0a	; 10
     3a8:	8b 60       	ori	r24, 0x0B	; 11
     3aa:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
     3ac:	20 9a       	sbi	0x04, 0	; 4
     3ae:	08 95       	ret

000003b0 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <lcd_write_4+0x6>
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <lcd_write_4+0x8>
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
     3bc:	19 82       	std	Y+1, r1	; 0x01
     3be:	1a 82       	std	Y+2, r1	; 0x02
     3c0:	1b 82       	std	Y+3, r1	; 0x03
     3c2:	1c 82       	std	Y+4, r1	; 0x04
     3c4:	fe 01       	movw	r30, r28
     3c6:	31 96       	adiw	r30, 0x01	; 1
     3c8:	27 e0       	ldi	r18, 0x07	; 7
     3ca:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     3cc:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
     3ce:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     3d0:	ac 01       	movw	r20, r24
     3d2:	02 2e       	mov	r0, r18
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <lcd_write_4+0x2a>
     3d6:	55 95       	asr	r21
     3d8:	47 95       	ror	r20
     3da:	0a 94       	dec	r0
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <lcd_write_4+0x26>
     3de:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
     3e0:	60 83       	st	Z, r22
     3e2:	21 50       	subi	r18, 0x01	; 1
     3e4:	31 09       	sbc	r19, r1
     3e6:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
     3e8:	23 30       	cpi	r18, 0x03	; 3
     3ea:	31 05       	cpc	r19, r1
     3ec:	89 f7       	brne	.-30     	; 0x3d0 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
     3ee:	8b b1       	in	r24, 0x0b	; 11
     3f0:	8f 70       	andi	r24, 0x0F	; 15
     3f2:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
     3f4:	2b b1       	in	r18, 0x0b	; 11
     3f6:	49 81       	ldd	r20, Y+1	; 0x01
     3f8:	30 e8       	ldi	r19, 0x80	; 128
     3fa:	43 9f       	mul	r20, r19
     3fc:	c0 01       	movw	r24, r0
     3fe:	11 24       	eor	r1, r1
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	30 e4       	ldi	r19, 0x40	; 64
     404:	93 9f       	mul	r25, r19
     406:	a0 01       	movw	r20, r0
     408:	11 24       	eor	r1, r1
     40a:	48 2b       	or	r20, r24
     40c:	42 2b       	or	r20, r18
     40e:	9b 81       	ldd	r25, Y+3	; 0x03
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	98 9f       	mul	r25, r24
     414:	90 01       	movw	r18, r0
     416:	11 24       	eor	r1, r1
     418:	24 2b       	or	r18, r20
     41a:	9c 81       	ldd	r25, Y+4	; 0x04
     41c:	30 e1       	ldi	r19, 0x10	; 16
     41e:	93 9f       	mul	r25, r19
     420:	c0 01       	movw	r24, r0
     422:	11 24       	eor	r1, r1
     424:	82 2b       	or	r24, r18
     426:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
     428:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42a:	85 e0       	ldi	r24, 0x05	; 5
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     430:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
     432:	5b 98       	cbi	0x0b, 3	; 11
     434:	35 e0       	ldi	r19, 0x05	; 5
     436:	3a 95       	dec	r19
     438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43a:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
     44a:	cf 93       	push	r28
     44c:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     44e:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
     450:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     452:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
     454:	ad df       	rcall	.-166    	; 0x3b0 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
     456:	8c 2f       	mov	r24, r28
     458:	82 95       	swap	r24
     45a:	80 7f       	andi	r24, 0xF0	; 240
     45c:	a9 df       	rcall	.-174    	; 0x3b0 <lcd_write_4>
}
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
     462:	cf 93       	push	r28
     464:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     466:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
     468:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     46a:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
     46c:	a1 df       	rcall	.-190    	; 0x3b0 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
     46e:	8c 2f       	mov	r24, r28
     470:	82 95       	swap	r24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	9d df       	rcall	.-198    	; 0x3b0 <lcd_write_4>
}
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
     47a:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
     47c:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
     47e:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     480:	5b 9a       	sbi	0x0b, 3	; 11
     482:	85 e0       	ldi	r24, 0x05	; 5
     484:	8a 95       	dec	r24
     486:	f1 f7       	brne	.-4      	; 0x484 <lcd_check_BF_4+0xa>
     488:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
     48a:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     48c:	5b 98       	cbi	0x0b, 3	; 11
     48e:	95 e0       	ldi	r25, 0x05	; 5
     490:	9a 95       	dec	r25
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_check_BF_4+0x16>
     494:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     496:	5b 9a       	sbi	0x0b, 3	; 11
     498:	95 e0       	ldi	r25, 0x05	; 5
     49a:	9a 95       	dec	r25
     49c:	f1 f7       	brne	.-4      	; 0x49a <lcd_check_BF_4+0x20>
     49e:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     4a0:	5b 98       	cbi	0x0b, 3	; 11
     4a2:	95 e0       	ldi	r25, 0x05	; 5
     4a4:	9a 95       	dec	r25
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_check_BF_4+0x2a>
     4a8:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
     4aa:	88 23       	and	r24, r24
     4ac:	4c f3       	brlt	.-46     	; 0x480 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
     4ae:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
     4b0:	57 9a       	sbi	0x0a, 7	; 10
     4b2:	08 95       	ret

000004b4 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	81 ee       	ldi	r24, 0xE1	; 225
     4b8:	94 e0       	ldi	r25, 0x04	; 4
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <lcd_init_4f+0x6>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <lcd_init_4f+0x10>
     4c4:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
     4c6:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
     4c8:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
     4ca:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
     4cc:	80 e3       	ldi	r24, 0x30	; 48
     4ce:	70 df       	rcall	.-288    	; 0x3b0 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d0:	25 e3       	ldi	r18, 0x35	; 53
     4d2:	2a 95       	dec	r18
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init_4f+0x1e>
     4d6:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
     4d8:	80 e3       	ldi	r24, 0x30	; 48
     4da:	6a df       	rcall	.-300    	; 0x3b0 <lcd_write_4>
     4dc:	8f e1       	ldi	r24, 0x1F	; 31
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <lcd_init_4f+0x2c>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
     4e6:	00 00       	nop
     4e8:	80 e3       	ldi	r24, 0x30	; 48
     4ea:	62 df       	rcall	.-316    	; 0x3b0 <lcd_write_4>
     4ec:	8f e3       	ldi	r24, 0x3F	; 63
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <lcd_init_4f+0x3c>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
     4f6:	00 00       	nop
     4f8:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
     4fa:	5a df       	rcall	.-332    	; 0x3b0 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
     4fc:	be df       	rcall	.-132    	; 0x47a <lcd_check_BF_4>
     4fe:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     500:	b0 df       	rcall	.-160    	; 0x462 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
     502:	bb df       	rcall	.-138    	; 0x47a <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
     504:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
     506:	ad df       	rcall	.-166    	; 0x462 <lcd_write_instruction_4f>
     508:	b8 df       	rcall	.-144    	; 0x47a <lcd_check_BF_4>
     50a:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
     50c:	aa df       	rcall	.-172    	; 0x462 <lcd_write_instruction_4f>
     50e:	b5 df       	rcall	.-150    	; 0x47a <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	a7 df       	rcall	.-178    	; 0x462 <lcd_write_instruction_4f>
     514:	b2 df       	rcall	.-156    	; 0x47a <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     516:	8c e0       	ldi	r24, 0x0C	; 12
     518:	a4 cf       	rjmp	.-184    	; 0x462 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
     51a:	08 95       	ret

0000051c <initLCD>:
     51c:	41 df       	rcall	.-382    	; 0x3a0 <configLCDPorts>
     51e:	ca df       	rcall	.-108    	; 0x4b4 <lcd_init_4f>
     520:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	81 ee       	ldi	r24, 0xE1	; 225
     524:	94 e0       	ldi	r25, 0x04	; 4
     526:	21 50       	subi	r18, 0x01	; 1
     528:	80 40       	sbci	r24, 0x00	; 0
     52a:	90 40       	sbci	r25, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <initLCD+0xa>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <initLCD+0x14>
     530:	00 00       	nop
     532:	08 95       	ret

00000534 <lcd_write_string_4f>:
     534:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	00 d0       	rcall	.+0      	; 0x53e <lcd_write_string_4f+0xa>
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
     544:	1a 82       	std	Y+2, r1	; 0x02
     546:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
     548:	e9 81       	ldd	r30, Y+1	; 0x01
     54a:	fa 81       	ldd	r31, Y+2	; 0x02
     54c:	e8 0f       	add	r30, r24
     54e:	f9 1f       	adc	r31, r25
     550:	80 81       	ld	r24, Z
     552:	88 23       	and	r24, r24
     554:	99 f0       	breq	.+38     	; 0x57c <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
     556:	91 df       	rcall	.-222    	; 0x47a <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
     558:	e9 81       	ldd	r30, Y+1	; 0x01
     55a:	fa 81       	ldd	r31, Y+2	; 0x02
     55c:	e0 0f       	add	r30, r16
     55e:	f1 1f       	adc	r31, r17
     560:	80 81       	ld	r24, Z
     562:	73 df       	rcall	.-282    	; 0x44a <lcd_write_character_4f>
        i++;
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	9a 81       	ldd	r25, Y+2	; 0x02
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	9a 83       	std	Y+2, r25	; 0x02
     56c:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
     56e:	e9 81       	ldd	r30, Y+1	; 0x01
     570:	fa 81       	ldd	r31, Y+2	; 0x02
     572:	e0 0f       	add	r30, r16
     574:	f1 1f       	adc	r31, r17
     576:	80 81       	ld	r24, Z
     578:	81 11       	cpse	r24, r1
     57a:	ed cf       	rjmp	.-38     	; 0x556 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	af 97       	sbiw	r28, 0x2f	; 47
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	18 2f       	mov	r17, r24
     5aa:	d6 2e       	mov	r13, r22
     5ac:	07 2f       	mov	r16, r23
     5ae:	84 2f       	mov	r24, r20
     5b0:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
     5b2:	20 e2       	ldi	r18, 0x20	; 32
     5b4:	30 e2       	ldi	r19, 0x20	; 32
     5b6:	3a 83       	std	Y+2, r19	; 0x02
     5b8:	29 83       	std	Y+1, r18	; 0x01
     5ba:	20 e2       	ldi	r18, 0x20	; 32
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	3c 83       	std	Y+4, r19	; 0x04
     5c0:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
     5c2:	96 e1       	ldi	r25, 0x16	; 22
     5c4:	e8 e3       	ldi	r30, 0x38	; 56
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	de 01       	movw	r26, r28
     5ca:	5a 96       	adiw	r26, 0x1a	; 26
     5cc:	01 90       	ld	r0, Z+
     5ce:	0d 92       	st	X+, r0
     5d0:	9a 95       	dec	r25
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
     5d4:	4f 3f       	cpi	r20, 0xFF	; 255
     5d6:	31 f0       	breq	.+12     	; 0x5e4 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0d d3       	rcall	.+1562   	; 0xbfe <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
     5e4:	62 e0       	ldi	r22, 0x02	; 2
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	8d 2d       	mov	r24, r13
     5ea:	90 2f       	mov	r25, r16
     5ec:	ff d2       	rcall	.+1534   	; 0xbec <strcmp>
     5ee:	89 2b       	or	r24, r25
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <updateLCDScreen+0x6a>
     5f2:	ac c0       	rjmp	.+344    	; 0x74c <updateLCDScreen+0x1c2>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     5f4:	62 e0       	ldi	r22, 0x02	; 2
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	c7 01       	movw	r24, r14
     5fa:	f8 d2       	rcall	.+1520   	; 0xbec <strcmp>
     5fc:	89 2b       	or	r24, r25
     5fe:	31 f4       	brne	.+12     	; 0x60c <updateLCDScreen+0x82>
     600:	0f 2e       	mov	r0, r31
     602:	fd e4       	ldi	r31, 0x4D	; 77
     604:	ef 2e       	mov	r14, r31
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	ff 2e       	mov	r15, r31
     60a:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     60c:	ce 01       	movw	r24, r28
     60e:	4a 96       	adiw	r24, 0x1a	; 26
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	ff 92       	push	r15
     616:	ef 92       	push	r14
     618:	49 97       	sbiw	r24, 0x19	; 25
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0f 93       	push	r16
     620:	df 92       	push	r13
     622:	89 e2       	ldi	r24, 0x29	; 41
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	1f 92       	push	r1
     62c:	85 e1       	ldi	r24, 0x15	; 21
     62e:	8f 93       	push	r24
     630:	ce 01       	movw	r24, r28
     632:	05 96       	adiw	r24, 0x05	; 5
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	05 d3       	rcall	.+1546   	; 0xc44 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
     63a:	62 e3       	ldi	r22, 0x32	; 50
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	8d 2d       	mov	r24, r13
     640:	90 2f       	mov	r25, r16
     642:	d4 d2       	rcall	.+1448   	; 0xbec <strcmp>
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	89 2b       	or	r24, r25
     650:	a9 f4       	brne	.+42     	; 0x67c <updateLCDScreen+0xf2>
     652:	ce 01       	movw	r24, r28
     654:	4a 96       	adiw	r24, 0x1a	; 26
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	8f e2       	ldi	r24, 0x2F	; 47
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	1f 92       	push	r1
     664:	85 e1       	ldi	r24, 0x15	; 21
     666:	8f 93       	push	r24
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	e9 d2       	rcall	.+1490   	; 0xc44 <snprintf>
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
     67c:	12 30       	cpi	r17, 0x02	; 2
     67e:	a9 f0       	breq	.+42     	; 0x6aa <updateLCDScreen+0x120>
     680:	18 f4       	brcc	.+6      	; 0x688 <updateLCDScreen+0xfe>
     682:	11 30       	cpi	r17, 0x01	; 1
     684:	31 f0       	breq	.+12     	; 0x692 <updateLCDScreen+0x108>
     686:	34 c0       	rjmp	.+104    	; 0x6f0 <updateLCDScreen+0x166>
     688:	13 30       	cpi	r17, 0x03	; 3
     68a:	d9 f0       	breq	.+54     	; 0x6c2 <updateLCDScreen+0x138>
     68c:	14 30       	cpi	r17, 0x04	; 4
     68e:	29 f1       	breq	.+74     	; 0x6da <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
     690:	2f c0       	rjmp	.+94     	; 0x6f0 <updateLCDScreen+0x166>
     692:	80 e8       	ldi	r24, 0x80	; 128
     694:	e6 de       	rcall	.-564    	; 0x462 <lcd_write_instruction_4f>
     696:	9f ef       	ldi	r25, 0xFF	; 255
     698:	20 e7       	ldi	r18, 0x70	; 112
     69a:	32 e0       	ldi	r19, 0x02	; 2
     69c:	91 50       	subi	r25, 0x01	; 1
     69e:	20 40       	sbci	r18, 0x00	; 0
     6a0:	30 40       	sbci	r19, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <updateLCDScreen+0x112>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <updateLCDScreen+0x11c>
     6a6:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
     6a8:	23 c0       	rjmp	.+70     	; 0x6f0 <updateLCDScreen+0x166>
     6aa:	80 ec       	ldi	r24, 0xC0	; 192
     6ac:	da de       	rcall	.-588    	; 0x462 <lcd_write_instruction_4f>
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	90 e7       	ldi	r25, 0x70	; 112
     6b2:	22 e0       	ldi	r18, 0x02	; 2
     6b4:	81 50       	subi	r24, 0x01	; 1
     6b6:	90 40       	sbci	r25, 0x00	; 0
     6b8:	20 40       	sbci	r18, 0x00	; 0
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <updateLCDScreen+0x12a>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <updateLCDScreen+0x134>
     6be:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
     6c0:	17 c0       	rjmp	.+46     	; 0x6f0 <updateLCDScreen+0x166>
     6c2:	84 e9       	ldi	r24, 0x94	; 148
     6c4:	ce de       	rcall	.-612    	; 0x462 <lcd_write_instruction_4f>
     6c6:	3f ef       	ldi	r19, 0xFF	; 255
     6c8:	80 e7       	ldi	r24, 0x70	; 112
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	31 50       	subi	r19, 0x01	; 1
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	90 40       	sbci	r25, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <updateLCDScreen+0x142>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <updateLCDScreen+0x14c>
     6d6:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
     6d8:	0b c0       	rjmp	.+22     	; 0x6f0 <updateLCDScreen+0x166>
     6da:	84 ed       	ldi	r24, 0xD4	; 212
     6dc:	c2 de       	rcall	.-636    	; 0x462 <lcd_write_instruction_4f>
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	30 e7       	ldi	r19, 0x70	; 112
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	30 40       	sbci	r19, 0x00	; 0
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <updateLCDScreen+0x15a>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <updateLCDScreen+0x164>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
     6ee:	00 00       	nop
     6f0:	ce 01       	movw	r24, r28
     6f2:	05 96       	adiw	r24, 0x05	; 5
     6f4:	1f df       	rcall	.-450    	; 0x534 <lcd_write_string_4f>
     6f6:	9f ef       	ldi	r25, 0xFF	; 255
     6f8:	20 e7       	ldi	r18, 0x70	; 112
     6fa:	32 e0       	ldi	r19, 0x02	; 2
     6fc:	91 50       	subi	r25, 0x01	; 1
     6fe:	20 40       	sbci	r18, 0x00	; 0
     700:	30 40       	sbci	r19, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <updateLCDScreen+0x172>
     704:	00 c0       	rjmp	.+0      	; 0x706 <updateLCDScreen+0x17c>
     706:	00 00       	nop
}
     708:	46 c0       	rjmp	.+140    	; 0x796 <updateLCDScreen+0x20c>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     70a:	ce 01       	movw	r24, r28
     70c:	4a 96       	adiw	r24, 0x1a	; 26
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	8d e4       	ldi	r24, 0x4D	; 77
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	9e 01       	movw	r18, r28
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	3f 93       	push	r19
     722:	2f 93       	push	r18
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	89 e2       	ldi	r24, 0x29	; 41
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	1f 92       	push	r1
     732:	85 e1       	ldi	r24, 0x15	; 21
     734:	8f 93       	push	r24
     736:	ce 01       	movw	r24, r28
     738:	05 96       	adiw	r24, 0x05	; 5
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	82 d2       	rcall	.+1284   	; 0xc44 <snprintf>
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     74a:	98 cf       	rjmp	.-208    	; 0x67c <updateLCDScreen+0xf2>
     74c:	62 e0       	ldi	r22, 0x02	; 2
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	c7 01       	movw	r24, r14
     752:	4c d2       	rcall	.+1176   	; 0xbec <strcmp>
     754:	89 2b       	or	r24, r25
     756:	c9 f2       	breq	.-78     	; 0x70a <updateLCDScreen+0x180>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     758:	ce 01       	movw	r24, r28
     75a:	4a 96       	adiw	r24, 0x1a	; 26
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	ff 92       	push	r15
     762:	ef 92       	push	r14
     764:	49 97       	sbiw	r24, 0x19	; 25
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	8d e4       	ldi	r24, 0x4D	; 77
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
     772:	89 e2       	ldi	r24, 0x29	; 41
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	1f 92       	push	r1
     77c:	85 e1       	ldi	r24, 0x15	; 21
     77e:	8f 93       	push	r24
     780:	ce 01       	movw	r24, r28
     782:	05 96       	adiw	r24, 0x05	; 5
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	5d d2       	rcall	.+1210   	; 0xc44 <snprintf>
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	73 cf       	rjmp	.-282    	; 0x67c <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
     796:	af 96       	adiw	r28, 0x2f	; 47
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	08 95       	ret

000007b2 <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
     7b2:	eb ce       	rjmp	.-554    	; 0x58a <updateLCDScreen>
     7b4:	08 95       	ret

000007b6 <__subsf3>:
     7b6:	50 58       	subi	r21, 0x80	; 128

000007b8 <__addsf3>:
     7b8:	bb 27       	eor	r27, r27
     7ba:	aa 27       	eor	r26, r26
     7bc:	0e d0       	rcall	.+28     	; 0x7da <__addsf3x>
     7be:	75 c1       	rjmp	.+746    	; 0xaaa <__fp_round>
     7c0:	66 d1       	rcall	.+716    	; 0xa8e <__fp_pscA>
     7c2:	30 f0       	brcs	.+12     	; 0x7d0 <__addsf3+0x18>
     7c4:	6b d1       	rcall	.+726    	; 0xa9c <__fp_pscB>
     7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__addsf3+0x18>
     7c8:	31 f4       	brne	.+12     	; 0x7d6 <__addsf3+0x1e>
     7ca:	9f 3f       	cpi	r25, 0xFF	; 255
     7cc:	11 f4       	brne	.+4      	; 0x7d2 <__addsf3+0x1a>
     7ce:	1e f4       	brtc	.+6      	; 0x7d6 <__addsf3+0x1e>
     7d0:	5b c1       	rjmp	.+694    	; 0xa88 <__fp_nan>
     7d2:	0e f4       	brtc	.+2      	; 0x7d6 <__addsf3+0x1e>
     7d4:	e0 95       	com	r30
     7d6:	e7 fb       	bst	r30, 7
     7d8:	51 c1       	rjmp	.+674    	; 0xa7c <__fp_inf>

000007da <__addsf3x>:
     7da:	e9 2f       	mov	r30, r25
     7dc:	77 d1       	rcall	.+750    	; 0xacc <__fp_split3>
     7de:	80 f3       	brcs	.-32     	; 0x7c0 <__addsf3+0x8>
     7e0:	ba 17       	cp	r27, r26
     7e2:	62 07       	cpc	r22, r18
     7e4:	73 07       	cpc	r23, r19
     7e6:	84 07       	cpc	r24, r20
     7e8:	95 07       	cpc	r25, r21
     7ea:	18 f0       	brcs	.+6      	; 0x7f2 <__addsf3x+0x18>
     7ec:	71 f4       	brne	.+28     	; 0x80a <__addsf3x+0x30>
     7ee:	9e f5       	brtc	.+102    	; 0x856 <__addsf3x+0x7c>
     7f0:	8f c1       	rjmp	.+798    	; 0xb10 <__fp_zero>
     7f2:	0e f4       	brtc	.+2      	; 0x7f6 <__addsf3x+0x1c>
     7f4:	e0 95       	com	r30
     7f6:	0b 2e       	mov	r0, r27
     7f8:	ba 2f       	mov	r27, r26
     7fa:	a0 2d       	mov	r26, r0
     7fc:	0b 01       	movw	r0, r22
     7fe:	b9 01       	movw	r22, r18
     800:	90 01       	movw	r18, r0
     802:	0c 01       	movw	r0, r24
     804:	ca 01       	movw	r24, r20
     806:	a0 01       	movw	r20, r0
     808:	11 24       	eor	r1, r1
     80a:	ff 27       	eor	r31, r31
     80c:	59 1b       	sub	r21, r25
     80e:	99 f0       	breq	.+38     	; 0x836 <__addsf3x+0x5c>
     810:	59 3f       	cpi	r21, 0xF9	; 249
     812:	50 f4       	brcc	.+20     	; 0x828 <__addsf3x+0x4e>
     814:	50 3e       	cpi	r21, 0xE0	; 224
     816:	68 f1       	brcs	.+90     	; 0x872 <__addsf3x+0x98>
     818:	1a 16       	cp	r1, r26
     81a:	f0 40       	sbci	r31, 0x00	; 0
     81c:	a2 2f       	mov	r26, r18
     81e:	23 2f       	mov	r18, r19
     820:	34 2f       	mov	r19, r20
     822:	44 27       	eor	r20, r20
     824:	58 5f       	subi	r21, 0xF8	; 248
     826:	f3 cf       	rjmp	.-26     	; 0x80e <__addsf3x+0x34>
     828:	46 95       	lsr	r20
     82a:	37 95       	ror	r19
     82c:	27 95       	ror	r18
     82e:	a7 95       	ror	r26
     830:	f0 40       	sbci	r31, 0x00	; 0
     832:	53 95       	inc	r21
     834:	c9 f7       	brne	.-14     	; 0x828 <__addsf3x+0x4e>
     836:	7e f4       	brtc	.+30     	; 0x856 <__addsf3x+0x7c>
     838:	1f 16       	cp	r1, r31
     83a:	ba 0b       	sbc	r27, r26
     83c:	62 0b       	sbc	r22, r18
     83e:	73 0b       	sbc	r23, r19
     840:	84 0b       	sbc	r24, r20
     842:	ba f0       	brmi	.+46     	; 0x872 <__addsf3x+0x98>
     844:	91 50       	subi	r25, 0x01	; 1
     846:	a1 f0       	breq	.+40     	; 0x870 <__addsf3x+0x96>
     848:	ff 0f       	add	r31, r31
     84a:	bb 1f       	adc	r27, r27
     84c:	66 1f       	adc	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	88 1f       	adc	r24, r24
     852:	c2 f7       	brpl	.-16     	; 0x844 <__addsf3x+0x6a>
     854:	0e c0       	rjmp	.+28     	; 0x872 <__addsf3x+0x98>
     856:	ba 0f       	add	r27, r26
     858:	62 1f       	adc	r22, r18
     85a:	73 1f       	adc	r23, r19
     85c:	84 1f       	adc	r24, r20
     85e:	48 f4       	brcc	.+18     	; 0x872 <__addsf3x+0x98>
     860:	87 95       	ror	r24
     862:	77 95       	ror	r23
     864:	67 95       	ror	r22
     866:	b7 95       	ror	r27
     868:	f7 95       	ror	r31
     86a:	9e 3f       	cpi	r25, 0xFE	; 254
     86c:	08 f0       	brcs	.+2      	; 0x870 <__addsf3x+0x96>
     86e:	b3 cf       	rjmp	.-154    	; 0x7d6 <__addsf3+0x1e>
     870:	93 95       	inc	r25
     872:	88 0f       	add	r24, r24
     874:	08 f0       	brcs	.+2      	; 0x878 <__addsf3x+0x9e>
     876:	99 27       	eor	r25, r25
     878:	ee 0f       	add	r30, r30
     87a:	97 95       	ror	r25
     87c:	87 95       	ror	r24
     87e:	08 95       	ret

00000880 <__cmpsf2>:
     880:	d9 d0       	rcall	.+434    	; 0xa34 <__fp_cmp>
     882:	08 f4       	brcc	.+2      	; 0x886 <__cmpsf2+0x6>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	08 95       	ret

00000888 <__divsf3>:
     888:	0c d0       	rcall	.+24     	; 0x8a2 <__divsf3x>
     88a:	0f c1       	rjmp	.+542    	; 0xaaa <__fp_round>
     88c:	07 d1       	rcall	.+526    	; 0xa9c <__fp_pscB>
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__divsf3+0x18>
     890:	fe d0       	rcall	.+508    	; 0xa8e <__fp_pscA>
     892:	30 f0       	brcs	.+12     	; 0x8a0 <__divsf3+0x18>
     894:	21 f4       	brne	.+8      	; 0x89e <__divsf3+0x16>
     896:	5f 3f       	cpi	r21, 0xFF	; 255
     898:	19 f0       	breq	.+6      	; 0x8a0 <__divsf3+0x18>
     89a:	f0 c0       	rjmp	.+480    	; 0xa7c <__fp_inf>
     89c:	51 11       	cpse	r21, r1
     89e:	39 c1       	rjmp	.+626    	; 0xb12 <__fp_szero>
     8a0:	f3 c0       	rjmp	.+486    	; 0xa88 <__fp_nan>

000008a2 <__divsf3x>:
     8a2:	14 d1       	rcall	.+552    	; 0xacc <__fp_split3>
     8a4:	98 f3       	brcs	.-26     	; 0x88c <__divsf3+0x4>

000008a6 <__divsf3_pse>:
     8a6:	99 23       	and	r25, r25
     8a8:	c9 f3       	breq	.-14     	; 0x89c <__divsf3+0x14>
     8aa:	55 23       	and	r21, r21
     8ac:	b1 f3       	breq	.-20     	; 0x89a <__divsf3+0x12>
     8ae:	95 1b       	sub	r25, r21
     8b0:	55 0b       	sbc	r21, r21
     8b2:	bb 27       	eor	r27, r27
     8b4:	aa 27       	eor	r26, r26
     8b6:	62 17       	cp	r22, r18
     8b8:	73 07       	cpc	r23, r19
     8ba:	84 07       	cpc	r24, r20
     8bc:	38 f0       	brcs	.+14     	; 0x8cc <__divsf3_pse+0x26>
     8be:	9f 5f       	subi	r25, 0xFF	; 255
     8c0:	5f 4f       	sbci	r21, 0xFF	; 255
     8c2:	22 0f       	add	r18, r18
     8c4:	33 1f       	adc	r19, r19
     8c6:	44 1f       	adc	r20, r20
     8c8:	aa 1f       	adc	r26, r26
     8ca:	a9 f3       	breq	.-22     	; 0x8b6 <__divsf3_pse+0x10>
     8cc:	33 d0       	rcall	.+102    	; 0x934 <__stack+0x35>
     8ce:	0e 2e       	mov	r0, r30
     8d0:	3a f0       	brmi	.+14     	; 0x8e0 <__divsf3_pse+0x3a>
     8d2:	e0 e8       	ldi	r30, 0x80	; 128
     8d4:	30 d0       	rcall	.+96     	; 0x936 <__stack+0x37>
     8d6:	91 50       	subi	r25, 0x01	; 1
     8d8:	50 40       	sbci	r21, 0x00	; 0
     8da:	e6 95       	lsr	r30
     8dc:	00 1c       	adc	r0, r0
     8de:	ca f7       	brpl	.-14     	; 0x8d2 <__divsf3_pse+0x2c>
     8e0:	29 d0       	rcall	.+82     	; 0x934 <__stack+0x35>
     8e2:	fe 2f       	mov	r31, r30
     8e4:	27 d0       	rcall	.+78     	; 0x934 <__stack+0x35>
     8e6:	66 0f       	add	r22, r22
     8e8:	77 1f       	adc	r23, r23
     8ea:	88 1f       	adc	r24, r24
     8ec:	bb 1f       	adc	r27, r27
     8ee:	26 17       	cp	r18, r22
     8f0:	37 07       	cpc	r19, r23
     8f2:	48 07       	cpc	r20, r24
     8f4:	ab 07       	cpc	r26, r27
     8f6:	b0 e8       	ldi	r27, 0x80	; 128
     8f8:	09 f0       	breq	.+2      	; 0x8fc <__divsf3_pse+0x56>
     8fa:	bb 0b       	sbc	r27, r27
     8fc:	80 2d       	mov	r24, r0
     8fe:	bf 01       	movw	r22, r30
     900:	ff 27       	eor	r31, r31
     902:	93 58       	subi	r25, 0x83	; 131
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	2a f0       	brmi	.+10     	; 0x912 <__stack+0x13>
     908:	9e 3f       	cpi	r25, 0xFE	; 254
     90a:	51 05       	cpc	r21, r1
     90c:	68 f0       	brcs	.+26     	; 0x928 <__stack+0x29>
     90e:	b6 c0       	rjmp	.+364    	; 0xa7c <__fp_inf>
     910:	00 c1       	rjmp	.+512    	; 0xb12 <__fp_szero>
     912:	5f 3f       	cpi	r21, 0xFF	; 255
     914:	ec f3       	brlt	.-6      	; 0x910 <__stack+0x11>
     916:	98 3e       	cpi	r25, 0xE8	; 232
     918:	dc f3       	brlt	.-10     	; 0x910 <__stack+0x11>
     91a:	86 95       	lsr	r24
     91c:	77 95       	ror	r23
     91e:	67 95       	ror	r22
     920:	b7 95       	ror	r27
     922:	f7 95       	ror	r31
     924:	9f 5f       	subi	r25, 0xFF	; 255
     926:	c9 f7       	brne	.-14     	; 0x91a <__stack+0x1b>
     928:	88 0f       	add	r24, r24
     92a:	91 1d       	adc	r25, r1
     92c:	96 95       	lsr	r25
     92e:	87 95       	ror	r24
     930:	97 f9       	bld	r25, 7
     932:	08 95       	ret
     934:	e1 e0       	ldi	r30, 0x01	; 1
     936:	66 0f       	add	r22, r22
     938:	77 1f       	adc	r23, r23
     93a:	88 1f       	adc	r24, r24
     93c:	bb 1f       	adc	r27, r27
     93e:	62 17       	cp	r22, r18
     940:	73 07       	cpc	r23, r19
     942:	84 07       	cpc	r24, r20
     944:	ba 07       	cpc	r27, r26
     946:	20 f0       	brcs	.+8      	; 0x950 <__stack+0x51>
     948:	62 1b       	sub	r22, r18
     94a:	73 0b       	sbc	r23, r19
     94c:	84 0b       	sbc	r24, r20
     94e:	ba 0b       	sbc	r27, r26
     950:	ee 1f       	adc	r30, r30
     952:	88 f7       	brcc	.-30     	; 0x936 <__stack+0x37>
     954:	e0 95       	com	r30
     956:	08 95       	ret

00000958 <__fixsfsi>:
     958:	04 d0       	rcall	.+8      	; 0x962 <__fixunssfsi>
     95a:	68 94       	set
     95c:	b1 11       	cpse	r27, r1
     95e:	d9 c0       	rjmp	.+434    	; 0xb12 <__fp_szero>
     960:	08 95       	ret

00000962 <__fixunssfsi>:
     962:	bc d0       	rcall	.+376    	; 0xadc <__fp_splitA>
     964:	88 f0       	brcs	.+34     	; 0x988 <__fixunssfsi+0x26>
     966:	9f 57       	subi	r25, 0x7F	; 127
     968:	90 f0       	brcs	.+36     	; 0x98e <__fixunssfsi+0x2c>
     96a:	b9 2f       	mov	r27, r25
     96c:	99 27       	eor	r25, r25
     96e:	b7 51       	subi	r27, 0x17	; 23
     970:	a0 f0       	brcs	.+40     	; 0x99a <__fixunssfsi+0x38>
     972:	d1 f0       	breq	.+52     	; 0x9a8 <__fixunssfsi+0x46>
     974:	66 0f       	add	r22, r22
     976:	77 1f       	adc	r23, r23
     978:	88 1f       	adc	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	1a f0       	brmi	.+6      	; 0x984 <__fixunssfsi+0x22>
     97e:	ba 95       	dec	r27
     980:	c9 f7       	brne	.-14     	; 0x974 <__fixunssfsi+0x12>
     982:	12 c0       	rjmp	.+36     	; 0x9a8 <__fixunssfsi+0x46>
     984:	b1 30       	cpi	r27, 0x01	; 1
     986:	81 f0       	breq	.+32     	; 0x9a8 <__fixunssfsi+0x46>
     988:	c3 d0       	rcall	.+390    	; 0xb10 <__fp_zero>
     98a:	b1 e0       	ldi	r27, 0x01	; 1
     98c:	08 95       	ret
     98e:	c0 c0       	rjmp	.+384    	; 0xb10 <__fp_zero>
     990:	67 2f       	mov	r22, r23
     992:	78 2f       	mov	r23, r24
     994:	88 27       	eor	r24, r24
     996:	b8 5f       	subi	r27, 0xF8	; 248
     998:	39 f0       	breq	.+14     	; 0x9a8 <__fixunssfsi+0x46>
     99a:	b9 3f       	cpi	r27, 0xF9	; 249
     99c:	cc f3       	brlt	.-14     	; 0x990 <__fixunssfsi+0x2e>
     99e:	86 95       	lsr	r24
     9a0:	77 95       	ror	r23
     9a2:	67 95       	ror	r22
     9a4:	b3 95       	inc	r27
     9a6:	d9 f7       	brne	.-10     	; 0x99e <__fixunssfsi+0x3c>
     9a8:	3e f4       	brtc	.+14     	; 0x9b8 <__fixunssfsi+0x56>
     9aa:	90 95       	com	r25
     9ac:	80 95       	com	r24
     9ae:	70 95       	com	r23
     9b0:	61 95       	neg	r22
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	8f 4f       	sbci	r24, 0xFF	; 255
     9b6:	9f 4f       	sbci	r25, 0xFF	; 255
     9b8:	08 95       	ret

000009ba <__floatunsisf>:
     9ba:	e8 94       	clt
     9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__floatsisf+0x12>

000009be <__floatsisf>:
     9be:	97 fb       	bst	r25, 7
     9c0:	3e f4       	brtc	.+14     	; 0x9d0 <__floatsisf+0x12>
     9c2:	90 95       	com	r25
     9c4:	80 95       	com	r24
     9c6:	70 95       	com	r23
     9c8:	61 95       	neg	r22
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255
     9cc:	8f 4f       	sbci	r24, 0xFF	; 255
     9ce:	9f 4f       	sbci	r25, 0xFF	; 255
     9d0:	99 23       	and	r25, r25
     9d2:	a9 f0       	breq	.+42     	; 0x9fe <__floatsisf+0x40>
     9d4:	f9 2f       	mov	r31, r25
     9d6:	96 e9       	ldi	r25, 0x96	; 150
     9d8:	bb 27       	eor	r27, r27
     9da:	93 95       	inc	r25
     9dc:	f6 95       	lsr	r31
     9de:	87 95       	ror	r24
     9e0:	77 95       	ror	r23
     9e2:	67 95       	ror	r22
     9e4:	b7 95       	ror	r27
     9e6:	f1 11       	cpse	r31, r1
     9e8:	f8 cf       	rjmp	.-16     	; 0x9da <__floatsisf+0x1c>
     9ea:	fa f4       	brpl	.+62     	; 0xa2a <__floatsisf+0x6c>
     9ec:	bb 0f       	add	r27, r27
     9ee:	11 f4       	brne	.+4      	; 0x9f4 <__floatsisf+0x36>
     9f0:	60 ff       	sbrs	r22, 0
     9f2:	1b c0       	rjmp	.+54     	; 0xa2a <__floatsisf+0x6c>
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	8f 4f       	sbci	r24, 0xFF	; 255
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	16 c0       	rjmp	.+44     	; 0xa2a <__floatsisf+0x6c>
     9fe:	88 23       	and	r24, r24
     a00:	11 f0       	breq	.+4      	; 0xa06 <__floatsisf+0x48>
     a02:	96 e9       	ldi	r25, 0x96	; 150
     a04:	11 c0       	rjmp	.+34     	; 0xa28 <__floatsisf+0x6a>
     a06:	77 23       	and	r23, r23
     a08:	21 f0       	breq	.+8      	; 0xa12 <__floatsisf+0x54>
     a0a:	9e e8       	ldi	r25, 0x8E	; 142
     a0c:	87 2f       	mov	r24, r23
     a0e:	76 2f       	mov	r23, r22
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <__floatsisf+0x5e>
     a12:	66 23       	and	r22, r22
     a14:	71 f0       	breq	.+28     	; 0xa32 <__floatsisf+0x74>
     a16:	96 e8       	ldi	r25, 0x86	; 134
     a18:	86 2f       	mov	r24, r22
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	2a f0       	brmi	.+10     	; 0xa2a <__floatsisf+0x6c>
     a20:	9a 95       	dec	r25
     a22:	66 0f       	add	r22, r22
     a24:	77 1f       	adc	r23, r23
     a26:	88 1f       	adc	r24, r24
     a28:	da f7       	brpl	.-10     	; 0xa20 <__floatsisf+0x62>
     a2a:	88 0f       	add	r24, r24
     a2c:	96 95       	lsr	r25
     a2e:	87 95       	ror	r24
     a30:	97 f9       	bld	r25, 7
     a32:	08 95       	ret

00000a34 <__fp_cmp>:
     a34:	99 0f       	add	r25, r25
     a36:	00 08       	sbc	r0, r0
     a38:	55 0f       	add	r21, r21
     a3a:	aa 0b       	sbc	r26, r26
     a3c:	e0 e8       	ldi	r30, 0x80	; 128
     a3e:	fe ef       	ldi	r31, 0xFE	; 254
     a40:	16 16       	cp	r1, r22
     a42:	17 06       	cpc	r1, r23
     a44:	e8 07       	cpc	r30, r24
     a46:	f9 07       	cpc	r31, r25
     a48:	c0 f0       	brcs	.+48     	; 0xa7a <__fp_cmp+0x46>
     a4a:	12 16       	cp	r1, r18
     a4c:	13 06       	cpc	r1, r19
     a4e:	e4 07       	cpc	r30, r20
     a50:	f5 07       	cpc	r31, r21
     a52:	98 f0       	brcs	.+38     	; 0xa7a <__fp_cmp+0x46>
     a54:	62 1b       	sub	r22, r18
     a56:	73 0b       	sbc	r23, r19
     a58:	84 0b       	sbc	r24, r20
     a5a:	95 0b       	sbc	r25, r21
     a5c:	39 f4       	brne	.+14     	; 0xa6c <__fp_cmp+0x38>
     a5e:	0a 26       	eor	r0, r26
     a60:	61 f0       	breq	.+24     	; 0xa7a <__fp_cmp+0x46>
     a62:	23 2b       	or	r18, r19
     a64:	24 2b       	or	r18, r20
     a66:	25 2b       	or	r18, r21
     a68:	21 f4       	brne	.+8      	; 0xa72 <__fp_cmp+0x3e>
     a6a:	08 95       	ret
     a6c:	0a 26       	eor	r0, r26
     a6e:	09 f4       	brne	.+2      	; 0xa72 <__fp_cmp+0x3e>
     a70:	a1 40       	sbci	r26, 0x01	; 1
     a72:	a6 95       	lsr	r26
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	81 1d       	adc	r24, r1
     a78:	81 1d       	adc	r24, r1
     a7a:	08 95       	ret

00000a7c <__fp_inf>:
     a7c:	97 f9       	bld	r25, 7
     a7e:	9f 67       	ori	r25, 0x7F	; 127
     a80:	80 e8       	ldi	r24, 0x80	; 128
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	08 95       	ret

00000a88 <__fp_nan>:
     a88:	9f ef       	ldi	r25, 0xFF	; 255
     a8a:	80 ec       	ldi	r24, 0xC0	; 192
     a8c:	08 95       	ret

00000a8e <__fp_pscA>:
     a8e:	00 24       	eor	r0, r0
     a90:	0a 94       	dec	r0
     a92:	16 16       	cp	r1, r22
     a94:	17 06       	cpc	r1, r23
     a96:	18 06       	cpc	r1, r24
     a98:	09 06       	cpc	r0, r25
     a9a:	08 95       	ret

00000a9c <__fp_pscB>:
     a9c:	00 24       	eor	r0, r0
     a9e:	0a 94       	dec	r0
     aa0:	12 16       	cp	r1, r18
     aa2:	13 06       	cpc	r1, r19
     aa4:	14 06       	cpc	r1, r20
     aa6:	05 06       	cpc	r0, r21
     aa8:	08 95       	ret

00000aaa <__fp_round>:
     aaa:	09 2e       	mov	r0, r25
     aac:	03 94       	inc	r0
     aae:	00 0c       	add	r0, r0
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__fp_round+0xc>
     ab2:	88 23       	and	r24, r24
     ab4:	52 f0       	brmi	.+20     	; 0xaca <__fp_round+0x20>
     ab6:	bb 0f       	add	r27, r27
     ab8:	40 f4       	brcc	.+16     	; 0xaca <__fp_round+0x20>
     aba:	bf 2b       	or	r27, r31
     abc:	11 f4       	brne	.+4      	; 0xac2 <__fp_round+0x18>
     abe:	60 ff       	sbrs	r22, 0
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__fp_round+0x20>
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	8f 4f       	sbci	r24, 0xFF	; 255
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	08 95       	ret

00000acc <__fp_split3>:
     acc:	57 fd       	sbrc	r21, 7
     ace:	90 58       	subi	r25, 0x80	; 128
     ad0:	44 0f       	add	r20, r20
     ad2:	55 1f       	adc	r21, r21
     ad4:	59 f0       	breq	.+22     	; 0xaec <__fp_splitA+0x10>
     ad6:	5f 3f       	cpi	r21, 0xFF	; 255
     ad8:	71 f0       	breq	.+28     	; 0xaf6 <__fp_splitA+0x1a>
     ada:	47 95       	ror	r20

00000adc <__fp_splitA>:
     adc:	88 0f       	add	r24, r24
     ade:	97 fb       	bst	r25, 7
     ae0:	99 1f       	adc	r25, r25
     ae2:	61 f0       	breq	.+24     	; 0xafc <__fp_splitA+0x20>
     ae4:	9f 3f       	cpi	r25, 0xFF	; 255
     ae6:	79 f0       	breq	.+30     	; 0xb06 <__fp_splitA+0x2a>
     ae8:	87 95       	ror	r24
     aea:	08 95       	ret
     aec:	12 16       	cp	r1, r18
     aee:	13 06       	cpc	r1, r19
     af0:	14 06       	cpc	r1, r20
     af2:	55 1f       	adc	r21, r21
     af4:	f2 cf       	rjmp	.-28     	; 0xada <__fp_split3+0xe>
     af6:	46 95       	lsr	r20
     af8:	f1 df       	rcall	.-30     	; 0xadc <__fp_splitA>
     afa:	08 c0       	rjmp	.+16     	; 0xb0c <__fp_splitA+0x30>
     afc:	16 16       	cp	r1, r22
     afe:	17 06       	cpc	r1, r23
     b00:	18 06       	cpc	r1, r24
     b02:	99 1f       	adc	r25, r25
     b04:	f1 cf       	rjmp	.-30     	; 0xae8 <__fp_splitA+0xc>
     b06:	86 95       	lsr	r24
     b08:	71 05       	cpc	r23, r1
     b0a:	61 05       	cpc	r22, r1
     b0c:	08 94       	sec
     b0e:	08 95       	ret

00000b10 <__fp_zero>:
     b10:	e8 94       	clt

00000b12 <__fp_szero>:
     b12:	bb 27       	eor	r27, r27
     b14:	66 27       	eor	r22, r22
     b16:	77 27       	eor	r23, r23
     b18:	cb 01       	movw	r24, r22
     b1a:	97 f9       	bld	r25, 7
     b1c:	08 95       	ret

00000b1e <__gesf2>:
     b1e:	8a df       	rcall	.-236    	; 0xa34 <__fp_cmp>
     b20:	08 f4       	brcc	.+2      	; 0xb24 <__gesf2+0x6>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	08 95       	ret

00000b26 <__mulsf3>:
     b26:	0b d0       	rcall	.+22     	; 0xb3e <__mulsf3x>
     b28:	c0 cf       	rjmp	.-128    	; 0xaaa <__fp_round>
     b2a:	b1 df       	rcall	.-158    	; 0xa8e <__fp_pscA>
     b2c:	28 f0       	brcs	.+10     	; 0xb38 <__mulsf3+0x12>
     b2e:	b6 df       	rcall	.-148    	; 0xa9c <__fp_pscB>
     b30:	18 f0       	brcs	.+6      	; 0xb38 <__mulsf3+0x12>
     b32:	95 23       	and	r25, r21
     b34:	09 f0       	breq	.+2      	; 0xb38 <__mulsf3+0x12>
     b36:	a2 cf       	rjmp	.-188    	; 0xa7c <__fp_inf>
     b38:	a7 cf       	rjmp	.-178    	; 0xa88 <__fp_nan>
     b3a:	11 24       	eor	r1, r1
     b3c:	ea cf       	rjmp	.-44     	; 0xb12 <__fp_szero>

00000b3e <__mulsf3x>:
     b3e:	c6 df       	rcall	.-116    	; 0xacc <__fp_split3>
     b40:	a0 f3       	brcs	.-24     	; 0xb2a <__mulsf3+0x4>

00000b42 <__mulsf3_pse>:
     b42:	95 9f       	mul	r25, r21
     b44:	d1 f3       	breq	.-12     	; 0xb3a <__mulsf3+0x14>
     b46:	95 0f       	add	r25, r21
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	55 1f       	adc	r21, r21
     b4c:	62 9f       	mul	r22, r18
     b4e:	f0 01       	movw	r30, r0
     b50:	72 9f       	mul	r23, r18
     b52:	bb 27       	eor	r27, r27
     b54:	f0 0d       	add	r31, r0
     b56:	b1 1d       	adc	r27, r1
     b58:	63 9f       	mul	r22, r19
     b5a:	aa 27       	eor	r26, r26
     b5c:	f0 0d       	add	r31, r0
     b5e:	b1 1d       	adc	r27, r1
     b60:	aa 1f       	adc	r26, r26
     b62:	64 9f       	mul	r22, r20
     b64:	66 27       	eor	r22, r22
     b66:	b0 0d       	add	r27, r0
     b68:	a1 1d       	adc	r26, r1
     b6a:	66 1f       	adc	r22, r22
     b6c:	82 9f       	mul	r24, r18
     b6e:	22 27       	eor	r18, r18
     b70:	b0 0d       	add	r27, r0
     b72:	a1 1d       	adc	r26, r1
     b74:	62 1f       	adc	r22, r18
     b76:	73 9f       	mul	r23, r19
     b78:	b0 0d       	add	r27, r0
     b7a:	a1 1d       	adc	r26, r1
     b7c:	62 1f       	adc	r22, r18
     b7e:	83 9f       	mul	r24, r19
     b80:	a0 0d       	add	r26, r0
     b82:	61 1d       	adc	r22, r1
     b84:	22 1f       	adc	r18, r18
     b86:	74 9f       	mul	r23, r20
     b88:	33 27       	eor	r19, r19
     b8a:	a0 0d       	add	r26, r0
     b8c:	61 1d       	adc	r22, r1
     b8e:	23 1f       	adc	r18, r19
     b90:	84 9f       	mul	r24, r20
     b92:	60 0d       	add	r22, r0
     b94:	21 1d       	adc	r18, r1
     b96:	82 2f       	mov	r24, r18
     b98:	76 2f       	mov	r23, r22
     b9a:	6a 2f       	mov	r22, r26
     b9c:	11 24       	eor	r1, r1
     b9e:	9f 57       	subi	r25, 0x7F	; 127
     ba0:	50 40       	sbci	r21, 0x00	; 0
     ba2:	8a f0       	brmi	.+34     	; 0xbc6 <__mulsf3_pse+0x84>
     ba4:	e1 f0       	breq	.+56     	; 0xbde <__mulsf3_pse+0x9c>
     ba6:	88 23       	and	r24, r24
     ba8:	4a f0       	brmi	.+18     	; 0xbbc <__mulsf3_pse+0x7a>
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	bb 1f       	adc	r27, r27
     bb0:	66 1f       	adc	r22, r22
     bb2:	77 1f       	adc	r23, r23
     bb4:	88 1f       	adc	r24, r24
     bb6:	91 50       	subi	r25, 0x01	; 1
     bb8:	50 40       	sbci	r21, 0x00	; 0
     bba:	a9 f7       	brne	.-22     	; 0xba6 <__mulsf3_pse+0x64>
     bbc:	9e 3f       	cpi	r25, 0xFE	; 254
     bbe:	51 05       	cpc	r21, r1
     bc0:	70 f0       	brcs	.+28     	; 0xbde <__mulsf3_pse+0x9c>
     bc2:	5c cf       	rjmp	.-328    	; 0xa7c <__fp_inf>
     bc4:	a6 cf       	rjmp	.-180    	; 0xb12 <__fp_szero>
     bc6:	5f 3f       	cpi	r21, 0xFF	; 255
     bc8:	ec f3       	brlt	.-6      	; 0xbc4 <__mulsf3_pse+0x82>
     bca:	98 3e       	cpi	r25, 0xE8	; 232
     bcc:	dc f3       	brlt	.-10     	; 0xbc4 <__mulsf3_pse+0x82>
     bce:	86 95       	lsr	r24
     bd0:	77 95       	ror	r23
     bd2:	67 95       	ror	r22
     bd4:	b7 95       	ror	r27
     bd6:	f7 95       	ror	r31
     bd8:	e7 95       	ror	r30
     bda:	9f 5f       	subi	r25, 0xFF	; 255
     bdc:	c1 f7       	brne	.-16     	; 0xbce <__mulsf3_pse+0x8c>
     bde:	fe 2b       	or	r31, r30
     be0:	88 0f       	add	r24, r24
     be2:	91 1d       	adc	r25, r1
     be4:	96 95       	lsr	r25
     be6:	87 95       	ror	r24
     be8:	97 f9       	bld	r25, 7
     bea:	08 95       	ret

00000bec <strcmp>:
     bec:	fb 01       	movw	r30, r22
     bee:	dc 01       	movw	r26, r24
     bf0:	8d 91       	ld	r24, X+
     bf2:	01 90       	ld	r0, Z+
     bf4:	80 19       	sub	r24, r0
     bf6:	01 10       	cpse	r0, r1
     bf8:	d9 f3       	breq	.-10     	; 0xbf0 <strcmp+0x4>
     bfa:	99 0b       	sbc	r25, r25
     bfc:	08 95       	ret

00000bfe <__itoa_ncheck>:
     bfe:	bb 27       	eor	r27, r27
     c00:	4a 30       	cpi	r20, 0x0A	; 10
     c02:	31 f4       	brne	.+12     	; 0xc10 <__itoa_ncheck+0x12>
     c04:	99 23       	and	r25, r25
     c06:	22 f4       	brpl	.+8      	; 0xc10 <__itoa_ncheck+0x12>
     c08:	bd e2       	ldi	r27, 0x2D	; 45
     c0a:	90 95       	com	r25
     c0c:	81 95       	neg	r24
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <__utoa_common>

00000c12 <__utoa_ncheck>:
     c12:	bb 27       	eor	r27, r27

00000c14 <__utoa_common>:
     c14:	fb 01       	movw	r30, r22
     c16:	55 27       	eor	r21, r21
     c18:	aa 27       	eor	r26, r26
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	aa 1f       	adc	r26, r26
     c20:	a4 17       	cp	r26, r20
     c22:	10 f0       	brcs	.+4      	; 0xc28 <__utoa_common+0x14>
     c24:	a4 1b       	sub	r26, r20
     c26:	83 95       	inc	r24
     c28:	50 51       	subi	r21, 0x10	; 16
     c2a:	b9 f7       	brne	.-18     	; 0xc1a <__utoa_common+0x6>
     c2c:	a0 5d       	subi	r26, 0xD0	; 208
     c2e:	aa 33       	cpi	r26, 0x3A	; 58
     c30:	08 f0       	brcs	.+2      	; 0xc34 <__utoa_common+0x20>
     c32:	a9 5d       	subi	r26, 0xD9	; 217
     c34:	a1 93       	st	Z+, r26
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	79 f7       	brne	.-34     	; 0xc18 <__utoa_common+0x4>
     c3a:	b1 11       	cpse	r27, r1
     c3c:	b1 93       	st	Z+, r27
     c3e:	11 92       	st	Z+, r1
     c40:	cb 01       	movw	r24, r22
     c42:	15 c2       	rjmp	.+1066   	; 0x106e <strrev>

00000c44 <snprintf>:
     c44:	ae e0       	ldi	r26, 0x0E	; 14
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e7 e2       	ldi	r30, 0x27	; 39
     c4a:	f6 e0       	ldi	r31, 0x06	; 6
     c4c:	c8 c2       	rjmp	.+1424   	; 0x11de <__prologue_saves__+0x1c>
     c4e:	0d 89       	ldd	r16, Y+21	; 0x15
     c50:	1e 89       	ldd	r17, Y+22	; 0x16
     c52:	8f 89       	ldd	r24, Y+23	; 0x17
     c54:	98 8d       	ldd	r25, Y+24	; 0x18
     c56:	26 e0       	ldi	r18, 0x06	; 6
     c58:	2c 83       	std	Y+4, r18	; 0x04
     c5a:	1a 83       	std	Y+2, r17	; 0x02
     c5c:	09 83       	std	Y+1, r16	; 0x01
     c5e:	97 ff       	sbrs	r25, 7
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <snprintf+0x22>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e8       	ldi	r25, 0x80	; 128
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	ae 01       	movw	r20, r28
     c6e:	45 5e       	subi	r20, 0xE5	; 229
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	69 8d       	ldd	r22, Y+25	; 0x19
     c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	11 d0       	rcall	.+34     	; 0xc9e <vfprintf>
     c7c:	4d 81       	ldd	r20, Y+5	; 0x05
     c7e:	5e 81       	ldd	r21, Y+6	; 0x06
     c80:	57 fd       	sbrc	r21, 7
     c82:	0a c0       	rjmp	.+20     	; 0xc98 <snprintf+0x54>
     c84:	2f 81       	ldd	r18, Y+7	; 0x07
     c86:	38 85       	ldd	r19, Y+8	; 0x08
     c88:	42 17       	cp	r20, r18
     c8a:	53 07       	cpc	r21, r19
     c8c:	0c f4       	brge	.+2      	; 0xc90 <snprintf+0x4c>
     c8e:	9a 01       	movw	r18, r20
     c90:	f8 01       	movw	r30, r16
     c92:	e2 0f       	add	r30, r18
     c94:	f3 1f       	adc	r31, r19
     c96:	10 82       	st	Z, r1
     c98:	2e 96       	adiw	r28, 0x0e	; 14
     c9a:	e4 e0       	ldi	r30, 0x04	; 4
     c9c:	bc c2       	rjmp	.+1400   	; 0x1216 <__epilogue_restores__+0x1c>

00000c9e <vfprintf>:
     c9e:	ab e0       	ldi	r26, 0x0B	; 11
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e4 e5       	ldi	r30, 0x54	; 84
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	8d c2       	rjmp	.+1306   	; 0x11c2 <__prologue_saves__>
     ca8:	6c 01       	movw	r12, r24
     caa:	7b 01       	movw	r14, r22
     cac:	8a 01       	movw	r16, r20
     cae:	fc 01       	movw	r30, r24
     cb0:	17 82       	std	Z+7, r1	; 0x07
     cb2:	16 82       	std	Z+6, r1	; 0x06
     cb4:	83 81       	ldd	r24, Z+3	; 0x03
     cb6:	81 ff       	sbrs	r24, 1
     cb8:	bf c1       	rjmp	.+894    	; 0x1038 <vfprintf+0x39a>
     cba:	ce 01       	movw	r24, r28
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	3c 01       	movw	r6, r24
     cc0:	f6 01       	movw	r30, r12
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	f7 01       	movw	r30, r14
     cc6:	93 fd       	sbrc	r25, 3
     cc8:	85 91       	lpm	r24, Z+
     cca:	93 ff       	sbrs	r25, 3
     ccc:	81 91       	ld	r24, Z+
     cce:	7f 01       	movw	r14, r30
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <vfprintf+0x38>
     cd4:	ad c1       	rjmp	.+858    	; 0x1030 <vfprintf+0x392>
     cd6:	85 32       	cpi	r24, 0x25	; 37
     cd8:	39 f4       	brne	.+14     	; 0xce8 <vfprintf+0x4a>
     cda:	93 fd       	sbrc	r25, 3
     cdc:	85 91       	lpm	r24, Z+
     cde:	93 ff       	sbrs	r25, 3
     ce0:	81 91       	ld	r24, Z+
     ce2:	7f 01       	movw	r14, r30
     ce4:	85 32       	cpi	r24, 0x25	; 37
     ce6:	21 f4       	brne	.+8      	; 0xcf0 <vfprintf+0x52>
     ce8:	b6 01       	movw	r22, r12
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	d0 d1       	rcall	.+928    	; 0x108e <fputc>
     cee:	e8 cf       	rjmp	.-48     	; 0xcc0 <vfprintf+0x22>
     cf0:	91 2c       	mov	r9, r1
     cf2:	21 2c       	mov	r2, r1
     cf4:	31 2c       	mov	r3, r1
     cf6:	ff e1       	ldi	r31, 0x1F	; 31
     cf8:	f3 15       	cp	r31, r3
     cfa:	d8 f0       	brcs	.+54     	; 0xd32 <vfprintf+0x94>
     cfc:	8b 32       	cpi	r24, 0x2B	; 43
     cfe:	79 f0       	breq	.+30     	; 0xd1e <vfprintf+0x80>
     d00:	38 f4       	brcc	.+14     	; 0xd10 <vfprintf+0x72>
     d02:	80 32       	cpi	r24, 0x20	; 32
     d04:	79 f0       	breq	.+30     	; 0xd24 <vfprintf+0x86>
     d06:	83 32       	cpi	r24, 0x23	; 35
     d08:	a1 f4       	brne	.+40     	; 0xd32 <vfprintf+0x94>
     d0a:	23 2d       	mov	r18, r3
     d0c:	20 61       	ori	r18, 0x10	; 16
     d0e:	1d c0       	rjmp	.+58     	; 0xd4a <vfprintf+0xac>
     d10:	8d 32       	cpi	r24, 0x2D	; 45
     d12:	61 f0       	breq	.+24     	; 0xd2c <vfprintf+0x8e>
     d14:	80 33       	cpi	r24, 0x30	; 48
     d16:	69 f4       	brne	.+26     	; 0xd32 <vfprintf+0x94>
     d18:	23 2d       	mov	r18, r3
     d1a:	21 60       	ori	r18, 0x01	; 1
     d1c:	16 c0       	rjmp	.+44     	; 0xd4a <vfprintf+0xac>
     d1e:	83 2d       	mov	r24, r3
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	38 2e       	mov	r3, r24
     d24:	e3 2d       	mov	r30, r3
     d26:	e4 60       	ori	r30, 0x04	; 4
     d28:	3e 2e       	mov	r3, r30
     d2a:	2a c0       	rjmp	.+84     	; 0xd80 <vfprintf+0xe2>
     d2c:	f3 2d       	mov	r31, r3
     d2e:	f8 60       	ori	r31, 0x08	; 8
     d30:	1d c0       	rjmp	.+58     	; 0xd6c <vfprintf+0xce>
     d32:	37 fc       	sbrc	r3, 7
     d34:	2d c0       	rjmp	.+90     	; 0xd90 <vfprintf+0xf2>
     d36:	20 ed       	ldi	r18, 0xD0	; 208
     d38:	28 0f       	add	r18, r24
     d3a:	2a 30       	cpi	r18, 0x0A	; 10
     d3c:	40 f0       	brcs	.+16     	; 0xd4e <vfprintf+0xb0>
     d3e:	8e 32       	cpi	r24, 0x2E	; 46
     d40:	b9 f4       	brne	.+46     	; 0xd70 <vfprintf+0xd2>
     d42:	36 fc       	sbrc	r3, 6
     d44:	75 c1       	rjmp	.+746    	; 0x1030 <vfprintf+0x392>
     d46:	23 2d       	mov	r18, r3
     d48:	20 64       	ori	r18, 0x40	; 64
     d4a:	32 2e       	mov	r3, r18
     d4c:	19 c0       	rjmp	.+50     	; 0xd80 <vfprintf+0xe2>
     d4e:	36 fe       	sbrs	r3, 6
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0xc0>
     d52:	8a e0       	ldi	r24, 0x0A	; 10
     d54:	98 9e       	mul	r9, r24
     d56:	20 0d       	add	r18, r0
     d58:	11 24       	eor	r1, r1
     d5a:	92 2e       	mov	r9, r18
     d5c:	11 c0       	rjmp	.+34     	; 0xd80 <vfprintf+0xe2>
     d5e:	ea e0       	ldi	r30, 0x0A	; 10
     d60:	2e 9e       	mul	r2, r30
     d62:	20 0d       	add	r18, r0
     d64:	11 24       	eor	r1, r1
     d66:	22 2e       	mov	r2, r18
     d68:	f3 2d       	mov	r31, r3
     d6a:	f0 62       	ori	r31, 0x20	; 32
     d6c:	3f 2e       	mov	r3, r31
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <vfprintf+0xe2>
     d70:	8c 36       	cpi	r24, 0x6C	; 108
     d72:	21 f4       	brne	.+8      	; 0xd7c <vfprintf+0xde>
     d74:	83 2d       	mov	r24, r3
     d76:	80 68       	ori	r24, 0x80	; 128
     d78:	38 2e       	mov	r3, r24
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0xe2>
     d7c:	88 36       	cpi	r24, 0x68	; 104
     d7e:	41 f4       	brne	.+16     	; 0xd90 <vfprintf+0xf2>
     d80:	f7 01       	movw	r30, r14
     d82:	93 fd       	sbrc	r25, 3
     d84:	85 91       	lpm	r24, Z+
     d86:	93 ff       	sbrs	r25, 3
     d88:	81 91       	ld	r24, Z+
     d8a:	7f 01       	movw	r14, r30
     d8c:	81 11       	cpse	r24, r1
     d8e:	b3 cf       	rjmp	.-154    	; 0xcf6 <vfprintf+0x58>
     d90:	98 2f       	mov	r25, r24
     d92:	9f 7d       	andi	r25, 0xDF	; 223
     d94:	95 54       	subi	r25, 0x45	; 69
     d96:	93 30       	cpi	r25, 0x03	; 3
     d98:	28 f4       	brcc	.+10     	; 0xda4 <vfprintf+0x106>
     d9a:	0c 5f       	subi	r16, 0xFC	; 252
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	9f e3       	ldi	r25, 0x3F	; 63
     da0:	99 83       	std	Y+1, r25	; 0x01
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <vfprintf+0x120>
     da4:	83 36       	cpi	r24, 0x63	; 99
     da6:	31 f0       	breq	.+12     	; 0xdb4 <vfprintf+0x116>
     da8:	83 37       	cpi	r24, 0x73	; 115
     daa:	71 f0       	breq	.+28     	; 0xdc8 <vfprintf+0x12a>
     dac:	83 35       	cpi	r24, 0x53	; 83
     dae:	09 f0       	breq	.+2      	; 0xdb2 <vfprintf+0x114>
     db0:	55 c0       	rjmp	.+170    	; 0xe5c <vfprintf+0x1be>
     db2:	20 c0       	rjmp	.+64     	; 0xdf4 <vfprintf+0x156>
     db4:	f8 01       	movw	r30, r16
     db6:	80 81       	ld	r24, Z
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	0e 5f       	subi	r16, 0xFE	; 254
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	88 24       	eor	r8, r8
     dc0:	83 94       	inc	r8
     dc2:	91 2c       	mov	r9, r1
     dc4:	53 01       	movw	r10, r6
     dc6:	12 c0       	rjmp	.+36     	; 0xdec <vfprintf+0x14e>
     dc8:	28 01       	movw	r4, r16
     dca:	f2 e0       	ldi	r31, 0x02	; 2
     dcc:	4f 0e       	add	r4, r31
     dce:	51 1c       	adc	r5, r1
     dd0:	f8 01       	movw	r30, r16
     dd2:	a0 80       	ld	r10, Z
     dd4:	b1 80       	ldd	r11, Z+1	; 0x01
     dd6:	36 fe       	sbrs	r3, 6
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <vfprintf+0x142>
     dda:	69 2d       	mov	r22, r9
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x146>
     de0:	6f ef       	ldi	r22, 0xFF	; 255
     de2:	7f ef       	ldi	r23, 0xFF	; 255
     de4:	c5 01       	movw	r24, r10
     de6:	38 d1       	rcall	.+624    	; 0x1058 <strnlen>
     de8:	4c 01       	movw	r8, r24
     dea:	82 01       	movw	r16, r4
     dec:	f3 2d       	mov	r31, r3
     dee:	ff 77       	andi	r31, 0x7F	; 127
     df0:	3f 2e       	mov	r3, r31
     df2:	15 c0       	rjmp	.+42     	; 0xe1e <vfprintf+0x180>
     df4:	28 01       	movw	r4, r16
     df6:	22 e0       	ldi	r18, 0x02	; 2
     df8:	42 0e       	add	r4, r18
     dfa:	51 1c       	adc	r5, r1
     dfc:	f8 01       	movw	r30, r16
     dfe:	a0 80       	ld	r10, Z
     e00:	b1 80       	ldd	r11, Z+1	; 0x01
     e02:	36 fe       	sbrs	r3, 6
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <vfprintf+0x16e>
     e06:	69 2d       	mov	r22, r9
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x172>
     e0c:	6f ef       	ldi	r22, 0xFF	; 255
     e0e:	7f ef       	ldi	r23, 0xFF	; 255
     e10:	c5 01       	movw	r24, r10
     e12:	17 d1       	rcall	.+558    	; 0x1042 <strnlen_P>
     e14:	4c 01       	movw	r8, r24
     e16:	f3 2d       	mov	r31, r3
     e18:	f0 68       	ori	r31, 0x80	; 128
     e1a:	3f 2e       	mov	r3, r31
     e1c:	82 01       	movw	r16, r4
     e1e:	33 fc       	sbrc	r3, 3
     e20:	19 c0       	rjmp	.+50     	; 0xe54 <vfprintf+0x1b6>
     e22:	82 2d       	mov	r24, r2
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	88 16       	cp	r8, r24
     e28:	99 06       	cpc	r9, r25
     e2a:	a0 f4       	brcc	.+40     	; 0xe54 <vfprintf+0x1b6>
     e2c:	b6 01       	movw	r22, r12
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	2d d1       	rcall	.+602    	; 0x108e <fputc>
     e34:	2a 94       	dec	r2
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <vfprintf+0x184>
     e38:	f5 01       	movw	r30, r10
     e3a:	37 fc       	sbrc	r3, 7
     e3c:	85 91       	lpm	r24, Z+
     e3e:	37 fe       	sbrs	r3, 7
     e40:	81 91       	ld	r24, Z+
     e42:	5f 01       	movw	r10, r30
     e44:	b6 01       	movw	r22, r12
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	22 d1       	rcall	.+580    	; 0x108e <fputc>
     e4a:	21 10       	cpse	r2, r1
     e4c:	2a 94       	dec	r2
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	82 1a       	sub	r8, r18
     e52:	91 08       	sbc	r9, r1
     e54:	81 14       	cp	r8, r1
     e56:	91 04       	cpc	r9, r1
     e58:	79 f7       	brne	.-34     	; 0xe38 <vfprintf+0x19a>
     e5a:	e1 c0       	rjmp	.+450    	; 0x101e <vfprintf+0x380>
     e5c:	84 36       	cpi	r24, 0x64	; 100
     e5e:	11 f0       	breq	.+4      	; 0xe64 <vfprintf+0x1c6>
     e60:	89 36       	cpi	r24, 0x69	; 105
     e62:	39 f5       	brne	.+78     	; 0xeb2 <vfprintf+0x214>
     e64:	f8 01       	movw	r30, r16
     e66:	37 fe       	sbrs	r3, 7
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <vfprintf+0x1da>
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	0c 5f       	subi	r16, 0xFC	; 252
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <vfprintf+0x1ea>
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	07 2e       	mov	r0, r23
     e7e:	00 0c       	add	r0, r0
     e80:	88 0b       	sbc	r24, r24
     e82:	99 0b       	sbc	r25, r25
     e84:	0e 5f       	subi	r16, 0xFE	; 254
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	f3 2d       	mov	r31, r3
     e8a:	ff 76       	andi	r31, 0x6F	; 111
     e8c:	3f 2e       	mov	r3, r31
     e8e:	97 ff       	sbrs	r25, 7
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <vfprintf+0x206>
     e92:	90 95       	com	r25
     e94:	80 95       	com	r24
     e96:	70 95       	com	r23
     e98:	61 95       	neg	r22
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	f0 68       	ori	r31, 0x80	; 128
     ea2:	3f 2e       	mov	r3, r31
     ea4:	2a e0       	ldi	r18, 0x0A	; 10
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	a3 01       	movw	r20, r6
     eaa:	2d d1       	rcall	.+602    	; 0x1106 <__ultoa_invert>
     eac:	88 2e       	mov	r8, r24
     eae:	86 18       	sub	r8, r6
     eb0:	44 c0       	rjmp	.+136    	; 0xf3a <vfprintf+0x29c>
     eb2:	85 37       	cpi	r24, 0x75	; 117
     eb4:	31 f4       	brne	.+12     	; 0xec2 <vfprintf+0x224>
     eb6:	23 2d       	mov	r18, r3
     eb8:	2f 7e       	andi	r18, 0xEF	; 239
     eba:	b2 2e       	mov	r11, r18
     ebc:	2a e0       	ldi	r18, 0x0A	; 10
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	25 c0       	rjmp	.+74     	; 0xf0c <vfprintf+0x26e>
     ec2:	93 2d       	mov	r25, r3
     ec4:	99 7f       	andi	r25, 0xF9	; 249
     ec6:	b9 2e       	mov	r11, r25
     ec8:	8f 36       	cpi	r24, 0x6F	; 111
     eca:	c1 f0       	breq	.+48     	; 0xefc <vfprintf+0x25e>
     ecc:	18 f4       	brcc	.+6      	; 0xed4 <vfprintf+0x236>
     ece:	88 35       	cpi	r24, 0x58	; 88
     ed0:	79 f0       	breq	.+30     	; 0xef0 <vfprintf+0x252>
     ed2:	ae c0       	rjmp	.+348    	; 0x1030 <vfprintf+0x392>
     ed4:	80 37       	cpi	r24, 0x70	; 112
     ed6:	19 f0       	breq	.+6      	; 0xede <vfprintf+0x240>
     ed8:	88 37       	cpi	r24, 0x78	; 120
     eda:	21 f0       	breq	.+8      	; 0xee4 <vfprintf+0x246>
     edc:	a9 c0       	rjmp	.+338    	; 0x1030 <vfprintf+0x392>
     ede:	e9 2f       	mov	r30, r25
     ee0:	e0 61       	ori	r30, 0x10	; 16
     ee2:	be 2e       	mov	r11, r30
     ee4:	b4 fe       	sbrs	r11, 4
     ee6:	0d c0       	rjmp	.+26     	; 0xf02 <vfprintf+0x264>
     ee8:	fb 2d       	mov	r31, r11
     eea:	f4 60       	ori	r31, 0x04	; 4
     eec:	bf 2e       	mov	r11, r31
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <vfprintf+0x264>
     ef0:	34 fe       	sbrs	r3, 4
     ef2:	0a c0       	rjmp	.+20     	; 0xf08 <vfprintf+0x26a>
     ef4:	29 2f       	mov	r18, r25
     ef6:	26 60       	ori	r18, 0x06	; 6
     ef8:	b2 2e       	mov	r11, r18
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <vfprintf+0x26a>
     efc:	28 e0       	ldi	r18, 0x08	; 8
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <vfprintf+0x26e>
     f02:	20 e1       	ldi	r18, 0x10	; 16
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <vfprintf+0x26e>
     f08:	20 e1       	ldi	r18, 0x10	; 16
     f0a:	32 e0       	ldi	r19, 0x02	; 2
     f0c:	f8 01       	movw	r30, r16
     f0e:	b7 fe       	sbrs	r11, 7
     f10:	07 c0       	rjmp	.+14     	; 0xf20 <vfprintf+0x282>
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	0c 5f       	subi	r16, 0xFC	; 252
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <vfprintf+0x28e>
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 5f       	subi	r16, 0xFE	; 254
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	a3 01       	movw	r20, r6
     f2e:	eb d0       	rcall	.+470    	; 0x1106 <__ultoa_invert>
     f30:	88 2e       	mov	r8, r24
     f32:	86 18       	sub	r8, r6
     f34:	fb 2d       	mov	r31, r11
     f36:	ff 77       	andi	r31, 0x7F	; 127
     f38:	3f 2e       	mov	r3, r31
     f3a:	36 fe       	sbrs	r3, 6
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <vfprintf+0x2ba>
     f3e:	23 2d       	mov	r18, r3
     f40:	2e 7f       	andi	r18, 0xFE	; 254
     f42:	a2 2e       	mov	r10, r18
     f44:	89 14       	cp	r8, r9
     f46:	58 f4       	brcc	.+22     	; 0xf5e <vfprintf+0x2c0>
     f48:	34 fe       	sbrs	r3, 4
     f4a:	0b c0       	rjmp	.+22     	; 0xf62 <vfprintf+0x2c4>
     f4c:	32 fc       	sbrc	r3, 2
     f4e:	09 c0       	rjmp	.+18     	; 0xf62 <vfprintf+0x2c4>
     f50:	83 2d       	mov	r24, r3
     f52:	8e 7e       	andi	r24, 0xEE	; 238
     f54:	a8 2e       	mov	r10, r24
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <vfprintf+0x2c4>
     f58:	b8 2c       	mov	r11, r8
     f5a:	a3 2c       	mov	r10, r3
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <vfprintf+0x2c6>
     f5e:	b8 2c       	mov	r11, r8
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <vfprintf+0x2c6>
     f62:	b9 2c       	mov	r11, r9
     f64:	a4 fe       	sbrs	r10, 4
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <vfprintf+0x2e8>
     f68:	fe 01       	movw	r30, r28
     f6a:	e8 0d       	add	r30, r8
     f6c:	f1 1d       	adc	r31, r1
     f6e:	80 81       	ld	r24, Z
     f70:	80 33       	cpi	r24, 0x30	; 48
     f72:	21 f4       	brne	.+8      	; 0xf7c <vfprintf+0x2de>
     f74:	9a 2d       	mov	r25, r10
     f76:	99 7e       	andi	r25, 0xE9	; 233
     f78:	a9 2e       	mov	r10, r25
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <vfprintf+0x2f0>
     f7c:	a2 fe       	sbrs	r10, 2
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <vfprintf+0x2ee>
     f80:	b3 94       	inc	r11
     f82:	b3 94       	inc	r11
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <vfprintf+0x2f0>
     f86:	8a 2d       	mov	r24, r10
     f88:	86 78       	andi	r24, 0x86	; 134
     f8a:	09 f0       	breq	.+2      	; 0xf8e <vfprintf+0x2f0>
     f8c:	b3 94       	inc	r11
     f8e:	a3 fc       	sbrc	r10, 3
     f90:	10 c0       	rjmp	.+32     	; 0xfb2 <vfprintf+0x314>
     f92:	a0 fe       	sbrs	r10, 0
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <vfprintf+0x304>
     f96:	b2 14       	cp	r11, r2
     f98:	80 f4       	brcc	.+32     	; 0xfba <vfprintf+0x31c>
     f9a:	28 0c       	add	r2, r8
     f9c:	92 2c       	mov	r9, r2
     f9e:	9b 18       	sub	r9, r11
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <vfprintf+0x31e>
     fa2:	b2 14       	cp	r11, r2
     fa4:	58 f4       	brcc	.+22     	; 0xfbc <vfprintf+0x31e>
     fa6:	b6 01       	movw	r22, r12
     fa8:	80 e2       	ldi	r24, 0x20	; 32
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	70 d0       	rcall	.+224    	; 0x108e <fputc>
     fae:	b3 94       	inc	r11
     fb0:	f8 cf       	rjmp	.-16     	; 0xfa2 <vfprintf+0x304>
     fb2:	b2 14       	cp	r11, r2
     fb4:	18 f4       	brcc	.+6      	; 0xfbc <vfprintf+0x31e>
     fb6:	2b 18       	sub	r2, r11
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x320>
     fba:	98 2c       	mov	r9, r8
     fbc:	21 2c       	mov	r2, r1
     fbe:	a4 fe       	sbrs	r10, 4
     fc0:	0f c0       	rjmp	.+30     	; 0xfe0 <vfprintf+0x342>
     fc2:	b6 01       	movw	r22, r12
     fc4:	80 e3       	ldi	r24, 0x30	; 48
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	62 d0       	rcall	.+196    	; 0x108e <fputc>
     fca:	a2 fe       	sbrs	r10, 2
     fcc:	16 c0       	rjmp	.+44     	; 0xffa <vfprintf+0x35c>
     fce:	a1 fc       	sbrc	r10, 1
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <vfprintf+0x33a>
     fd2:	88 e7       	ldi	r24, 0x78	; 120
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x33e>
     fd8:	88 e5       	ldi	r24, 0x58	; 88
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	b6 01       	movw	r22, r12
     fde:	0c c0       	rjmp	.+24     	; 0xff8 <vfprintf+0x35a>
     fe0:	8a 2d       	mov	r24, r10
     fe2:	86 78       	andi	r24, 0x86	; 134
     fe4:	51 f0       	breq	.+20     	; 0xffa <vfprintf+0x35c>
     fe6:	a1 fe       	sbrs	r10, 1
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <vfprintf+0x350>
     fea:	8b e2       	ldi	r24, 0x2B	; 43
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <vfprintf+0x352>
     fee:	80 e2       	ldi	r24, 0x20	; 32
     ff0:	a7 fc       	sbrc	r10, 7
     ff2:	8d e2       	ldi	r24, 0x2D	; 45
     ff4:	b6 01       	movw	r22, r12
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	4a d0       	rcall	.+148    	; 0x108e <fputc>
     ffa:	89 14       	cp	r8, r9
     ffc:	30 f4       	brcc	.+12     	; 0x100a <vfprintf+0x36c>
     ffe:	b6 01       	movw	r22, r12
    1000:	80 e3       	ldi	r24, 0x30	; 48
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	44 d0       	rcall	.+136    	; 0x108e <fputc>
    1006:	9a 94       	dec	r9
    1008:	f8 cf       	rjmp	.-16     	; 0xffa <vfprintf+0x35c>
    100a:	8a 94       	dec	r8
    100c:	f3 01       	movw	r30, r6
    100e:	e8 0d       	add	r30, r8
    1010:	f1 1d       	adc	r31, r1
    1012:	80 81       	ld	r24, Z
    1014:	b6 01       	movw	r22, r12
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	3a d0       	rcall	.+116    	; 0x108e <fputc>
    101a:	81 10       	cpse	r8, r1
    101c:	f6 cf       	rjmp	.-20     	; 0x100a <vfprintf+0x36c>
    101e:	22 20       	and	r2, r2
    1020:	09 f4       	brne	.+2      	; 0x1024 <vfprintf+0x386>
    1022:	4e ce       	rjmp	.-868    	; 0xcc0 <vfprintf+0x22>
    1024:	b6 01       	movw	r22, r12
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	31 d0       	rcall	.+98     	; 0x108e <fputc>
    102c:	2a 94       	dec	r2
    102e:	f7 cf       	rjmp	.-18     	; 0x101e <vfprintf+0x380>
    1030:	f6 01       	movw	r30, r12
    1032:	86 81       	ldd	r24, Z+6	; 0x06
    1034:	97 81       	ldd	r25, Z+7	; 0x07
    1036:	02 c0       	rjmp	.+4      	; 0x103c <vfprintf+0x39e>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	9f ef       	ldi	r25, 0xFF	; 255
    103c:	2b 96       	adiw	r28, 0x0b	; 11
    103e:	e2 e1       	ldi	r30, 0x12	; 18
    1040:	dc c0       	rjmp	.+440    	; 0x11fa <__epilogue_restores__>

00001042 <strnlen_P>:
    1042:	fc 01       	movw	r30, r24
    1044:	05 90       	lpm	r0, Z+
    1046:	61 50       	subi	r22, 0x01	; 1
    1048:	70 40       	sbci	r23, 0x00	; 0
    104a:	01 10       	cpse	r0, r1
    104c:	d8 f7       	brcc	.-10     	; 0x1044 <strnlen_P+0x2>
    104e:	80 95       	com	r24
    1050:	90 95       	com	r25
    1052:	8e 0f       	add	r24, r30
    1054:	9f 1f       	adc	r25, r31
    1056:	08 95       	ret

00001058 <strnlen>:
    1058:	fc 01       	movw	r30, r24
    105a:	61 50       	subi	r22, 0x01	; 1
    105c:	70 40       	sbci	r23, 0x00	; 0
    105e:	01 90       	ld	r0, Z+
    1060:	01 10       	cpse	r0, r1
    1062:	d8 f7       	brcc	.-10     	; 0x105a <strnlen+0x2>
    1064:	80 95       	com	r24
    1066:	90 95       	com	r25
    1068:	8e 0f       	add	r24, r30
    106a:	9f 1f       	adc	r25, r31
    106c:	08 95       	ret

0000106e <strrev>:
    106e:	dc 01       	movw	r26, r24
    1070:	fc 01       	movw	r30, r24
    1072:	67 2f       	mov	r22, r23
    1074:	71 91       	ld	r23, Z+
    1076:	77 23       	and	r23, r23
    1078:	e1 f7       	brne	.-8      	; 0x1072 <strrev+0x4>
    107a:	32 97       	sbiw	r30, 0x02	; 2
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <strrev+0x18>
    107e:	7c 91       	ld	r23, X
    1080:	6d 93       	st	X+, r22
    1082:	70 83       	st	Z, r23
    1084:	62 91       	ld	r22, -Z
    1086:	ae 17       	cp	r26, r30
    1088:	bf 07       	cpc	r27, r31
    108a:	c8 f3       	brcs	.-14     	; 0x107e <strrev+0x10>
    108c:	08 95       	ret

0000108e <fputc>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	fb 01       	movw	r30, r22
    1098:	23 81       	ldd	r18, Z+3	; 0x03
    109a:	21 fd       	sbrc	r18, 1
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <fputc+0x16>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	2c c0       	rjmp	.+88     	; 0x10fc <fputc+0x6e>
    10a4:	22 ff       	sbrs	r18, 2
    10a6:	16 c0       	rjmp	.+44     	; 0x10d4 <fputc+0x46>
    10a8:	46 81       	ldd	r20, Z+6	; 0x06
    10aa:	57 81       	ldd	r21, Z+7	; 0x07
    10ac:	24 81       	ldd	r18, Z+4	; 0x04
    10ae:	35 81       	ldd	r19, Z+5	; 0x05
    10b0:	42 17       	cp	r20, r18
    10b2:	53 07       	cpc	r21, r19
    10b4:	44 f4       	brge	.+16     	; 0x10c6 <fputc+0x38>
    10b6:	a0 81       	ld	r26, Z
    10b8:	b1 81       	ldd	r27, Z+1	; 0x01
    10ba:	9d 01       	movw	r18, r26
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	31 83       	std	Z+1, r19	; 0x01
    10c2:	20 83       	st	Z, r18
    10c4:	8c 93       	st	X, r24
    10c6:	26 81       	ldd	r18, Z+6	; 0x06
    10c8:	37 81       	ldd	r19, Z+7	; 0x07
    10ca:	2f 5f       	subi	r18, 0xFF	; 255
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	37 83       	std	Z+7, r19	; 0x07
    10d0:	26 83       	std	Z+6, r18	; 0x06
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <fputc+0x6e>
    10d4:	8b 01       	movw	r16, r22
    10d6:	ec 01       	movw	r28, r24
    10d8:	fb 01       	movw	r30, r22
    10da:	00 84       	ldd	r0, Z+8	; 0x08
    10dc:	f1 85       	ldd	r31, Z+9	; 0x09
    10de:	e0 2d       	mov	r30, r0
    10e0:	09 95       	icall
    10e2:	89 2b       	or	r24, r25
    10e4:	e1 f6       	brne	.-72     	; 0x109e <fputc+0x10>
    10e6:	d8 01       	movw	r26, r16
    10e8:	16 96       	adiw	r26, 0x06	; 6
    10ea:	8d 91       	ld	r24, X+
    10ec:	9c 91       	ld	r25, X
    10ee:	17 97       	sbiw	r26, 0x07	; 7
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	17 96       	adiw	r26, 0x07	; 7
    10f4:	9c 93       	st	X, r25
    10f6:	8e 93       	st	-X, r24
    10f8:	16 97       	sbiw	r26, 0x06	; 6
    10fa:	ce 01       	movw	r24, r28
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	08 95       	ret

00001106 <__ultoa_invert>:
    1106:	fa 01       	movw	r30, r20
    1108:	aa 27       	eor	r26, r26
    110a:	28 30       	cpi	r18, 0x08	; 8
    110c:	51 f1       	breq	.+84     	; 0x1162 <__ultoa_invert+0x5c>
    110e:	20 31       	cpi	r18, 0x10	; 16
    1110:	81 f1       	breq	.+96     	; 0x1172 <__ultoa_invert+0x6c>
    1112:	e8 94       	clt
    1114:	6f 93       	push	r22
    1116:	6e 7f       	andi	r22, 0xFE	; 254
    1118:	6e 5f       	subi	r22, 0xFE	; 254
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	8f 4f       	sbci	r24, 0xFF	; 255
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	af 4f       	sbci	r26, 0xFF	; 255
    1122:	b1 e0       	ldi	r27, 0x01	; 1
    1124:	3e d0       	rcall	.+124    	; 0x11a2 <__ultoa_invert+0x9c>
    1126:	b4 e0       	ldi	r27, 0x04	; 4
    1128:	3c d0       	rcall	.+120    	; 0x11a2 <__ultoa_invert+0x9c>
    112a:	67 0f       	add	r22, r23
    112c:	78 1f       	adc	r23, r24
    112e:	89 1f       	adc	r24, r25
    1130:	9a 1f       	adc	r25, r26
    1132:	a1 1d       	adc	r26, r1
    1134:	68 0f       	add	r22, r24
    1136:	79 1f       	adc	r23, r25
    1138:	8a 1f       	adc	r24, r26
    113a:	91 1d       	adc	r25, r1
    113c:	a1 1d       	adc	r26, r1
    113e:	6a 0f       	add	r22, r26
    1140:	71 1d       	adc	r23, r1
    1142:	81 1d       	adc	r24, r1
    1144:	91 1d       	adc	r25, r1
    1146:	a1 1d       	adc	r26, r1
    1148:	20 d0       	rcall	.+64     	; 0x118a <__ultoa_invert+0x84>
    114a:	09 f4       	brne	.+2      	; 0x114e <__ultoa_invert+0x48>
    114c:	68 94       	set
    114e:	3f 91       	pop	r19
    1150:	2a e0       	ldi	r18, 0x0A	; 10
    1152:	26 9f       	mul	r18, r22
    1154:	11 24       	eor	r1, r1
    1156:	30 19       	sub	r19, r0
    1158:	30 5d       	subi	r19, 0xD0	; 208
    115a:	31 93       	st	Z+, r19
    115c:	de f6       	brtc	.-74     	; 0x1114 <__ultoa_invert+0xe>
    115e:	cf 01       	movw	r24, r30
    1160:	08 95       	ret
    1162:	46 2f       	mov	r20, r22
    1164:	47 70       	andi	r20, 0x07	; 7
    1166:	40 5d       	subi	r20, 0xD0	; 208
    1168:	41 93       	st	Z+, r20
    116a:	b3 e0       	ldi	r27, 0x03	; 3
    116c:	0f d0       	rcall	.+30     	; 0x118c <__ultoa_invert+0x86>
    116e:	c9 f7       	brne	.-14     	; 0x1162 <__ultoa_invert+0x5c>
    1170:	f6 cf       	rjmp	.-20     	; 0x115e <__ultoa_invert+0x58>
    1172:	46 2f       	mov	r20, r22
    1174:	4f 70       	andi	r20, 0x0F	; 15
    1176:	40 5d       	subi	r20, 0xD0	; 208
    1178:	4a 33       	cpi	r20, 0x3A	; 58
    117a:	18 f0       	brcs	.+6      	; 0x1182 <__ultoa_invert+0x7c>
    117c:	49 5d       	subi	r20, 0xD9	; 217
    117e:	31 fd       	sbrc	r19, 1
    1180:	40 52       	subi	r20, 0x20	; 32
    1182:	41 93       	st	Z+, r20
    1184:	02 d0       	rcall	.+4      	; 0x118a <__ultoa_invert+0x84>
    1186:	a9 f7       	brne	.-22     	; 0x1172 <__ultoa_invert+0x6c>
    1188:	ea cf       	rjmp	.-44     	; 0x115e <__ultoa_invert+0x58>
    118a:	b4 e0       	ldi	r27, 0x04	; 4
    118c:	a6 95       	lsr	r26
    118e:	97 95       	ror	r25
    1190:	87 95       	ror	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	ba 95       	dec	r27
    1198:	c9 f7       	brne	.-14     	; 0x118c <__ultoa_invert+0x86>
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	61 05       	cpc	r22, r1
    119e:	71 05       	cpc	r23, r1
    11a0:	08 95       	ret
    11a2:	9b 01       	movw	r18, r22
    11a4:	ac 01       	movw	r20, r24
    11a6:	0a 2e       	mov	r0, r26
    11a8:	06 94       	lsr	r0
    11aa:	57 95       	ror	r21
    11ac:	47 95       	ror	r20
    11ae:	37 95       	ror	r19
    11b0:	27 95       	ror	r18
    11b2:	ba 95       	dec	r27
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <__ultoa_invert+0xa2>
    11b6:	62 0f       	add	r22, r18
    11b8:	73 1f       	adc	r23, r19
    11ba:	84 1f       	adc	r24, r20
    11bc:	95 1f       	adc	r25, r21
    11be:	a0 1d       	adc	r26, r0
    11c0:	08 95       	ret

000011c2 <__prologue_saves__>:
    11c2:	2f 92       	push	r2
    11c4:	3f 92       	push	r3
    11c6:	4f 92       	push	r4
    11c8:	5f 92       	push	r5
    11ca:	6f 92       	push	r6
    11cc:	7f 92       	push	r7
    11ce:	8f 92       	push	r8
    11d0:	9f 92       	push	r9
    11d2:	af 92       	push	r10
    11d4:	bf 92       	push	r11
    11d6:	cf 92       	push	r12
    11d8:	df 92       	push	r13
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	ca 1b       	sub	r28, r26
    11ec:	db 0b       	sbc	r29, r27
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	09 94       	ijmp

000011fa <__epilogue_restores__>:
    11fa:	2a 88       	ldd	r2, Y+18	; 0x12
    11fc:	39 88       	ldd	r3, Y+17	; 0x11
    11fe:	48 88       	ldd	r4, Y+16	; 0x10
    1200:	5f 84       	ldd	r5, Y+15	; 0x0f
    1202:	6e 84       	ldd	r6, Y+14	; 0x0e
    1204:	7d 84       	ldd	r7, Y+13	; 0x0d
    1206:	8c 84       	ldd	r8, Y+12	; 0x0c
    1208:	9b 84       	ldd	r9, Y+11	; 0x0b
    120a:	aa 84       	ldd	r10, Y+10	; 0x0a
    120c:	b9 84       	ldd	r11, Y+9	; 0x09
    120e:	c8 84       	ldd	r12, Y+8	; 0x08
    1210:	df 80       	ldd	r13, Y+7	; 0x07
    1212:	ee 80       	ldd	r14, Y+6	; 0x06
    1214:	fd 80       	ldd	r15, Y+5	; 0x05
    1216:	0c 81       	ldd	r16, Y+4	; 0x04
    1218:	1b 81       	ldd	r17, Y+3	; 0x03
    121a:	aa 81       	ldd	r26, Y+2	; 0x02
    121c:	b9 81       	ldd	r27, Y+1	; 0x01
    121e:	ce 0f       	add	r28, r30
    1220:	d1 1d       	adc	r29, r1
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	ed 01       	movw	r28, r26
    122e:	08 95       	ret

00001230 <_exit>:
    1230:	f8 94       	cli

00001232 <__stop_program>:
    1232:	ff cf       	rjmp	.-2      	; 0x1232 <__stop_program>
