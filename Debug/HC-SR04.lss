
HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000112c  000011c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000112c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080014e  0080014e  0000120e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000164e  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b27  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011be  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  000046c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000115e9  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d8b  00000000  00000000  00015f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00016ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000040f3  00000000  00000000  00016db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__vector_1>
       6:	00 00       	nop
       8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	b9 c0       	rjmp	.+370    	; 0x18c <__vector_6>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c0       	rjmp	.+102    	; 0xa0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e2       	ldi	r30, 0x2C	; 44
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 34       	cpi	r26, 0x4E	; 78
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e4       	ldi	r26, 0x4E	; 78
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 35       	cpi	r26, 0x51	; 81
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	03 d0       	rcall	.+6      	; 0xa2 <main>
      9c:	0c 94 94 08 	jmp	0x1128	; 0x1128 <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <main>:
volatile uint16_t pulse;
volatile uint8_t iIRC = 0;
volatile int f_wdt = 1;

int main(void)
{
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	/* Initialization */
	init_ultrasonic();
      b0:	93 d0       	rcall	.+294    	; 0x1d8 <init_ultrasonic>
	initLCD();
      b2:	18 d2       	rcall	.+1072   	; 0x4e4 <initLCD>
      b4:	19 82       	std	Y+1, r1	; 0x01
	uint8_t distance = 0;
	uint8_t diagnostics = 0;
      b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	uint8_t iteration = 0;
	
	while( f_wdt == 1 )
      ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
      be:	01 97       	sbiw	r24, 0x01	; 1
      c0:	51 f5       	brne	.+84     	; 0x116 <main+0x74>
      c2:	10 e0       	ldi	r17, 0x00	; 0
      c4:	1f 5f       	subi	r17, 0xFF	; 255
	{
		iteration += 1;
      c6:	ce 01       	movw	r24, r28
		/* Ultrasonic sensor */
		distance = getDistance_main(&diagnostics);
      c8:	01 96       	adiw	r24, 0x01	; 1
      ca:	9f d0       	rcall	.+318    	; 0x20a <getDistance_main>
      cc:	08 2f       	mov	r16, r24
      ce:	22 e0       	ldi	r18, 0x02	; 2
		
		/* Display measurements */
		displayLCD_main(1, "Iteration ", iteration, "NONE");
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	41 2f       	mov	r20, r17
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	71 e0       	ldi	r23, 0x01	; 1
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	4f d3       	rcall	.+1694   	; 0x77a <displayLCD_main>
      dc:	22 e1       	ldi	r18, 0x12	; 18
		displayLCD_main(2, "Distance = ", distance, " cm");
      de:	31 e0       	ldi	r19, 0x01	; 1
      e0:	40 2f       	mov	r20, r16
      e2:	66 e1       	ldi	r22, 0x16	; 22
      e4:	71 e0       	ldi	r23, 0x01	; 1
      e6:	82 e0       	ldi	r24, 0x02	; 2
      e8:	48 d3       	rcall	.+1680   	; 0x77a <displayLCD_main>
      ea:	22 e0       	ldi	r18, 0x02	; 2
		displayLCD_main(3, "DTC = ", diagnostics, "NONE");
      ec:	31 e0       	ldi	r19, 0x01	; 1
      ee:	49 81       	ldd	r20, Y+1	; 0x01
      f0:	62 e2       	ldi	r22, 0x22	; 34
      f2:	71 e0       	ldi	r23, 0x01	; 1
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	41 d3       	rcall	.+1666   	; 0x77a <displayLCD_main>
      f8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fa:	89 e6       	ldi	r24, 0x69	; 105
      fc:	98 e1       	ldi	r25, 0x18	; 24
      fe:	21 50       	subi	r18, 0x01	; 1
     100:	80 40       	sbci	r24, 0x00	; 0
     102:	90 40       	sbci	r25, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <main+0x5c>
     106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x66>
     108:	00 00       	nop
     10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	initLCD();
	uint8_t distance = 0;
	uint8_t diagnostics = 0;
	uint8_t iteration = 0;
	
	while( f_wdt == 1 )
     10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     112:	01 97       	sbiw	r24, 0x01	; 1
     114:	b9 f2       	breq	.-82     	; 0xc4 <main+0x22>
     116:	80 e0       	ldi	r24, 0x00	; 0
		
		/* Power management - processor sleep for energy reduction */
		//PwrMngmnt_main();
		_delay_ms(500);
	}
}
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0f 90       	pop	r0
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	1f 91       	pop	r17
     122:	0f 91       	pop	r16
     124:	08 95       	ret

00000126 <__vector_1>:
     126:	1f 92       	push	r1
Inputs:		none
Outputs:	internal timer
Description:calculates elapsed time of a measurement
******************************************************************** */
ISR(INT0_vect)
{
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	8f 93       	push	r24
     132:	9f 93       	push	r25
     134:	ef 93       	push	r30
     136:	ff 93       	push	r31
	switch (iIRC)
     138:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     13c:	88 23       	and	r24, r24
     13e:	19 f0       	breq	.+6      	; 0x146 <__vector_1+0x20>
     140:	81 30       	cpi	r24, 0x01	; 1
     142:	51 f0       	breq	.+20     	; 0x158 <__vector_1+0x32>
     144:	1a c0       	rjmp	.+52     	; 0x17a <__vector_1+0x54>
	{
		case 0: //when logic changes from LOW to HIGH
		{
			iIRC = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
			TCCR1B |= (1<<CS11);
     14c:	e1 e8       	ldi	r30, 0x81	; 129
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	82 60       	ori	r24, 0x02	; 2
     154:	80 83       	st	Z, r24
			break;
     156:	11 c0       	rjmp	.+34     	; 0x17a <__vector_1+0x54>
		}
		case 1:
		{
			/* reset iIRC */
			iIRC = 0;
     158:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
			/* stop counter */
			TCCR1B &= ~(1<<CS11);
     15c:	e1 e8       	ldi	r30, 0x81	; 129
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	8d 7f       	andi	r24, 0xFD	; 253
     164:	80 83       	st	Z, r24
			/* assign counter value to pulse */
			pulse = TCNT1;
     166:	e4 e8       	ldi	r30, 0x84	; 132
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	91 81       	ldd	r25, Z+1	; 0x01
     16e:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pulse+0x1>
     172:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pulse>
			/* reset counter */
			TCNT1=0;
     176:	11 82       	std	Z+1, r1	; 0x01
     178:	10 82       	st	Z, r1
			break;
		}
	}
}
     17a:	ff 91       	pop	r31
     17c:	ef 91       	pop	r30
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	0f 90       	pop	r0
     184:	0f be       	out	0x3f, r0	; 63
     186:	0f 90       	pop	r0
     188:	1f 90       	pop	r1
     18a:	18 95       	reti

0000018c <__vector_6>:
Inputs:		none
Outputs:	f_wdt
Description:wakes up processor after internal timer limit reached (8 sec)
******************************************************************** */
ISR(WDT_vect)
{
     18c:	1f 92       	push	r1
     18e:	0f 92       	push	r0
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	0f 92       	push	r0
     194:	11 24       	eor	r1, r1
     196:	8f 93       	push	r24
     198:	9f 93       	push	r25
	/* set the flag. */
	if(f_wdt == 0)
     19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	31 f4       	brne	.+12     	; 0x1b2 <__vector_6+0x26>
	{
		f_wdt = 1;
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	//else there is an error -> flag was not cleared
}
     1b2:	9f 91       	pop	r25
     1b4:	8f 91       	pop	r24
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <configUltrasonicPorts>:

void disableInterrupts(void)
{
	EIMSK &= ~(1<<INT0);
	EICRA &= ~(1<<ISC00);
	cli();
     1c0:	52 98       	cbi	0x0a, 2	; 10
     1c2:	5a 98       	cbi	0x0b, 2	; 11
     1c4:	20 9a       	sbi	0x04, 0	; 4
     1c6:	28 98       	cbi	0x05, 0	; 5
     1c8:	08 95       	ret

000001ca <enable_interrupts>:
     1ca:	e8 9a       	sbi	0x1d, 0	; 29
     1cc:	e9 e6       	ldi	r30, 0x69	; 105
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	81 60       	ori	r24, 0x01	; 1
     1d4:	80 83       	st	Z, r24
     1d6:	08 95       	ret

000001d8 <init_ultrasonic>:
Outputs:	none
Description:main function for the ultrasonic initialization
******************************************************************** */
void init_ultrasonic(void)
{
	configUltrasonicPorts();
     1d8:	f3 df       	rcall	.-26     	; 0x1c0 <configUltrasonicPorts>
	enable_interrupts();
     1da:	f7 df       	rcall	.-18     	; 0x1ca <enable_interrupts>
     1dc:	78 94       	sei
	sei();
     1de:	08 95       	ret

000001e0 <triggerUltrasonic>:
     1e0:	28 9a       	sbi	0x05, 0	; 5
     1e2:	2f ef       	ldi	r18, 0xFF	; 255
     1e4:	89 ef       	ldi	r24, 0xF9	; 249
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	80 40       	sbci	r24, 0x00	; 0
     1ec:	90 40       	sbci	r25, 0x00	; 0
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <triggerUltrasonic+0x8>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <triggerUltrasonic+0x12>
     1f2:	00 00       	nop
		/* trigger ultrasonic */
		U_Port_trig |= (1<<U_TRIG_pin);
		_delay_ms(20);

		/* stop trigger ultrasonic */
		U_Port_trig &= ~(1<<U_TRIG_pin);
     1f4:	28 98       	cbi	0x05, 0	; 5
     1f6:	2f ef       	ldi	r18, 0xFF	; 255
     1f8:	89 ef       	ldi	r24, 0xF9	; 249
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	21 50       	subi	r18, 0x01	; 1
     1fe:	80 40       	sbci	r24, 0x00	; 0
     200:	90 40       	sbci	r25, 0x00	; 0
     202:	e1 f7       	brne	.-8      	; 0x1fc <triggerUltrasonic+0x1c>
     204:	00 c0       	rjmp	.+0      	; 0x206 <triggerUltrasonic+0x26>
     206:	00 00       	nop
     208:	08 95       	ret

0000020a <getDistance_main>:
Inputs:		pointer to diagnosis
Outputs:	distance measurements
Description:triggers measurements and plausibility checks
******************************************************************** */
 uint8_t getDistance_main(uint8_t * diag)
 {
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	8c 01       	movw	r16, r24
     230:	c4 e0       	ldi	r28, 0x04	; 4
		{
			* diag = 15; // DTC: Low sensor range
		}		
		else if ( abs(distance_array[0] - distance_array[1]) > SNSR_TOLERANCE ) /* Check measurements tolerance */
		{	
			* diag = 12;		// DTC: Imprecise meas.
     232:	0f 2e       	mov	r0, r31
     234:	fc e0       	ldi	r31, 0x0C	; 12
     236:	2f 2e       	mov	r2, r31
     238:	f0 2d       	mov	r31, r0
		{
			* diag = 13; // DTC: Defect sensor 
		}
		else if ( dist <= 20 ) // Too low range for the sensor (in case of sensor AJ-SR04M)
		{
			* diag = 15; // DTC: Low sensor range
     23a:	df e0       	ldi	r29, 0x0F	; 15
		dist = sum/2;
		distance = dist;
		
		if ( dist <= 0 ) // Check if sensor defect or not connected (in which case it shows 0)
		{
			* diag = 13; // DTC: Defect sensor 
     23c:	0f 2e       	mov	r0, r31
     23e:	fd e0       	ldi	r31, 0x0D	; 13
     240:	3f 2e       	mov	r3, r31
     242:	f0 2d       	mov	r31, r0
	/* re-measurements for confirmation of unexpected results */
	for (uint8_t i = 0; i <= ULTRAS_ITER_MAX; i++)
	{
		/* Reset before measurement */
		sum = 0;
		* diag = 0;
     244:	f8 01       	movw	r30, r16
     246:	10 82       	st	Z, r1
		
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
     248:	cb df       	rcall	.-106    	; 0x1e0 <triggerUltrasonic>
float getDistance()
{
	/* factor to be multiplied by pulse
	f = speedOfSound (343 m/s) * 100 * 8 (prescale factor) / 2 (way-back) / F_CPU;  ( ~0.008575 ); */

	return pulse * 0.008575;
     24a:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <pulse>
     24e:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <pulse+0x1>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	2d d3       	rcall	.+1626   	; 0x8b2 <__floatunsisf>
     258:	28 e2       	ldi	r18, 0x28	; 40
     25a:	3e e7       	ldi	r19, 0x7E	; 126
     25c:	4c e0       	ldi	r20, 0x0C	; 12
     25e:	5c e3       	ldi	r21, 0x3C	; 60
     260:	de d3       	rcall	.+1980   	; 0xa1e <__mulsf3>
     262:	4b 01       	movw	r8, r22
     264:	5c 01       	movw	r10, r24
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
			distance_array[j] = getDistance();
			sum +=distance_array[j];
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	a9 01       	movw	r20, r18
     26c:	89 d2       	rcall	.+1298   	; 0x780 <__addsf3>
     26e:	6b 01       	movw	r12, r22
     270:	7c 01       	movw	r14, r24
     272:	ff ef       	ldi	r31, 0xFF	; 255
     274:	23 ec       	ldi	r18, 0xC3	; 195
     276:	89 e0       	ldi	r24, 0x09	; 9
     278:	f1 50       	subi	r31, 0x01	; 1
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	80 40       	sbci	r24, 0x00	; 0
     27e:	e1 f7       	brne	.-8      	; 0x278 <getDistance_main+0x6e>
     280:	00 c0       	rjmp	.+0      	; 0x282 <getDistance_main+0x78>
		* diag = 0;
		
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
     282:	00 00       	nop
     284:	ad df       	rcall	.-166    	; 0x1e0 <triggerUltrasonic>
float getDistance()
{
	/* factor to be multiplied by pulse
	f = speedOfSound (343 m/s) * 100 * 8 (prescale factor) / 2 (way-back) / F_CPU;  ( ~0.008575 ); */

	return pulse * 0.008575;
     286:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <pulse>
     28a:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <pulse+0x1>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0f d3       	rcall	.+1566   	; 0x8b2 <__floatunsisf>
     294:	28 e2       	ldi	r18, 0x28	; 40
     296:	3e e7       	ldi	r19, 0x7E	; 126
     298:	4c e0       	ldi	r20, 0x0C	; 12
     29a:	5c e3       	ldi	r21, 0x3C	; 60
     29c:	c0 d3       	rcall	.+1920   	; 0xa1e <__mulsf3>
     29e:	2b 01       	movw	r4, r22
     2a0:	3c 01       	movw	r6, r24
     2a2:	9f ef       	ldi	r25, 0xFF	; 255
     2a4:	e3 ec       	ldi	r30, 0xC3	; 195
     2a6:	f9 e0       	ldi	r31, 0x09	; 9
     2a8:	91 50       	subi	r25, 0x01	; 1
     2aa:	e0 40       	sbci	r30, 0x00	; 0
     2ac:	f0 40       	sbci	r31, 0x00	; 0
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <getDistance_main+0x9e>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <getDistance_main+0xa8>
			triggerUltrasonic();
			distance_array[j] = getDistance();
			sum +=distance_array[j];
			_delay_ms(200);
		}
		dist = sum/2;
     2b2:	00 00       	nop
     2b4:	a7 01       	movw	r20, r14
     2b6:	96 01       	movw	r18, r12
     2b8:	c3 01       	movw	r24, r6
     2ba:	b2 01       	movw	r22, r4
     2bc:	61 d2       	rcall	.+1218   	; 0x780 <__addsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	ab d3       	rcall	.+1878   	; 0xa1e <__mulsf3>
     2c8:	6b 01       	movw	r12, r22
		distance = dist;
		
		if ( dist <= 0 ) // Check if sensor defect or not connected (in which case it shows 0)
     2ca:	7c 01       	movw	r14, r24
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	a9 01       	movw	r20, r18
     2d2:	ba d2       	rcall	.+1396   	; 0x848 <__cmpsf2>
     2d4:	18 16       	cp	r1, r24
		{
			* diag = 13; // DTC: Defect sensor 
     2d6:	1c f0       	brlt	.+6      	; 0x2de <getDistance_main+0xd4>
     2d8:	f8 01       	movw	r30, r16
     2da:	30 82       	st	Z, r3
		}
		else if ( dist <= 20 ) // Too low range for the sensor (in case of sensor AJ-SR04M)
     2dc:	2b c0       	rjmp	.+86     	; 0x334 <getDistance_main+0x12a>
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 ea       	ldi	r20, 0xA0	; 160
     2e4:	51 e4       	ldi	r21, 0x41	; 65
     2e6:	c7 01       	movw	r24, r14
     2e8:	b6 01       	movw	r22, r12
     2ea:	ae d2       	rcall	.+1372   	; 0x848 <__cmpsf2>
		{
			* diag = 15; // DTC: Low sensor range
     2ec:	18 16       	cp	r1, r24
     2ee:	1c f0       	brlt	.+6      	; 0x2f6 <getDistance_main+0xec>
     2f0:	f8 01       	movw	r30, r16
		}		
		else if ( abs(distance_array[0] - distance_array[1]) > SNSR_TOLERANCE ) /* Check measurements tolerance */
     2f2:	d0 83       	st	Z, r29
     2f4:	1f c0       	rjmp	.+62     	; 0x334 <getDistance_main+0x12a>
     2f6:	a3 01       	movw	r20, r6
     2f8:	92 01       	movw	r18, r4
     2fa:	c5 01       	movw	r24, r10
     2fc:	b4 01       	movw	r22, r8
     2fe:	3f d2       	rcall	.+1150   	; 0x77e <__subsf3>
     300:	a7 d2       	rcall	.+1358   	; 0x850 <__fixsfsi>
     302:	9b 01       	movw	r18, r22
     304:	77 23       	and	r23, r23
     306:	24 f4       	brge	.+8      	; 0x310 <getDistance_main+0x106>
     308:	22 27       	eor	r18, r18
     30a:	33 27       	eor	r19, r19
     30c:	26 1b       	sub	r18, r22
     30e:	37 0b       	sbc	r19, r23
     310:	26 30       	cpi	r18, 0x06	; 6
     312:	31 05       	cpc	r19, r1
		{	
			* diag = 12;		// DTC: Imprecise meas.
     314:	1c f0       	brlt	.+6      	; 0x31c <getDistance_main+0x112>
     316:	f8 01       	movw	r30, r16
     318:	20 82       	st	Z, r2
		}
		else if ( dist >= 250 ) // distance too high
     31a:	0c c0       	rjmp	.+24     	; 0x334 <getDistance_main+0x12a>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	4a e7       	ldi	r20, 0x7A	; 122
     322:	53 e4       	ldi	r21, 0x43	; 67
     324:	c7 01       	movw	r24, r14
     326:	b6 01       	movw	r22, r12
     328:	76 d3       	rcall	.+1772   	; 0xa16 <__gesf2>
     32a:	88 23       	and	r24, r24
		{
			* diag = 14; // DTC: Sensor out of range
     32c:	34 f0       	brlt	.+12     	; 0x33a <getDistance_main+0x130>
     32e:	2e e0       	ldi	r18, 0x0E	; 14
     330:	f8 01       	movw	r30, r16
     332:	20 83       	st	Z, r18
	float dist = 0;
	float distance_array[2];
	float sum = 0;
		
	/* re-measurements for confirmation of unexpected results */
	for (uint8_t i = 0; i <= ULTRAS_ITER_MAX; i++)
     334:	c1 50       	subi	r28, 0x01	; 1
     336:	09 f0       	breq	.+2      	; 0x33a <getDistance_main+0x130>
		{ 
			break;
		}
	}

	return distance;
     338:	85 cf       	rjmp	.-246    	; 0x244 <getDistance_main+0x3a>
     33a:	c7 01       	movw	r24, r14
     33c:	b6 01       	movw	r22, r12
     33e:	8d d2       	rcall	.+1306   	; 0x85a <__fixunssfsi>
     340:	86 2f       	mov	r24, r22
 }
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	df 90       	pop	r13
     350:	cf 90       	pop	r12
     352:	bf 90       	pop	r11
     354:	af 90       	pop	r10
     356:	9f 90       	pop	r9
     358:	8f 90       	pop	r8
     35a:	7f 90       	pop	r7
     35c:	6f 90       	pop	r6
     35e:	5f 90       	pop	r5
     360:	4f 90       	pop	r4
     362:	3f 90       	pop	r3
     364:	2f 90       	pop	r2
     366:	08 95       	ret

00000368 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
     368:	8a b1       	in	r24, 0x0a	; 10
     36a:	80 6f       	ori	r24, 0xF0	; 240
     36c:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
     36e:	8a b1       	in	r24, 0x0a	; 10
     370:	8b 60       	ori	r24, 0x0B	; 11
     372:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
     374:	20 9a       	sbi	0x04, 0	; 4
     376:	08 95       	ret

00000378 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	00 d0       	rcall	.+0      	; 0x37e <lcd_write_4+0x6>
     37e:	00 d0       	rcall	.+0      	; 0x380 <lcd_write_4+0x8>
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
     384:	19 82       	std	Y+1, r1	; 0x01
     386:	1a 82       	std	Y+2, r1	; 0x02
     388:	1b 82       	std	Y+3, r1	; 0x03
     38a:	1c 82       	std	Y+4, r1	; 0x04
     38c:	fe 01       	movw	r30, r28
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	27 e0       	ldi	r18, 0x07	; 7
     392:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     394:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
     396:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     398:	ac 01       	movw	r20, r24
     39a:	02 2e       	mov	r0, r18
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <lcd_write_4+0x2a>
     39e:	55 95       	asr	r21
     3a0:	47 95       	ror	r20
     3a2:	0a 94       	dec	r0
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <lcd_write_4+0x26>
     3a6:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
     3a8:	60 83       	st	Z, r22
     3aa:	21 50       	subi	r18, 0x01	; 1
     3ac:	31 09       	sbc	r19, r1
     3ae:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
     3b0:	23 30       	cpi	r18, 0x03	; 3
     3b2:	31 05       	cpc	r19, r1
     3b4:	89 f7       	brne	.-30     	; 0x398 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
     3b6:	8b b1       	in	r24, 0x0b	; 11
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
     3bc:	2b b1       	in	r18, 0x0b	; 11
     3be:	49 81       	ldd	r20, Y+1	; 0x01
     3c0:	30 e8       	ldi	r19, 0x80	; 128
     3c2:	43 9f       	mul	r20, r19
     3c4:	c0 01       	movw	r24, r0
     3c6:	11 24       	eor	r1, r1
     3c8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ca:	30 e4       	ldi	r19, 0x40	; 64
     3cc:	93 9f       	mul	r25, r19
     3ce:	a0 01       	movw	r20, r0
     3d0:	11 24       	eor	r1, r1
     3d2:	48 2b       	or	r20, r24
     3d4:	42 2b       	or	r20, r18
     3d6:	9b 81       	ldd	r25, Y+3	; 0x03
     3d8:	80 e2       	ldi	r24, 0x20	; 32
     3da:	98 9f       	mul	r25, r24
     3dc:	90 01       	movw	r18, r0
     3de:	11 24       	eor	r1, r1
     3e0:	24 2b       	or	r18, r20
     3e2:	9c 81       	ldd	r25, Y+4	; 0x04
     3e4:	30 e1       	ldi	r19, 0x10	; 16
     3e6:	93 9f       	mul	r25, r19
     3e8:	c0 01       	movw	r24, r0
     3ea:	11 24       	eor	r1, r1
     3ec:	82 2b       	or	r24, r18
     3ee:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
     3f0:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	8a 95       	dec	r24
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_write_4+0x7c>
     3f8:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
     3fa:	5b 98       	cbi	0x0b, 3	; 11
     3fc:	35 e0       	ldi	r19, 0x05	; 5
     3fe:	3a 95       	dec	r19
     400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_write_4+0x86>
     402:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     416:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
     418:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     41a:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
     41c:	ad df       	rcall	.-166    	; 0x378 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
     41e:	8c 2f       	mov	r24, r28
     420:	82 95       	swap	r24
     422:	80 7f       	andi	r24, 0xF0	; 240
     424:	a9 df       	rcall	.-174    	; 0x378 <lcd_write_4>
}
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
     42a:	cf 93       	push	r28
     42c:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     42e:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
     430:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     432:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
     434:	a1 df       	rcall	.-190    	; 0x378 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
     436:	8c 2f       	mov	r24, r28
     438:	82 95       	swap	r24
     43a:	80 7f       	andi	r24, 0xF0	; 240
     43c:	9d df       	rcall	.-198    	; 0x378 <lcd_write_4>
}
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
     442:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
     444:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
     446:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     448:	5b 9a       	sbi	0x0b, 3	; 11
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	8a 95       	dec	r24
     44e:	f1 f7       	brne	.-4      	; 0x44c <lcd_check_BF_4+0xa>
     450:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
     452:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     454:	5b 98       	cbi	0x0b, 3	; 11
     456:	95 e0       	ldi	r25, 0x05	; 5
     458:	9a 95       	dec	r25
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_check_BF_4+0x16>
     45c:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     45e:	5b 9a       	sbi	0x0b, 3	; 11
     460:	95 e0       	ldi	r25, 0x05	; 5
     462:	9a 95       	dec	r25
     464:	f1 f7       	brne	.-4      	; 0x462 <lcd_check_BF_4+0x20>
     466:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     468:	5b 98       	cbi	0x0b, 3	; 11
     46a:	95 e0       	ldi	r25, 0x05	; 5
     46c:	9a 95       	dec	r25
     46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_check_BF_4+0x2a>
     470:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
     472:	88 23       	and	r24, r24
     474:	4c f3       	brlt	.-46     	; 0x448 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
     476:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
     478:	57 9a       	sbi	0x0a, 7	; 10
     47a:	08 95       	ret

0000047c <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	81 ee       	ldi	r24, 0xE1	; 225
     480:	94 e0       	ldi	r25, 0x04	; 4
     482:	21 50       	subi	r18, 0x01	; 1
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <lcd_init_4f+0x6>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <lcd_init_4f+0x10>
     48c:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
     48e:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
     490:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
     492:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	70 df       	rcall	.-288    	; 0x378 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     498:	25 e3       	ldi	r18, 0x35	; 53
     49a:	2a 95       	dec	r18
     49c:	f1 f7       	brne	.-4      	; 0x49a <lcd_init_4f+0x1e>
     49e:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
     4a0:	80 e3       	ldi	r24, 0x30	; 48
     4a2:	6a df       	rcall	.-300    	; 0x378 <lcd_write_4>
     4a4:	8f e1       	ldi	r24, 0x1F	; 31
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <lcd_init_4f+0x2c>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
     4ae:	00 00       	nop
     4b0:	80 e3       	ldi	r24, 0x30	; 48
     4b2:	62 df       	rcall	.-316    	; 0x378 <lcd_write_4>
     4b4:	8f e3       	ldi	r24, 0x3F	; 63
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <lcd_init_4f+0x3c>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
     4be:	00 00       	nop
     4c0:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
     4c2:	5a df       	rcall	.-332    	; 0x378 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
     4c4:	be df       	rcall	.-132    	; 0x442 <lcd_check_BF_4>
     4c6:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     4c8:	b0 df       	rcall	.-160    	; 0x42a <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
     4ca:	bb df       	rcall	.-138    	; 0x442 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
     4cc:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
     4ce:	ad df       	rcall	.-166    	; 0x42a <lcd_write_instruction_4f>
     4d0:	b8 df       	rcall	.-144    	; 0x442 <lcd_check_BF_4>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
     4d4:	aa df       	rcall	.-172    	; 0x42a <lcd_write_instruction_4f>
     4d6:	b5 df       	rcall	.-150    	; 0x442 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	a7 df       	rcall	.-178    	; 0x42a <lcd_write_instruction_4f>
     4dc:	b2 df       	rcall	.-156    	; 0x442 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     4de:	8c e0       	ldi	r24, 0x0C	; 12
     4e0:	a4 cf       	rjmp	.-184    	; 0x42a <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
     4e2:	08 95       	ret

000004e4 <initLCD>:
     4e4:	41 df       	rcall	.-382    	; 0x368 <configLCDPorts>
     4e6:	ca df       	rcall	.-108    	; 0x47c <lcd_init_4f>
     4e8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ea:	81 ee       	ldi	r24, 0xE1	; 225
     4ec:	94 e0       	ldi	r25, 0x04	; 4
     4ee:	21 50       	subi	r18, 0x01	; 1
     4f0:	80 40       	sbci	r24, 0x00	; 0
     4f2:	90 40       	sbci	r25, 0x00	; 0
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <initLCD+0xa>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <initLCD+0x14>
     4f8:	00 00       	nop
     4fa:	08 95       	ret

000004fc <lcd_write_string_4f>:
     4fc:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	00 d0       	rcall	.+0      	; 0x506 <lcd_write_string_4f+0xa>
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
     50c:	1a 82       	std	Y+2, r1	; 0x02
     50e:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
     510:	e9 81       	ldd	r30, Y+1	; 0x01
     512:	fa 81       	ldd	r31, Y+2	; 0x02
     514:	e8 0f       	add	r30, r24
     516:	f9 1f       	adc	r31, r25
     518:	80 81       	ld	r24, Z
     51a:	88 23       	and	r24, r24
     51c:	99 f0       	breq	.+38     	; 0x544 <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
     51e:	91 df       	rcall	.-222    	; 0x442 <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
     520:	e9 81       	ldd	r30, Y+1	; 0x01
     522:	fa 81       	ldd	r31, Y+2	; 0x02
     524:	e0 0f       	add	r30, r16
     526:	f1 1f       	adc	r31, r17
     528:	80 81       	ld	r24, Z
     52a:	73 df       	rcall	.-282    	; 0x412 <lcd_write_character_4f>
        i++;
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	9a 83       	std	Y+2, r25	; 0x02
     534:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
     536:	e9 81       	ldd	r30, Y+1	; 0x01
     538:	fa 81       	ldd	r31, Y+2	; 0x02
     53a:	e0 0f       	add	r30, r16
     53c:	f1 1f       	adc	r31, r17
     53e:	80 81       	ld	r24, Z
     540:	81 11       	cpse	r24, r1
     542:	ed cf       	rjmp	.-38     	; 0x51e <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	08 95       	ret

00000552 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	af 97       	sbiw	r28, 0x2f	; 47
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	18 2f       	mov	r17, r24
     572:	d6 2e       	mov	r13, r22
     574:	07 2f       	mov	r16, r23
     576:	84 2f       	mov	r24, r20
     578:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
     57a:	20 e2       	ldi	r18, 0x20	; 32
     57c:	30 e2       	ldi	r19, 0x20	; 32
     57e:	3a 83       	std	Y+2, r19	; 0x02
     580:	29 83       	std	Y+1, r18	; 0x01
     582:	20 e2       	ldi	r18, 0x20	; 32
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	3c 83       	std	Y+4, r19	; 0x04
     588:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
     58a:	96 e1       	ldi	r25, 0x16	; 22
     58c:	e8 e3       	ldi	r30, 0x38	; 56
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	de 01       	movw	r26, r28
     592:	5a 96       	adiw	r26, 0x1a	; 26
     594:	01 90       	ld	r0, Z+
     596:	0d 92       	st	X+, r0
     598:	9a 95       	dec	r25
     59a:	e1 f7       	brne	.-8      	; 0x594 <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
     59c:	4f 3f       	cpi	r20, 0xFF	; 255
     59e:	31 f0       	breq	.+12     	; 0x5ac <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5a0:	4a e0       	ldi	r20, 0x0A	; 10
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	a5 d2       	rcall	.+1354   	; 0xaf6 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	71 e0       	ldi	r23, 0x01	; 1
     5b0:	8d 2d       	mov	r24, r13
     5b2:	90 2f       	mov	r25, r16
     5b4:	97 d2       	rcall	.+1326   	; 0xae4 <strcmp>
     5b6:	89 2b       	or	r24, r25
     5b8:	09 f4       	brne	.+2      	; 0x5bc <updateLCDScreen+0x6a>
     5ba:	ac c0       	rjmp	.+344    	; 0x714 <updateLCDScreen+0x1c2>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	71 e0       	ldi	r23, 0x01	; 1
     5c0:	c7 01       	movw	r24, r14
     5c2:	90 d2       	rcall	.+1312   	; 0xae4 <strcmp>
     5c4:	89 2b       	or	r24, r25
     5c6:	31 f4       	brne	.+12     	; 0x5d4 <updateLCDScreen+0x82>
     5c8:	0f 2e       	mov	r0, r31
     5ca:	fd e4       	ldi	r31, 0x4D	; 77
     5cc:	ef 2e       	mov	r14, r31
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	ff 2e       	mov	r15, r31
     5d2:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     5d4:	ce 01       	movw	r24, r28
     5d6:	4a 96       	adiw	r24, 0x1a	; 26
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	ff 92       	push	r15
     5de:	ef 92       	push	r14
     5e0:	49 97       	sbiw	r24, 0x19	; 25
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0f 93       	push	r16
     5e8:	df 92       	push	r13
     5ea:	89 e2       	ldi	r24, 0x29	; 41
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	1f 92       	push	r1
     5f4:	85 e1       	ldi	r24, 0x15	; 21
     5f6:	8f 93       	push	r24
     5f8:	ce 01       	movw	r24, r28
     5fa:	05 96       	adiw	r24, 0x05	; 5
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	9d d2       	rcall	.+1338   	; 0xb3c <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
     602:	62 e3       	ldi	r22, 0x32	; 50
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	8d 2d       	mov	r24, r13
     608:	90 2f       	mov	r25, r16
     60a:	6c d2       	rcall	.+1240   	; 0xae4 <strcmp>
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	89 2b       	or	r24, r25
     618:	a9 f4       	brne	.+42     	; 0x644 <updateLCDScreen+0xf2>
     61a:	ce 01       	movw	r24, r28
     61c:	4a 96       	adiw	r24, 0x1a	; 26
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	8f e2       	ldi	r24, 0x2F	; 47
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	1f 92       	push	r1
     62c:	85 e1       	ldi	r24, 0x15	; 21
     62e:	8f 93       	push	r24
     630:	ce 01       	movw	r24, r28
     632:	05 96       	adiw	r24, 0x05	; 5
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	81 d2       	rcall	.+1282   	; 0xb3c <snprintf>
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
     644:	12 30       	cpi	r17, 0x02	; 2
     646:	a9 f0       	breq	.+42     	; 0x672 <updateLCDScreen+0x120>
     648:	18 f4       	brcc	.+6      	; 0x650 <updateLCDScreen+0xfe>
     64a:	11 30       	cpi	r17, 0x01	; 1
     64c:	31 f0       	breq	.+12     	; 0x65a <updateLCDScreen+0x108>
     64e:	34 c0       	rjmp	.+104    	; 0x6b8 <updateLCDScreen+0x166>
     650:	13 30       	cpi	r17, 0x03	; 3
     652:	d9 f0       	breq	.+54     	; 0x68a <updateLCDScreen+0x138>
     654:	14 30       	cpi	r17, 0x04	; 4
     656:	29 f1       	breq	.+74     	; 0x6a2 <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
     658:	2f c0       	rjmp	.+94     	; 0x6b8 <updateLCDScreen+0x166>
     65a:	80 e8       	ldi	r24, 0x80	; 128
     65c:	e6 de       	rcall	.-564    	; 0x42a <lcd_write_instruction_4f>
     65e:	9f ef       	ldi	r25, 0xFF	; 255
     660:	20 e7       	ldi	r18, 0x70	; 112
     662:	32 e0       	ldi	r19, 0x02	; 2
     664:	91 50       	subi	r25, 0x01	; 1
     666:	20 40       	sbci	r18, 0x00	; 0
     668:	30 40       	sbci	r19, 0x00	; 0
     66a:	e1 f7       	brne	.-8      	; 0x664 <updateLCDScreen+0x112>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <updateLCDScreen+0x11c>
     66e:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
     670:	23 c0       	rjmp	.+70     	; 0x6b8 <updateLCDScreen+0x166>
     672:	80 ec       	ldi	r24, 0xC0	; 192
     674:	da de       	rcall	.-588    	; 0x42a <lcd_write_instruction_4f>
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	90 e7       	ldi	r25, 0x70	; 112
     67a:	22 e0       	ldi	r18, 0x02	; 2
     67c:	81 50       	subi	r24, 0x01	; 1
     67e:	90 40       	sbci	r25, 0x00	; 0
     680:	20 40       	sbci	r18, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <updateLCDScreen+0x12a>
     684:	00 c0       	rjmp	.+0      	; 0x686 <updateLCDScreen+0x134>
     686:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
     688:	17 c0       	rjmp	.+46     	; 0x6b8 <updateLCDScreen+0x166>
     68a:	84 e9       	ldi	r24, 0x94	; 148
     68c:	ce de       	rcall	.-612    	; 0x42a <lcd_write_instruction_4f>
     68e:	3f ef       	ldi	r19, 0xFF	; 255
     690:	80 e7       	ldi	r24, 0x70	; 112
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	31 50       	subi	r19, 0x01	; 1
     696:	80 40       	sbci	r24, 0x00	; 0
     698:	90 40       	sbci	r25, 0x00	; 0
     69a:	e1 f7       	brne	.-8      	; 0x694 <updateLCDScreen+0x142>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <updateLCDScreen+0x14c>
     69e:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <updateLCDScreen+0x166>
     6a2:	84 ed       	ldi	r24, 0xD4	; 212
     6a4:	c2 de       	rcall	.-636    	; 0x42a <lcd_write_instruction_4f>
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	30 e7       	ldi	r19, 0x70	; 112
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	30 40       	sbci	r19, 0x00	; 0
     6b0:	80 40       	sbci	r24, 0x00	; 0
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <updateLCDScreen+0x15a>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <updateLCDScreen+0x164>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
     6b6:	00 00       	nop
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	1f df       	rcall	.-450    	; 0x4fc <lcd_write_string_4f>
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	20 e7       	ldi	r18, 0x70	; 112
     6c2:	32 e0       	ldi	r19, 0x02	; 2
     6c4:	91 50       	subi	r25, 0x01	; 1
     6c6:	20 40       	sbci	r18, 0x00	; 0
     6c8:	30 40       	sbci	r19, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <updateLCDScreen+0x172>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <updateLCDScreen+0x17c>
     6ce:	00 00       	nop
}
     6d0:	46 c0       	rjmp	.+140    	; 0x75e <updateLCDScreen+0x20c>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     6d2:	ce 01       	movw	r24, r28
     6d4:	4a 96       	adiw	r24, 0x1a	; 26
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	8d e4       	ldi	r24, 0x4D	; 77
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	9e 01       	movw	r18, r28
     6e4:	2f 5f       	subi	r18, 0xFF	; 255
     6e6:	3f 4f       	sbci	r19, 0xFF	; 255
     6e8:	3f 93       	push	r19
     6ea:	2f 93       	push	r18
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	89 e2       	ldi	r24, 0x29	; 41
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	1f 92       	push	r1
     6fa:	85 e1       	ldi	r24, 0x15	; 21
     6fc:	8f 93       	push	r24
     6fe:	ce 01       	movw	r24, r28
     700:	05 96       	adiw	r24, 0x05	; 5
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	1a d2       	rcall	.+1076   	; 0xb3c <snprintf>
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     712:	98 cf       	rjmp	.-208    	; 0x644 <updateLCDScreen+0xf2>
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	71 e0       	ldi	r23, 0x01	; 1
     718:	c7 01       	movw	r24, r14
     71a:	e4 d1       	rcall	.+968    	; 0xae4 <strcmp>
     71c:	89 2b       	or	r24, r25
     71e:	c9 f2       	breq	.-78     	; 0x6d2 <updateLCDScreen+0x180>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     720:	ce 01       	movw	r24, r28
     722:	4a 96       	adiw	r24, 0x1a	; 26
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	ff 92       	push	r15
     72a:	ef 92       	push	r14
     72c:	49 97       	sbiw	r24, 0x19	; 25
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	8d e4       	ldi	r24, 0x4D	; 77
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	89 e2       	ldi	r24, 0x29	; 41
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	1f 92       	push	r1
     744:	85 e1       	ldi	r24, 0x15	; 21
     746:	8f 93       	push	r24
     748:	ce 01       	movw	r24, r28
     74a:	05 96       	adiw	r24, 0x05	; 5
     74c:	9f 93       	push	r25
     74e:	8f 93       	push	r24
     750:	f5 d1       	rcall	.+1002   	; 0xb3c <snprintf>
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	73 cf       	rjmp	.-282    	; 0x644 <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
     75e:	af 96       	adiw	r28, 0x2f	; 47
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	08 95       	ret

0000077a <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
     77a:	eb ce       	rjmp	.-554    	; 0x552 <updateLCDScreen>
     77c:	08 95       	ret

0000077e <__subsf3>:
     77e:	50 58       	subi	r21, 0x80	; 128

00000780 <__addsf3>:
     780:	bb 27       	eor	r27, r27
     782:	aa 27       	eor	r26, r26
     784:	0e d0       	rcall	.+28     	; 0x7a2 <__addsf3x>
     786:	0d c1       	rjmp	.+538    	; 0x9a2 <__fp_round>
     788:	fe d0       	rcall	.+508    	; 0x986 <__fp_pscA>
     78a:	30 f0       	brcs	.+12     	; 0x798 <__addsf3+0x18>
     78c:	03 d1       	rcall	.+518    	; 0x994 <__fp_pscB>
     78e:	20 f0       	brcs	.+8      	; 0x798 <__addsf3+0x18>
     790:	31 f4       	brne	.+12     	; 0x79e <__addsf3+0x1e>
     792:	9f 3f       	cpi	r25, 0xFF	; 255
     794:	11 f4       	brne	.+4      	; 0x79a <__addsf3+0x1a>
     796:	1e f4       	brtc	.+6      	; 0x79e <__addsf3+0x1e>
     798:	f3 c0       	rjmp	.+486    	; 0x980 <__fp_nan>
     79a:	0e f4       	brtc	.+2      	; 0x79e <__addsf3+0x1e>
     79c:	e0 95       	com	r30
     79e:	e7 fb       	bst	r30, 7
     7a0:	e9 c0       	rjmp	.+466    	; 0x974 <__fp_inf>

000007a2 <__addsf3x>:
     7a2:	e9 2f       	mov	r30, r25
     7a4:	0f d1       	rcall	.+542    	; 0x9c4 <__fp_split3>
     7a6:	80 f3       	brcs	.-32     	; 0x788 <__addsf3+0x8>
     7a8:	ba 17       	cp	r27, r26
     7aa:	62 07       	cpc	r22, r18
     7ac:	73 07       	cpc	r23, r19
     7ae:	84 07       	cpc	r24, r20
     7b0:	95 07       	cpc	r25, r21
     7b2:	18 f0       	brcs	.+6      	; 0x7ba <__addsf3x+0x18>
     7b4:	71 f4       	brne	.+28     	; 0x7d2 <__addsf3x+0x30>
     7b6:	9e f5       	brtc	.+102    	; 0x81e <__addsf3x+0x7c>
     7b8:	27 c1       	rjmp	.+590    	; 0xa08 <__fp_zero>
     7ba:	0e f4       	brtc	.+2      	; 0x7be <__addsf3x+0x1c>
     7bc:	e0 95       	com	r30
     7be:	0b 2e       	mov	r0, r27
     7c0:	ba 2f       	mov	r27, r26
     7c2:	a0 2d       	mov	r26, r0
     7c4:	0b 01       	movw	r0, r22
     7c6:	b9 01       	movw	r22, r18
     7c8:	90 01       	movw	r18, r0
     7ca:	0c 01       	movw	r0, r24
     7cc:	ca 01       	movw	r24, r20
     7ce:	a0 01       	movw	r20, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	ff 27       	eor	r31, r31
     7d4:	59 1b       	sub	r21, r25
     7d6:	99 f0       	breq	.+38     	; 0x7fe <__addsf3x+0x5c>
     7d8:	59 3f       	cpi	r21, 0xF9	; 249
     7da:	50 f4       	brcc	.+20     	; 0x7f0 <__addsf3x+0x4e>
     7dc:	50 3e       	cpi	r21, 0xE0	; 224
     7de:	68 f1       	brcs	.+90     	; 0x83a <__addsf3x+0x98>
     7e0:	1a 16       	cp	r1, r26
     7e2:	f0 40       	sbci	r31, 0x00	; 0
     7e4:	a2 2f       	mov	r26, r18
     7e6:	23 2f       	mov	r18, r19
     7e8:	34 2f       	mov	r19, r20
     7ea:	44 27       	eor	r20, r20
     7ec:	58 5f       	subi	r21, 0xF8	; 248
     7ee:	f3 cf       	rjmp	.-26     	; 0x7d6 <__addsf3x+0x34>
     7f0:	46 95       	lsr	r20
     7f2:	37 95       	ror	r19
     7f4:	27 95       	ror	r18
     7f6:	a7 95       	ror	r26
     7f8:	f0 40       	sbci	r31, 0x00	; 0
     7fa:	53 95       	inc	r21
     7fc:	c9 f7       	brne	.-14     	; 0x7f0 <__addsf3x+0x4e>
     7fe:	7e f4       	brtc	.+30     	; 0x81e <__addsf3x+0x7c>
     800:	1f 16       	cp	r1, r31
     802:	ba 0b       	sbc	r27, r26
     804:	62 0b       	sbc	r22, r18
     806:	73 0b       	sbc	r23, r19
     808:	84 0b       	sbc	r24, r20
     80a:	ba f0       	brmi	.+46     	; 0x83a <__addsf3x+0x98>
     80c:	91 50       	subi	r25, 0x01	; 1
     80e:	a1 f0       	breq	.+40     	; 0x838 <__addsf3x+0x96>
     810:	ff 0f       	add	r31, r31
     812:	bb 1f       	adc	r27, r27
     814:	66 1f       	adc	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	88 1f       	adc	r24, r24
     81a:	c2 f7       	brpl	.-16     	; 0x80c <__addsf3x+0x6a>
     81c:	0e c0       	rjmp	.+28     	; 0x83a <__addsf3x+0x98>
     81e:	ba 0f       	add	r27, r26
     820:	62 1f       	adc	r22, r18
     822:	73 1f       	adc	r23, r19
     824:	84 1f       	adc	r24, r20
     826:	48 f4       	brcc	.+18     	; 0x83a <__addsf3x+0x98>
     828:	87 95       	ror	r24
     82a:	77 95       	ror	r23
     82c:	67 95       	ror	r22
     82e:	b7 95       	ror	r27
     830:	f7 95       	ror	r31
     832:	9e 3f       	cpi	r25, 0xFE	; 254
     834:	08 f0       	brcs	.+2      	; 0x838 <__addsf3x+0x96>
     836:	b3 cf       	rjmp	.-154    	; 0x79e <__addsf3+0x1e>
     838:	93 95       	inc	r25
     83a:	88 0f       	add	r24, r24
     83c:	08 f0       	brcs	.+2      	; 0x840 <__addsf3x+0x9e>
     83e:	99 27       	eor	r25, r25
     840:	ee 0f       	add	r30, r30
     842:	97 95       	ror	r25
     844:	87 95       	ror	r24
     846:	08 95       	ret

00000848 <__cmpsf2>:
     848:	71 d0       	rcall	.+226    	; 0x92c <__fp_cmp>
     84a:	08 f4       	brcc	.+2      	; 0x84e <__cmpsf2+0x6>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	08 95       	ret

00000850 <__fixsfsi>:
     850:	04 d0       	rcall	.+8      	; 0x85a <__fixunssfsi>
     852:	68 94       	set
     854:	b1 11       	cpse	r27, r1
     856:	d9 c0       	rjmp	.+434    	; 0xa0a <__fp_szero>
     858:	08 95       	ret

0000085a <__fixunssfsi>:
     85a:	bc d0       	rcall	.+376    	; 0x9d4 <__fp_splitA>
     85c:	88 f0       	brcs	.+34     	; 0x880 <__fixunssfsi+0x26>
     85e:	9f 57       	subi	r25, 0x7F	; 127
     860:	90 f0       	brcs	.+36     	; 0x886 <__fixunssfsi+0x2c>
     862:	b9 2f       	mov	r27, r25
     864:	99 27       	eor	r25, r25
     866:	b7 51       	subi	r27, 0x17	; 23
     868:	a0 f0       	brcs	.+40     	; 0x892 <__fixunssfsi+0x38>
     86a:	d1 f0       	breq	.+52     	; 0x8a0 <__fixunssfsi+0x46>
     86c:	66 0f       	add	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	88 1f       	adc	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	1a f0       	brmi	.+6      	; 0x87c <__fixunssfsi+0x22>
     876:	ba 95       	dec	r27
     878:	c9 f7       	brne	.-14     	; 0x86c <__fixunssfsi+0x12>
     87a:	12 c0       	rjmp	.+36     	; 0x8a0 <__fixunssfsi+0x46>
     87c:	b1 30       	cpi	r27, 0x01	; 1
     87e:	81 f0       	breq	.+32     	; 0x8a0 <__fixunssfsi+0x46>
     880:	c3 d0       	rcall	.+390    	; 0xa08 <__fp_zero>
     882:	b1 e0       	ldi	r27, 0x01	; 1
     884:	08 95       	ret
     886:	c0 c0       	rjmp	.+384    	; 0xa08 <__fp_zero>
     888:	67 2f       	mov	r22, r23
     88a:	78 2f       	mov	r23, r24
     88c:	88 27       	eor	r24, r24
     88e:	b8 5f       	subi	r27, 0xF8	; 248
     890:	39 f0       	breq	.+14     	; 0x8a0 <__fixunssfsi+0x46>
     892:	b9 3f       	cpi	r27, 0xF9	; 249
     894:	cc f3       	brlt	.-14     	; 0x888 <__fixunssfsi+0x2e>
     896:	86 95       	lsr	r24
     898:	77 95       	ror	r23
     89a:	67 95       	ror	r22
     89c:	b3 95       	inc	r27
     89e:	d9 f7       	brne	.-10     	; 0x896 <__fixunssfsi+0x3c>
     8a0:	3e f4       	brtc	.+14     	; 0x8b0 <__fixunssfsi+0x56>
     8a2:	90 95       	com	r25
     8a4:	80 95       	com	r24
     8a6:	70 95       	com	r23
     8a8:	61 95       	neg	r22
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	8f 4f       	sbci	r24, 0xFF	; 255
     8ae:	9f 4f       	sbci	r25, 0xFF	; 255
     8b0:	08 95       	ret

000008b2 <__floatunsisf>:
     8b2:	e8 94       	clt
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <__floatsisf+0x12>

000008b6 <__floatsisf>:
     8b6:	97 fb       	bst	r25, 7
     8b8:	3e f4       	brtc	.+14     	; 0x8c8 <__floatsisf+0x12>
     8ba:	90 95       	com	r25
     8bc:	80 95       	com	r24
     8be:	70 95       	com	r23
     8c0:	61 95       	neg	r22
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	8f 4f       	sbci	r24, 0xFF	; 255
     8c6:	9f 4f       	sbci	r25, 0xFF	; 255
     8c8:	99 23       	and	r25, r25
     8ca:	a9 f0       	breq	.+42     	; 0x8f6 <__floatsisf+0x40>
     8cc:	f9 2f       	mov	r31, r25
     8ce:	96 e9       	ldi	r25, 0x96	; 150
     8d0:	bb 27       	eor	r27, r27
     8d2:	93 95       	inc	r25
     8d4:	f6 95       	lsr	r31
     8d6:	87 95       	ror	r24
     8d8:	77 95       	ror	r23
     8da:	67 95       	ror	r22
     8dc:	b7 95       	ror	r27
     8de:	f1 11       	cpse	r31, r1
     8e0:	f8 cf       	rjmp	.-16     	; 0x8d2 <__floatsisf+0x1c>
     8e2:	fa f4       	brpl	.+62     	; 0x922 <__stack+0x23>
     8e4:	bb 0f       	add	r27, r27
     8e6:	11 f4       	brne	.+4      	; 0x8ec <__floatsisf+0x36>
     8e8:	60 ff       	sbrs	r22, 0
     8ea:	1b c0       	rjmp	.+54     	; 0x922 <__stack+0x23>
     8ec:	6f 5f       	subi	r22, 0xFF	; 255
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	16 c0       	rjmp	.+44     	; 0x922 <__stack+0x23>
     8f6:	88 23       	and	r24, r24
     8f8:	11 f0       	breq	.+4      	; 0x8fe <__floatsisf+0x48>
     8fa:	96 e9       	ldi	r25, 0x96	; 150
     8fc:	11 c0       	rjmp	.+34     	; 0x920 <__stack+0x21>
     8fe:	77 23       	and	r23, r23
     900:	21 f0       	breq	.+8      	; 0x90a <__stack+0xb>
     902:	9e e8       	ldi	r25, 0x8E	; 142
     904:	87 2f       	mov	r24, r23
     906:	76 2f       	mov	r23, r22
     908:	05 c0       	rjmp	.+10     	; 0x914 <__stack+0x15>
     90a:	66 23       	and	r22, r22
     90c:	71 f0       	breq	.+28     	; 0x92a <__stack+0x2b>
     90e:	96 e8       	ldi	r25, 0x86	; 134
     910:	86 2f       	mov	r24, r22
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	2a f0       	brmi	.+10     	; 0x922 <__stack+0x23>
     918:	9a 95       	dec	r25
     91a:	66 0f       	add	r22, r22
     91c:	77 1f       	adc	r23, r23
     91e:	88 1f       	adc	r24, r24
     920:	da f7       	brpl	.-10     	; 0x918 <__stack+0x19>
     922:	88 0f       	add	r24, r24
     924:	96 95       	lsr	r25
     926:	87 95       	ror	r24
     928:	97 f9       	bld	r25, 7
     92a:	08 95       	ret

0000092c <__fp_cmp>:
     92c:	99 0f       	add	r25, r25
     92e:	00 08       	sbc	r0, r0
     930:	55 0f       	add	r21, r21
     932:	aa 0b       	sbc	r26, r26
     934:	e0 e8       	ldi	r30, 0x80	; 128
     936:	fe ef       	ldi	r31, 0xFE	; 254
     938:	16 16       	cp	r1, r22
     93a:	17 06       	cpc	r1, r23
     93c:	e8 07       	cpc	r30, r24
     93e:	f9 07       	cpc	r31, r25
     940:	c0 f0       	brcs	.+48     	; 0x972 <__fp_cmp+0x46>
     942:	12 16       	cp	r1, r18
     944:	13 06       	cpc	r1, r19
     946:	e4 07       	cpc	r30, r20
     948:	f5 07       	cpc	r31, r21
     94a:	98 f0       	brcs	.+38     	; 0x972 <__fp_cmp+0x46>
     94c:	62 1b       	sub	r22, r18
     94e:	73 0b       	sbc	r23, r19
     950:	84 0b       	sbc	r24, r20
     952:	95 0b       	sbc	r25, r21
     954:	39 f4       	brne	.+14     	; 0x964 <__fp_cmp+0x38>
     956:	0a 26       	eor	r0, r26
     958:	61 f0       	breq	.+24     	; 0x972 <__fp_cmp+0x46>
     95a:	23 2b       	or	r18, r19
     95c:	24 2b       	or	r18, r20
     95e:	25 2b       	or	r18, r21
     960:	21 f4       	brne	.+8      	; 0x96a <__fp_cmp+0x3e>
     962:	08 95       	ret
     964:	0a 26       	eor	r0, r26
     966:	09 f4       	brne	.+2      	; 0x96a <__fp_cmp+0x3e>
     968:	a1 40       	sbci	r26, 0x01	; 1
     96a:	a6 95       	lsr	r26
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	81 1d       	adc	r24, r1
     970:	81 1d       	adc	r24, r1
     972:	08 95       	ret

00000974 <__fp_inf>:
     974:	97 f9       	bld	r25, 7
     976:	9f 67       	ori	r25, 0x7F	; 127
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	08 95       	ret

00000980 <__fp_nan>:
     980:	9f ef       	ldi	r25, 0xFF	; 255
     982:	80 ec       	ldi	r24, 0xC0	; 192
     984:	08 95       	ret

00000986 <__fp_pscA>:
     986:	00 24       	eor	r0, r0
     988:	0a 94       	dec	r0
     98a:	16 16       	cp	r1, r22
     98c:	17 06       	cpc	r1, r23
     98e:	18 06       	cpc	r1, r24
     990:	09 06       	cpc	r0, r25
     992:	08 95       	ret

00000994 <__fp_pscB>:
     994:	00 24       	eor	r0, r0
     996:	0a 94       	dec	r0
     998:	12 16       	cp	r1, r18
     99a:	13 06       	cpc	r1, r19
     99c:	14 06       	cpc	r1, r20
     99e:	05 06       	cpc	r0, r21
     9a0:	08 95       	ret

000009a2 <__fp_round>:
     9a2:	09 2e       	mov	r0, r25
     9a4:	03 94       	inc	r0
     9a6:	00 0c       	add	r0, r0
     9a8:	11 f4       	brne	.+4      	; 0x9ae <__fp_round+0xc>
     9aa:	88 23       	and	r24, r24
     9ac:	52 f0       	brmi	.+20     	; 0x9c2 <__fp_round+0x20>
     9ae:	bb 0f       	add	r27, r27
     9b0:	40 f4       	brcc	.+16     	; 0x9c2 <__fp_round+0x20>
     9b2:	bf 2b       	or	r27, r31
     9b4:	11 f4       	brne	.+4      	; 0x9ba <__fp_round+0x18>
     9b6:	60 ff       	sbrs	r22, 0
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__fp_round+0x20>
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	8f 4f       	sbci	r24, 0xFF	; 255
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	08 95       	ret

000009c4 <__fp_split3>:
     9c4:	57 fd       	sbrc	r21, 7
     9c6:	90 58       	subi	r25, 0x80	; 128
     9c8:	44 0f       	add	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	59 f0       	breq	.+22     	; 0x9e4 <__fp_splitA+0x10>
     9ce:	5f 3f       	cpi	r21, 0xFF	; 255
     9d0:	71 f0       	breq	.+28     	; 0x9ee <__fp_splitA+0x1a>
     9d2:	47 95       	ror	r20

000009d4 <__fp_splitA>:
     9d4:	88 0f       	add	r24, r24
     9d6:	97 fb       	bst	r25, 7
     9d8:	99 1f       	adc	r25, r25
     9da:	61 f0       	breq	.+24     	; 0x9f4 <__fp_splitA+0x20>
     9dc:	9f 3f       	cpi	r25, 0xFF	; 255
     9de:	79 f0       	breq	.+30     	; 0x9fe <__fp_splitA+0x2a>
     9e0:	87 95       	ror	r24
     9e2:	08 95       	ret
     9e4:	12 16       	cp	r1, r18
     9e6:	13 06       	cpc	r1, r19
     9e8:	14 06       	cpc	r1, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	f2 cf       	rjmp	.-28     	; 0x9d2 <__fp_split3+0xe>
     9ee:	46 95       	lsr	r20
     9f0:	f1 df       	rcall	.-30     	; 0x9d4 <__fp_splitA>
     9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__fp_splitA+0x30>
     9f4:	16 16       	cp	r1, r22
     9f6:	17 06       	cpc	r1, r23
     9f8:	18 06       	cpc	r1, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	f1 cf       	rjmp	.-30     	; 0x9e0 <__fp_splitA+0xc>
     9fe:	86 95       	lsr	r24
     a00:	71 05       	cpc	r23, r1
     a02:	61 05       	cpc	r22, r1
     a04:	08 94       	sec
     a06:	08 95       	ret

00000a08 <__fp_zero>:
     a08:	e8 94       	clt

00000a0a <__fp_szero>:
     a0a:	bb 27       	eor	r27, r27
     a0c:	66 27       	eor	r22, r22
     a0e:	77 27       	eor	r23, r23
     a10:	cb 01       	movw	r24, r22
     a12:	97 f9       	bld	r25, 7
     a14:	08 95       	ret

00000a16 <__gesf2>:
     a16:	8a df       	rcall	.-236    	; 0x92c <__fp_cmp>
     a18:	08 f4       	brcc	.+2      	; 0xa1c <__gesf2+0x6>
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	08 95       	ret

00000a1e <__mulsf3>:
     a1e:	0b d0       	rcall	.+22     	; 0xa36 <__mulsf3x>
     a20:	c0 cf       	rjmp	.-128    	; 0x9a2 <__fp_round>
     a22:	b1 df       	rcall	.-158    	; 0x986 <__fp_pscA>
     a24:	28 f0       	brcs	.+10     	; 0xa30 <__mulsf3+0x12>
     a26:	b6 df       	rcall	.-148    	; 0x994 <__fp_pscB>
     a28:	18 f0       	brcs	.+6      	; 0xa30 <__mulsf3+0x12>
     a2a:	95 23       	and	r25, r21
     a2c:	09 f0       	breq	.+2      	; 0xa30 <__mulsf3+0x12>
     a2e:	a2 cf       	rjmp	.-188    	; 0x974 <__fp_inf>
     a30:	a7 cf       	rjmp	.-178    	; 0x980 <__fp_nan>
     a32:	11 24       	eor	r1, r1
     a34:	ea cf       	rjmp	.-44     	; 0xa0a <__fp_szero>

00000a36 <__mulsf3x>:
     a36:	c6 df       	rcall	.-116    	; 0x9c4 <__fp_split3>
     a38:	a0 f3       	brcs	.-24     	; 0xa22 <__mulsf3+0x4>

00000a3a <__mulsf3_pse>:
     a3a:	95 9f       	mul	r25, r21
     a3c:	d1 f3       	breq	.-12     	; 0xa32 <__mulsf3+0x14>
     a3e:	95 0f       	add	r25, r21
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	55 1f       	adc	r21, r21
     a44:	62 9f       	mul	r22, r18
     a46:	f0 01       	movw	r30, r0
     a48:	72 9f       	mul	r23, r18
     a4a:	bb 27       	eor	r27, r27
     a4c:	f0 0d       	add	r31, r0
     a4e:	b1 1d       	adc	r27, r1
     a50:	63 9f       	mul	r22, r19
     a52:	aa 27       	eor	r26, r26
     a54:	f0 0d       	add	r31, r0
     a56:	b1 1d       	adc	r27, r1
     a58:	aa 1f       	adc	r26, r26
     a5a:	64 9f       	mul	r22, r20
     a5c:	66 27       	eor	r22, r22
     a5e:	b0 0d       	add	r27, r0
     a60:	a1 1d       	adc	r26, r1
     a62:	66 1f       	adc	r22, r22
     a64:	82 9f       	mul	r24, r18
     a66:	22 27       	eor	r18, r18
     a68:	b0 0d       	add	r27, r0
     a6a:	a1 1d       	adc	r26, r1
     a6c:	62 1f       	adc	r22, r18
     a6e:	73 9f       	mul	r23, r19
     a70:	b0 0d       	add	r27, r0
     a72:	a1 1d       	adc	r26, r1
     a74:	62 1f       	adc	r22, r18
     a76:	83 9f       	mul	r24, r19
     a78:	a0 0d       	add	r26, r0
     a7a:	61 1d       	adc	r22, r1
     a7c:	22 1f       	adc	r18, r18
     a7e:	74 9f       	mul	r23, r20
     a80:	33 27       	eor	r19, r19
     a82:	a0 0d       	add	r26, r0
     a84:	61 1d       	adc	r22, r1
     a86:	23 1f       	adc	r18, r19
     a88:	84 9f       	mul	r24, r20
     a8a:	60 0d       	add	r22, r0
     a8c:	21 1d       	adc	r18, r1
     a8e:	82 2f       	mov	r24, r18
     a90:	76 2f       	mov	r23, r22
     a92:	6a 2f       	mov	r22, r26
     a94:	11 24       	eor	r1, r1
     a96:	9f 57       	subi	r25, 0x7F	; 127
     a98:	50 40       	sbci	r21, 0x00	; 0
     a9a:	8a f0       	brmi	.+34     	; 0xabe <__mulsf3_pse+0x84>
     a9c:	e1 f0       	breq	.+56     	; 0xad6 <__mulsf3_pse+0x9c>
     a9e:	88 23       	and	r24, r24
     aa0:	4a f0       	brmi	.+18     	; 0xab4 <__mulsf3_pse+0x7a>
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	bb 1f       	adc	r27, r27
     aa8:	66 1f       	adc	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	88 1f       	adc	r24, r24
     aae:	91 50       	subi	r25, 0x01	; 1
     ab0:	50 40       	sbci	r21, 0x00	; 0
     ab2:	a9 f7       	brne	.-22     	; 0xa9e <__mulsf3_pse+0x64>
     ab4:	9e 3f       	cpi	r25, 0xFE	; 254
     ab6:	51 05       	cpc	r21, r1
     ab8:	70 f0       	brcs	.+28     	; 0xad6 <__mulsf3_pse+0x9c>
     aba:	5c cf       	rjmp	.-328    	; 0x974 <__fp_inf>
     abc:	a6 cf       	rjmp	.-180    	; 0xa0a <__fp_szero>
     abe:	5f 3f       	cpi	r21, 0xFF	; 255
     ac0:	ec f3       	brlt	.-6      	; 0xabc <__mulsf3_pse+0x82>
     ac2:	98 3e       	cpi	r25, 0xE8	; 232
     ac4:	dc f3       	brlt	.-10     	; 0xabc <__mulsf3_pse+0x82>
     ac6:	86 95       	lsr	r24
     ac8:	77 95       	ror	r23
     aca:	67 95       	ror	r22
     acc:	b7 95       	ror	r27
     ace:	f7 95       	ror	r31
     ad0:	e7 95       	ror	r30
     ad2:	9f 5f       	subi	r25, 0xFF	; 255
     ad4:	c1 f7       	brne	.-16     	; 0xac6 <__mulsf3_pse+0x8c>
     ad6:	fe 2b       	or	r31, r30
     ad8:	88 0f       	add	r24, r24
     ada:	91 1d       	adc	r25, r1
     adc:	96 95       	lsr	r25
     ade:	87 95       	ror	r24
     ae0:	97 f9       	bld	r25, 7
     ae2:	08 95       	ret

00000ae4 <strcmp>:
     ae4:	fb 01       	movw	r30, r22
     ae6:	dc 01       	movw	r26, r24
     ae8:	8d 91       	ld	r24, X+
     aea:	01 90       	ld	r0, Z+
     aec:	80 19       	sub	r24, r0
     aee:	01 10       	cpse	r0, r1
     af0:	d9 f3       	breq	.-10     	; 0xae8 <strcmp+0x4>
     af2:	99 0b       	sbc	r25, r25
     af4:	08 95       	ret

00000af6 <__itoa_ncheck>:
     af6:	bb 27       	eor	r27, r27
     af8:	4a 30       	cpi	r20, 0x0A	; 10
     afa:	31 f4       	brne	.+12     	; 0xb08 <__itoa_ncheck+0x12>
     afc:	99 23       	and	r25, r25
     afe:	22 f4       	brpl	.+8      	; 0xb08 <__itoa_ncheck+0x12>
     b00:	bd e2       	ldi	r27, 0x2D	; 45
     b02:	90 95       	com	r25
     b04:	81 95       	neg	r24
     b06:	9f 4f       	sbci	r25, 0xFF	; 255
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <__utoa_common>

00000b0a <__utoa_ncheck>:
     b0a:	bb 27       	eor	r27, r27

00000b0c <__utoa_common>:
     b0c:	fb 01       	movw	r30, r22
     b0e:	55 27       	eor	r21, r21
     b10:	aa 27       	eor	r26, r26
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	aa 1f       	adc	r26, r26
     b18:	a4 17       	cp	r26, r20
     b1a:	10 f0       	brcs	.+4      	; 0xb20 <__utoa_common+0x14>
     b1c:	a4 1b       	sub	r26, r20
     b1e:	83 95       	inc	r24
     b20:	50 51       	subi	r21, 0x10	; 16
     b22:	b9 f7       	brne	.-18     	; 0xb12 <__utoa_common+0x6>
     b24:	a0 5d       	subi	r26, 0xD0	; 208
     b26:	aa 33       	cpi	r26, 0x3A	; 58
     b28:	08 f0       	brcs	.+2      	; 0xb2c <__utoa_common+0x20>
     b2a:	a9 5d       	subi	r26, 0xD9	; 217
     b2c:	a1 93       	st	Z+, r26
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	79 f7       	brne	.-34     	; 0xb10 <__utoa_common+0x4>
     b32:	b1 11       	cpse	r27, r1
     b34:	b1 93       	st	Z+, r27
     b36:	11 92       	st	Z+, r1
     b38:	cb 01       	movw	r24, r22
     b3a:	15 c2       	rjmp	.+1066   	; 0xf66 <strrev>

00000b3c <snprintf>:
     b3c:	ae e0       	ldi	r26, 0x0E	; 14
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e3 ea       	ldi	r30, 0xA3	; 163
     b42:	f5 e0       	ldi	r31, 0x05	; 5
     b44:	c8 c2       	rjmp	.+1424   	; 0x10d6 <__prologue_saves__+0x1c>
     b46:	0d 89       	ldd	r16, Y+21	; 0x15
     b48:	1e 89       	ldd	r17, Y+22	; 0x16
     b4a:	8f 89       	ldd	r24, Y+23	; 0x17
     b4c:	98 8d       	ldd	r25, Y+24	; 0x18
     b4e:	26 e0       	ldi	r18, 0x06	; 6
     b50:	2c 83       	std	Y+4, r18	; 0x04
     b52:	1a 83       	std	Y+2, r17	; 0x02
     b54:	09 83       	std	Y+1, r16	; 0x01
     b56:	97 ff       	sbrs	r25, 7
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <snprintf+0x22>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e8       	ldi	r25, 0x80	; 128
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	9e 83       	std	Y+6, r25	; 0x06
     b62:	8d 83       	std	Y+5, r24	; 0x05
     b64:	ae 01       	movw	r20, r28
     b66:	45 5e       	subi	r20, 0xE5	; 229
     b68:	5f 4f       	sbci	r21, 0xFF	; 255
     b6a:	69 8d       	ldd	r22, Y+25	; 0x19
     b6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	11 d0       	rcall	.+34     	; 0xb96 <vfprintf>
     b74:	4d 81       	ldd	r20, Y+5	; 0x05
     b76:	5e 81       	ldd	r21, Y+6	; 0x06
     b78:	57 fd       	sbrc	r21, 7
     b7a:	0a c0       	rjmp	.+20     	; 0xb90 <snprintf+0x54>
     b7c:	2f 81       	ldd	r18, Y+7	; 0x07
     b7e:	38 85       	ldd	r19, Y+8	; 0x08
     b80:	42 17       	cp	r20, r18
     b82:	53 07       	cpc	r21, r19
     b84:	0c f4       	brge	.+2      	; 0xb88 <snprintf+0x4c>
     b86:	9a 01       	movw	r18, r20
     b88:	f8 01       	movw	r30, r16
     b8a:	e2 0f       	add	r30, r18
     b8c:	f3 1f       	adc	r31, r19
     b8e:	10 82       	st	Z, r1
     b90:	2e 96       	adiw	r28, 0x0e	; 14
     b92:	e4 e0       	ldi	r30, 0x04	; 4
     b94:	bc c2       	rjmp	.+1400   	; 0x110e <__epilogue_restores__+0x1c>

00000b96 <vfprintf>:
     b96:	ab e0       	ldi	r26, 0x0B	; 11
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e0 ed       	ldi	r30, 0xD0	; 208
     b9c:	f5 e0       	ldi	r31, 0x05	; 5
     b9e:	8d c2       	rjmp	.+1306   	; 0x10ba <__prologue_saves__>
     ba0:	6c 01       	movw	r12, r24
     ba2:	7b 01       	movw	r14, r22
     ba4:	8a 01       	movw	r16, r20
     ba6:	fc 01       	movw	r30, r24
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	83 81       	ldd	r24, Z+3	; 0x03
     bae:	81 ff       	sbrs	r24, 1
     bb0:	bf c1       	rjmp	.+894    	; 0xf30 <vfprintf+0x39a>
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	3c 01       	movw	r6, r24
     bb8:	f6 01       	movw	r30, r12
     bba:	93 81       	ldd	r25, Z+3	; 0x03
     bbc:	f7 01       	movw	r30, r14
     bbe:	93 fd       	sbrc	r25, 3
     bc0:	85 91       	lpm	r24, Z+
     bc2:	93 ff       	sbrs	r25, 3
     bc4:	81 91       	ld	r24, Z+
     bc6:	7f 01       	movw	r14, r30
     bc8:	88 23       	and	r24, r24
     bca:	09 f4       	brne	.+2      	; 0xbce <vfprintf+0x38>
     bcc:	ad c1       	rjmp	.+858    	; 0xf28 <vfprintf+0x392>
     bce:	85 32       	cpi	r24, 0x25	; 37
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <vfprintf+0x4a>
     bd2:	93 fd       	sbrc	r25, 3
     bd4:	85 91       	lpm	r24, Z+
     bd6:	93 ff       	sbrs	r25, 3
     bd8:	81 91       	ld	r24, Z+
     bda:	7f 01       	movw	r14, r30
     bdc:	85 32       	cpi	r24, 0x25	; 37
     bde:	21 f4       	brne	.+8      	; 0xbe8 <vfprintf+0x52>
     be0:	b6 01       	movw	r22, r12
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	d0 d1       	rcall	.+928    	; 0xf86 <fputc>
     be6:	e8 cf       	rjmp	.-48     	; 0xbb8 <vfprintf+0x22>
     be8:	91 2c       	mov	r9, r1
     bea:	21 2c       	mov	r2, r1
     bec:	31 2c       	mov	r3, r1
     bee:	ff e1       	ldi	r31, 0x1F	; 31
     bf0:	f3 15       	cp	r31, r3
     bf2:	d8 f0       	brcs	.+54     	; 0xc2a <vfprintf+0x94>
     bf4:	8b 32       	cpi	r24, 0x2B	; 43
     bf6:	79 f0       	breq	.+30     	; 0xc16 <vfprintf+0x80>
     bf8:	38 f4       	brcc	.+14     	; 0xc08 <vfprintf+0x72>
     bfa:	80 32       	cpi	r24, 0x20	; 32
     bfc:	79 f0       	breq	.+30     	; 0xc1c <vfprintf+0x86>
     bfe:	83 32       	cpi	r24, 0x23	; 35
     c00:	a1 f4       	brne	.+40     	; 0xc2a <vfprintf+0x94>
     c02:	23 2d       	mov	r18, r3
     c04:	20 61       	ori	r18, 0x10	; 16
     c06:	1d c0       	rjmp	.+58     	; 0xc42 <vfprintf+0xac>
     c08:	8d 32       	cpi	r24, 0x2D	; 45
     c0a:	61 f0       	breq	.+24     	; 0xc24 <vfprintf+0x8e>
     c0c:	80 33       	cpi	r24, 0x30	; 48
     c0e:	69 f4       	brne	.+26     	; 0xc2a <vfprintf+0x94>
     c10:	23 2d       	mov	r18, r3
     c12:	21 60       	ori	r18, 0x01	; 1
     c14:	16 c0       	rjmp	.+44     	; 0xc42 <vfprintf+0xac>
     c16:	83 2d       	mov	r24, r3
     c18:	82 60       	ori	r24, 0x02	; 2
     c1a:	38 2e       	mov	r3, r24
     c1c:	e3 2d       	mov	r30, r3
     c1e:	e4 60       	ori	r30, 0x04	; 4
     c20:	3e 2e       	mov	r3, r30
     c22:	2a c0       	rjmp	.+84     	; 0xc78 <vfprintf+0xe2>
     c24:	f3 2d       	mov	r31, r3
     c26:	f8 60       	ori	r31, 0x08	; 8
     c28:	1d c0       	rjmp	.+58     	; 0xc64 <vfprintf+0xce>
     c2a:	37 fc       	sbrc	r3, 7
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <vfprintf+0xf2>
     c2e:	20 ed       	ldi	r18, 0xD0	; 208
     c30:	28 0f       	add	r18, r24
     c32:	2a 30       	cpi	r18, 0x0A	; 10
     c34:	40 f0       	brcs	.+16     	; 0xc46 <vfprintf+0xb0>
     c36:	8e 32       	cpi	r24, 0x2E	; 46
     c38:	b9 f4       	brne	.+46     	; 0xc68 <vfprintf+0xd2>
     c3a:	36 fc       	sbrc	r3, 6
     c3c:	75 c1       	rjmp	.+746    	; 0xf28 <vfprintf+0x392>
     c3e:	23 2d       	mov	r18, r3
     c40:	20 64       	ori	r18, 0x40	; 64
     c42:	32 2e       	mov	r3, r18
     c44:	19 c0       	rjmp	.+50     	; 0xc78 <vfprintf+0xe2>
     c46:	36 fe       	sbrs	r3, 6
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0xc0>
     c4a:	8a e0       	ldi	r24, 0x0A	; 10
     c4c:	98 9e       	mul	r9, r24
     c4e:	20 0d       	add	r18, r0
     c50:	11 24       	eor	r1, r1
     c52:	92 2e       	mov	r9, r18
     c54:	11 c0       	rjmp	.+34     	; 0xc78 <vfprintf+0xe2>
     c56:	ea e0       	ldi	r30, 0x0A	; 10
     c58:	2e 9e       	mul	r2, r30
     c5a:	20 0d       	add	r18, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	22 2e       	mov	r2, r18
     c60:	f3 2d       	mov	r31, r3
     c62:	f0 62       	ori	r31, 0x20	; 32
     c64:	3f 2e       	mov	r3, r31
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <vfprintf+0xe2>
     c68:	8c 36       	cpi	r24, 0x6C	; 108
     c6a:	21 f4       	brne	.+8      	; 0xc74 <vfprintf+0xde>
     c6c:	83 2d       	mov	r24, r3
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	38 2e       	mov	r3, r24
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <vfprintf+0xe2>
     c74:	88 36       	cpi	r24, 0x68	; 104
     c76:	41 f4       	brne	.+16     	; 0xc88 <vfprintf+0xf2>
     c78:	f7 01       	movw	r30, r14
     c7a:	93 fd       	sbrc	r25, 3
     c7c:	85 91       	lpm	r24, Z+
     c7e:	93 ff       	sbrs	r25, 3
     c80:	81 91       	ld	r24, Z+
     c82:	7f 01       	movw	r14, r30
     c84:	81 11       	cpse	r24, r1
     c86:	b3 cf       	rjmp	.-154    	; 0xbee <vfprintf+0x58>
     c88:	98 2f       	mov	r25, r24
     c8a:	9f 7d       	andi	r25, 0xDF	; 223
     c8c:	95 54       	subi	r25, 0x45	; 69
     c8e:	93 30       	cpi	r25, 0x03	; 3
     c90:	28 f4       	brcc	.+10     	; 0xc9c <vfprintf+0x106>
     c92:	0c 5f       	subi	r16, 0xFC	; 252
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	9f e3       	ldi	r25, 0x3F	; 63
     c98:	99 83       	std	Y+1, r25	; 0x01
     c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <vfprintf+0x120>
     c9c:	83 36       	cpi	r24, 0x63	; 99
     c9e:	31 f0       	breq	.+12     	; 0xcac <vfprintf+0x116>
     ca0:	83 37       	cpi	r24, 0x73	; 115
     ca2:	71 f0       	breq	.+28     	; 0xcc0 <vfprintf+0x12a>
     ca4:	83 35       	cpi	r24, 0x53	; 83
     ca6:	09 f0       	breq	.+2      	; 0xcaa <vfprintf+0x114>
     ca8:	55 c0       	rjmp	.+170    	; 0xd54 <vfprintf+0x1be>
     caa:	20 c0       	rjmp	.+64     	; 0xcec <vfprintf+0x156>
     cac:	f8 01       	movw	r30, r16
     cae:	80 81       	ld	r24, Z
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	0e 5f       	subi	r16, 0xFE	; 254
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	88 24       	eor	r8, r8
     cb8:	83 94       	inc	r8
     cba:	91 2c       	mov	r9, r1
     cbc:	53 01       	movw	r10, r6
     cbe:	12 c0       	rjmp	.+36     	; 0xce4 <vfprintf+0x14e>
     cc0:	28 01       	movw	r4, r16
     cc2:	f2 e0       	ldi	r31, 0x02	; 2
     cc4:	4f 0e       	add	r4, r31
     cc6:	51 1c       	adc	r5, r1
     cc8:	f8 01       	movw	r30, r16
     cca:	a0 80       	ld	r10, Z
     ccc:	b1 80       	ldd	r11, Z+1	; 0x01
     cce:	36 fe       	sbrs	r3, 6
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <vfprintf+0x142>
     cd2:	69 2d       	mov	r22, r9
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <vfprintf+0x146>
     cd8:	6f ef       	ldi	r22, 0xFF	; 255
     cda:	7f ef       	ldi	r23, 0xFF	; 255
     cdc:	c5 01       	movw	r24, r10
     cde:	38 d1       	rcall	.+624    	; 0xf50 <strnlen>
     ce0:	4c 01       	movw	r8, r24
     ce2:	82 01       	movw	r16, r4
     ce4:	f3 2d       	mov	r31, r3
     ce6:	ff 77       	andi	r31, 0x7F	; 127
     ce8:	3f 2e       	mov	r3, r31
     cea:	15 c0       	rjmp	.+42     	; 0xd16 <vfprintf+0x180>
     cec:	28 01       	movw	r4, r16
     cee:	22 e0       	ldi	r18, 0x02	; 2
     cf0:	42 0e       	add	r4, r18
     cf2:	51 1c       	adc	r5, r1
     cf4:	f8 01       	movw	r30, r16
     cf6:	a0 80       	ld	r10, Z
     cf8:	b1 80       	ldd	r11, Z+1	; 0x01
     cfa:	36 fe       	sbrs	r3, 6
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <vfprintf+0x16e>
     cfe:	69 2d       	mov	r22, r9
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <vfprintf+0x172>
     d04:	6f ef       	ldi	r22, 0xFF	; 255
     d06:	7f ef       	ldi	r23, 0xFF	; 255
     d08:	c5 01       	movw	r24, r10
     d0a:	17 d1       	rcall	.+558    	; 0xf3a <strnlen_P>
     d0c:	4c 01       	movw	r8, r24
     d0e:	f3 2d       	mov	r31, r3
     d10:	f0 68       	ori	r31, 0x80	; 128
     d12:	3f 2e       	mov	r3, r31
     d14:	82 01       	movw	r16, r4
     d16:	33 fc       	sbrc	r3, 3
     d18:	19 c0       	rjmp	.+50     	; 0xd4c <vfprintf+0x1b6>
     d1a:	82 2d       	mov	r24, r2
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	88 16       	cp	r8, r24
     d20:	99 06       	cpc	r9, r25
     d22:	a0 f4       	brcc	.+40     	; 0xd4c <vfprintf+0x1b6>
     d24:	b6 01       	movw	r22, r12
     d26:	80 e2       	ldi	r24, 0x20	; 32
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	2d d1       	rcall	.+602    	; 0xf86 <fputc>
     d2c:	2a 94       	dec	r2
     d2e:	f5 cf       	rjmp	.-22     	; 0xd1a <vfprintf+0x184>
     d30:	f5 01       	movw	r30, r10
     d32:	37 fc       	sbrc	r3, 7
     d34:	85 91       	lpm	r24, Z+
     d36:	37 fe       	sbrs	r3, 7
     d38:	81 91       	ld	r24, Z+
     d3a:	5f 01       	movw	r10, r30
     d3c:	b6 01       	movw	r22, r12
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	22 d1       	rcall	.+580    	; 0xf86 <fputc>
     d42:	21 10       	cpse	r2, r1
     d44:	2a 94       	dec	r2
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	82 1a       	sub	r8, r18
     d4a:	91 08       	sbc	r9, r1
     d4c:	81 14       	cp	r8, r1
     d4e:	91 04       	cpc	r9, r1
     d50:	79 f7       	brne	.-34     	; 0xd30 <vfprintf+0x19a>
     d52:	e1 c0       	rjmp	.+450    	; 0xf16 <vfprintf+0x380>
     d54:	84 36       	cpi	r24, 0x64	; 100
     d56:	11 f0       	breq	.+4      	; 0xd5c <vfprintf+0x1c6>
     d58:	89 36       	cpi	r24, 0x69	; 105
     d5a:	39 f5       	brne	.+78     	; 0xdaa <vfprintf+0x214>
     d5c:	f8 01       	movw	r30, r16
     d5e:	37 fe       	sbrs	r3, 7
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <vfprintf+0x1da>
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	0c 5f       	subi	r16, 0xFC	; 252
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <vfprintf+0x1ea>
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	07 2e       	mov	r0, r23
     d76:	00 0c       	add	r0, r0
     d78:	88 0b       	sbc	r24, r24
     d7a:	99 0b       	sbc	r25, r25
     d7c:	0e 5f       	subi	r16, 0xFE	; 254
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
     d80:	f3 2d       	mov	r31, r3
     d82:	ff 76       	andi	r31, 0x6F	; 111
     d84:	3f 2e       	mov	r3, r31
     d86:	97 ff       	sbrs	r25, 7
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <vfprintf+0x206>
     d8a:	90 95       	com	r25
     d8c:	80 95       	com	r24
     d8e:	70 95       	com	r23
     d90:	61 95       	neg	r22
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	f0 68       	ori	r31, 0x80	; 128
     d9a:	3f 2e       	mov	r3, r31
     d9c:	2a e0       	ldi	r18, 0x0A	; 10
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	a3 01       	movw	r20, r6
     da2:	2d d1       	rcall	.+602    	; 0xffe <__ultoa_invert>
     da4:	88 2e       	mov	r8, r24
     da6:	86 18       	sub	r8, r6
     da8:	44 c0       	rjmp	.+136    	; 0xe32 <vfprintf+0x29c>
     daa:	85 37       	cpi	r24, 0x75	; 117
     dac:	31 f4       	brne	.+12     	; 0xdba <vfprintf+0x224>
     dae:	23 2d       	mov	r18, r3
     db0:	2f 7e       	andi	r18, 0xEF	; 239
     db2:	b2 2e       	mov	r11, r18
     db4:	2a e0       	ldi	r18, 0x0A	; 10
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <vfprintf+0x26e>
     dba:	93 2d       	mov	r25, r3
     dbc:	99 7f       	andi	r25, 0xF9	; 249
     dbe:	b9 2e       	mov	r11, r25
     dc0:	8f 36       	cpi	r24, 0x6F	; 111
     dc2:	c1 f0       	breq	.+48     	; 0xdf4 <vfprintf+0x25e>
     dc4:	18 f4       	brcc	.+6      	; 0xdcc <vfprintf+0x236>
     dc6:	88 35       	cpi	r24, 0x58	; 88
     dc8:	79 f0       	breq	.+30     	; 0xde8 <vfprintf+0x252>
     dca:	ae c0       	rjmp	.+348    	; 0xf28 <vfprintf+0x392>
     dcc:	80 37       	cpi	r24, 0x70	; 112
     dce:	19 f0       	breq	.+6      	; 0xdd6 <vfprintf+0x240>
     dd0:	88 37       	cpi	r24, 0x78	; 120
     dd2:	21 f0       	breq	.+8      	; 0xddc <vfprintf+0x246>
     dd4:	a9 c0       	rjmp	.+338    	; 0xf28 <vfprintf+0x392>
     dd6:	e9 2f       	mov	r30, r25
     dd8:	e0 61       	ori	r30, 0x10	; 16
     dda:	be 2e       	mov	r11, r30
     ddc:	b4 fe       	sbrs	r11, 4
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x264>
     de0:	fb 2d       	mov	r31, r11
     de2:	f4 60       	ori	r31, 0x04	; 4
     de4:	bf 2e       	mov	r11, r31
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <vfprintf+0x264>
     de8:	34 fe       	sbrs	r3, 4
     dea:	0a c0       	rjmp	.+20     	; 0xe00 <vfprintf+0x26a>
     dec:	29 2f       	mov	r18, r25
     dee:	26 60       	ori	r18, 0x06	; 6
     df0:	b2 2e       	mov	r11, r18
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0x26a>
     df4:	28 e0       	ldi	r18, 0x08	; 8
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <vfprintf+0x26e>
     dfa:	20 e1       	ldi	r18, 0x10	; 16
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x26e>
     e00:	20 e1       	ldi	r18, 0x10	; 16
     e02:	32 e0       	ldi	r19, 0x02	; 2
     e04:	f8 01       	movw	r30, r16
     e06:	b7 fe       	sbrs	r11, 7
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <vfprintf+0x282>
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	0c 5f       	subi	r16, 0xFC	; 252
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x28e>
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 5f       	subi	r16, 0xFE	; 254
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	a3 01       	movw	r20, r6
     e26:	eb d0       	rcall	.+470    	; 0xffe <__ultoa_invert>
     e28:	88 2e       	mov	r8, r24
     e2a:	86 18       	sub	r8, r6
     e2c:	fb 2d       	mov	r31, r11
     e2e:	ff 77       	andi	r31, 0x7F	; 127
     e30:	3f 2e       	mov	r3, r31
     e32:	36 fe       	sbrs	r3, 6
     e34:	0d c0       	rjmp	.+26     	; 0xe50 <vfprintf+0x2ba>
     e36:	23 2d       	mov	r18, r3
     e38:	2e 7f       	andi	r18, 0xFE	; 254
     e3a:	a2 2e       	mov	r10, r18
     e3c:	89 14       	cp	r8, r9
     e3e:	58 f4       	brcc	.+22     	; 0xe56 <vfprintf+0x2c0>
     e40:	34 fe       	sbrs	r3, 4
     e42:	0b c0       	rjmp	.+22     	; 0xe5a <vfprintf+0x2c4>
     e44:	32 fc       	sbrc	r3, 2
     e46:	09 c0       	rjmp	.+18     	; 0xe5a <vfprintf+0x2c4>
     e48:	83 2d       	mov	r24, r3
     e4a:	8e 7e       	andi	r24, 0xEE	; 238
     e4c:	a8 2e       	mov	r10, r24
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <vfprintf+0x2c4>
     e50:	b8 2c       	mov	r11, r8
     e52:	a3 2c       	mov	r10, r3
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <vfprintf+0x2c6>
     e56:	b8 2c       	mov	r11, r8
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <vfprintf+0x2c6>
     e5a:	b9 2c       	mov	r11, r9
     e5c:	a4 fe       	sbrs	r10, 4
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <vfprintf+0x2e8>
     e60:	fe 01       	movw	r30, r28
     e62:	e8 0d       	add	r30, r8
     e64:	f1 1d       	adc	r31, r1
     e66:	80 81       	ld	r24, Z
     e68:	80 33       	cpi	r24, 0x30	; 48
     e6a:	21 f4       	brne	.+8      	; 0xe74 <vfprintf+0x2de>
     e6c:	9a 2d       	mov	r25, r10
     e6e:	99 7e       	andi	r25, 0xE9	; 233
     e70:	a9 2e       	mov	r10, r25
     e72:	09 c0       	rjmp	.+18     	; 0xe86 <vfprintf+0x2f0>
     e74:	a2 fe       	sbrs	r10, 2
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <vfprintf+0x2ee>
     e78:	b3 94       	inc	r11
     e7a:	b3 94       	inc	r11
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <vfprintf+0x2f0>
     e7e:	8a 2d       	mov	r24, r10
     e80:	86 78       	andi	r24, 0x86	; 134
     e82:	09 f0       	breq	.+2      	; 0xe86 <vfprintf+0x2f0>
     e84:	b3 94       	inc	r11
     e86:	a3 fc       	sbrc	r10, 3
     e88:	10 c0       	rjmp	.+32     	; 0xeaa <vfprintf+0x314>
     e8a:	a0 fe       	sbrs	r10, 0
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <vfprintf+0x304>
     e8e:	b2 14       	cp	r11, r2
     e90:	80 f4       	brcc	.+32     	; 0xeb2 <vfprintf+0x31c>
     e92:	28 0c       	add	r2, r8
     e94:	92 2c       	mov	r9, r2
     e96:	9b 18       	sub	r9, r11
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <vfprintf+0x31e>
     e9a:	b2 14       	cp	r11, r2
     e9c:	58 f4       	brcc	.+22     	; 0xeb4 <vfprintf+0x31e>
     e9e:	b6 01       	movw	r22, r12
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	70 d0       	rcall	.+224    	; 0xf86 <fputc>
     ea6:	b3 94       	inc	r11
     ea8:	f8 cf       	rjmp	.-16     	; 0xe9a <vfprintf+0x304>
     eaa:	b2 14       	cp	r11, r2
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <vfprintf+0x31e>
     eae:	2b 18       	sub	r2, r11
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <vfprintf+0x320>
     eb2:	98 2c       	mov	r9, r8
     eb4:	21 2c       	mov	r2, r1
     eb6:	a4 fe       	sbrs	r10, 4
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <vfprintf+0x342>
     eba:	b6 01       	movw	r22, r12
     ebc:	80 e3       	ldi	r24, 0x30	; 48
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	62 d0       	rcall	.+196    	; 0xf86 <fputc>
     ec2:	a2 fe       	sbrs	r10, 2
     ec4:	16 c0       	rjmp	.+44     	; 0xef2 <vfprintf+0x35c>
     ec6:	a1 fc       	sbrc	r10, 1
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <vfprintf+0x33a>
     eca:	88 e7       	ldi	r24, 0x78	; 120
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x33e>
     ed0:	88 e5       	ldi	r24, 0x58	; 88
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	b6 01       	movw	r22, r12
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <vfprintf+0x35a>
     ed8:	8a 2d       	mov	r24, r10
     eda:	86 78       	andi	r24, 0x86	; 134
     edc:	51 f0       	breq	.+20     	; 0xef2 <vfprintf+0x35c>
     ede:	a1 fe       	sbrs	r10, 1
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x350>
     ee2:	8b e2       	ldi	r24, 0x2B	; 43
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <vfprintf+0x352>
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	a7 fc       	sbrc	r10, 7
     eea:	8d e2       	ldi	r24, 0x2D	; 45
     eec:	b6 01       	movw	r22, r12
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	4a d0       	rcall	.+148    	; 0xf86 <fputc>
     ef2:	89 14       	cp	r8, r9
     ef4:	30 f4       	brcc	.+12     	; 0xf02 <vfprintf+0x36c>
     ef6:	b6 01       	movw	r22, r12
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	44 d0       	rcall	.+136    	; 0xf86 <fputc>
     efe:	9a 94       	dec	r9
     f00:	f8 cf       	rjmp	.-16     	; 0xef2 <vfprintf+0x35c>
     f02:	8a 94       	dec	r8
     f04:	f3 01       	movw	r30, r6
     f06:	e8 0d       	add	r30, r8
     f08:	f1 1d       	adc	r31, r1
     f0a:	80 81       	ld	r24, Z
     f0c:	b6 01       	movw	r22, r12
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	3a d0       	rcall	.+116    	; 0xf86 <fputc>
     f12:	81 10       	cpse	r8, r1
     f14:	f6 cf       	rjmp	.-20     	; 0xf02 <vfprintf+0x36c>
     f16:	22 20       	and	r2, r2
     f18:	09 f4       	brne	.+2      	; 0xf1c <vfprintf+0x386>
     f1a:	4e ce       	rjmp	.-868    	; 0xbb8 <vfprintf+0x22>
     f1c:	b6 01       	movw	r22, r12
     f1e:	80 e2       	ldi	r24, 0x20	; 32
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	31 d0       	rcall	.+98     	; 0xf86 <fputc>
     f24:	2a 94       	dec	r2
     f26:	f7 cf       	rjmp	.-18     	; 0xf16 <vfprintf+0x380>
     f28:	f6 01       	movw	r30, r12
     f2a:	86 81       	ldd	r24, Z+6	; 0x06
     f2c:	97 81       	ldd	r25, Z+7	; 0x07
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x39e>
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	2b 96       	adiw	r28, 0x0b	; 11
     f36:	e2 e1       	ldi	r30, 0x12	; 18
     f38:	dc c0       	rjmp	.+440    	; 0x10f2 <__epilogue_restores__>

00000f3a <strnlen_P>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	05 90       	lpm	r0, Z+
     f3e:	61 50       	subi	r22, 0x01	; 1
     f40:	70 40       	sbci	r23, 0x00	; 0
     f42:	01 10       	cpse	r0, r1
     f44:	d8 f7       	brcc	.-10     	; 0xf3c <strnlen_P+0x2>
     f46:	80 95       	com	r24
     f48:	90 95       	com	r25
     f4a:	8e 0f       	add	r24, r30
     f4c:	9f 1f       	adc	r25, r31
     f4e:	08 95       	ret

00000f50 <strnlen>:
     f50:	fc 01       	movw	r30, r24
     f52:	61 50       	subi	r22, 0x01	; 1
     f54:	70 40       	sbci	r23, 0x00	; 0
     f56:	01 90       	ld	r0, Z+
     f58:	01 10       	cpse	r0, r1
     f5a:	d8 f7       	brcc	.-10     	; 0xf52 <strnlen+0x2>
     f5c:	80 95       	com	r24
     f5e:	90 95       	com	r25
     f60:	8e 0f       	add	r24, r30
     f62:	9f 1f       	adc	r25, r31
     f64:	08 95       	ret

00000f66 <strrev>:
     f66:	dc 01       	movw	r26, r24
     f68:	fc 01       	movw	r30, r24
     f6a:	67 2f       	mov	r22, r23
     f6c:	71 91       	ld	r23, Z+
     f6e:	77 23       	and	r23, r23
     f70:	e1 f7       	brne	.-8      	; 0xf6a <strrev+0x4>
     f72:	32 97       	sbiw	r30, 0x02	; 2
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <strrev+0x18>
     f76:	7c 91       	ld	r23, X
     f78:	6d 93       	st	X+, r22
     f7a:	70 83       	st	Z, r23
     f7c:	62 91       	ld	r22, -Z
     f7e:	ae 17       	cp	r26, r30
     f80:	bf 07       	cpc	r27, r31
     f82:	c8 f3       	brcs	.-14     	; 0xf76 <strrev+0x10>
     f84:	08 95       	ret

00000f86 <fputc>:
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	fb 01       	movw	r30, r22
     f90:	23 81       	ldd	r18, Z+3	; 0x03
     f92:	21 fd       	sbrc	r18, 1
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <fputc+0x16>
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	2c c0       	rjmp	.+88     	; 0xff4 <fputc+0x6e>
     f9c:	22 ff       	sbrs	r18, 2
     f9e:	16 c0       	rjmp	.+44     	; 0xfcc <fputc+0x46>
     fa0:	46 81       	ldd	r20, Z+6	; 0x06
     fa2:	57 81       	ldd	r21, Z+7	; 0x07
     fa4:	24 81       	ldd	r18, Z+4	; 0x04
     fa6:	35 81       	ldd	r19, Z+5	; 0x05
     fa8:	42 17       	cp	r20, r18
     faa:	53 07       	cpc	r21, r19
     fac:	44 f4       	brge	.+16     	; 0xfbe <fputc+0x38>
     fae:	a0 81       	ld	r26, Z
     fb0:	b1 81       	ldd	r27, Z+1	; 0x01
     fb2:	9d 01       	movw	r18, r26
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	31 83       	std	Z+1, r19	; 0x01
     fba:	20 83       	st	Z, r18
     fbc:	8c 93       	st	X, r24
     fbe:	26 81       	ldd	r18, Z+6	; 0x06
     fc0:	37 81       	ldd	r19, Z+7	; 0x07
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	37 83       	std	Z+7, r19	; 0x07
     fc8:	26 83       	std	Z+6, r18	; 0x06
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <fputc+0x6e>
     fcc:	8b 01       	movw	r16, r22
     fce:	ec 01       	movw	r28, r24
     fd0:	fb 01       	movw	r30, r22
     fd2:	00 84       	ldd	r0, Z+8	; 0x08
     fd4:	f1 85       	ldd	r31, Z+9	; 0x09
     fd6:	e0 2d       	mov	r30, r0
     fd8:	09 95       	icall
     fda:	89 2b       	or	r24, r25
     fdc:	e1 f6       	brne	.-72     	; 0xf96 <fputc+0x10>
     fde:	d8 01       	movw	r26, r16
     fe0:	16 96       	adiw	r26, 0x06	; 6
     fe2:	8d 91       	ld	r24, X+
     fe4:	9c 91       	ld	r25, X
     fe6:	17 97       	sbiw	r26, 0x07	; 7
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	17 96       	adiw	r26, 0x07	; 7
     fec:	9c 93       	st	X, r25
     fee:	8e 93       	st	-X, r24
     ff0:	16 97       	sbiw	r26, 0x06	; 6
     ff2:	ce 01       	movw	r24, r28
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <__ultoa_invert>:
     ffe:	fa 01       	movw	r30, r20
    1000:	aa 27       	eor	r26, r26
    1002:	28 30       	cpi	r18, 0x08	; 8
    1004:	51 f1       	breq	.+84     	; 0x105a <__ultoa_invert+0x5c>
    1006:	20 31       	cpi	r18, 0x10	; 16
    1008:	81 f1       	breq	.+96     	; 0x106a <__ultoa_invert+0x6c>
    100a:	e8 94       	clt
    100c:	6f 93       	push	r22
    100e:	6e 7f       	andi	r22, 0xFE	; 254
    1010:	6e 5f       	subi	r22, 0xFE	; 254
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	af 4f       	sbci	r26, 0xFF	; 255
    101a:	b1 e0       	ldi	r27, 0x01	; 1
    101c:	3e d0       	rcall	.+124    	; 0x109a <__ultoa_invert+0x9c>
    101e:	b4 e0       	ldi	r27, 0x04	; 4
    1020:	3c d0       	rcall	.+120    	; 0x109a <__ultoa_invert+0x9c>
    1022:	67 0f       	add	r22, r23
    1024:	78 1f       	adc	r23, r24
    1026:	89 1f       	adc	r24, r25
    1028:	9a 1f       	adc	r25, r26
    102a:	a1 1d       	adc	r26, r1
    102c:	68 0f       	add	r22, r24
    102e:	79 1f       	adc	r23, r25
    1030:	8a 1f       	adc	r24, r26
    1032:	91 1d       	adc	r25, r1
    1034:	a1 1d       	adc	r26, r1
    1036:	6a 0f       	add	r22, r26
    1038:	71 1d       	adc	r23, r1
    103a:	81 1d       	adc	r24, r1
    103c:	91 1d       	adc	r25, r1
    103e:	a1 1d       	adc	r26, r1
    1040:	20 d0       	rcall	.+64     	; 0x1082 <__ultoa_invert+0x84>
    1042:	09 f4       	brne	.+2      	; 0x1046 <__ultoa_invert+0x48>
    1044:	68 94       	set
    1046:	3f 91       	pop	r19
    1048:	2a e0       	ldi	r18, 0x0A	; 10
    104a:	26 9f       	mul	r18, r22
    104c:	11 24       	eor	r1, r1
    104e:	30 19       	sub	r19, r0
    1050:	30 5d       	subi	r19, 0xD0	; 208
    1052:	31 93       	st	Z+, r19
    1054:	de f6       	brtc	.-74     	; 0x100c <__ultoa_invert+0xe>
    1056:	cf 01       	movw	r24, r30
    1058:	08 95       	ret
    105a:	46 2f       	mov	r20, r22
    105c:	47 70       	andi	r20, 0x07	; 7
    105e:	40 5d       	subi	r20, 0xD0	; 208
    1060:	41 93       	st	Z+, r20
    1062:	b3 e0       	ldi	r27, 0x03	; 3
    1064:	0f d0       	rcall	.+30     	; 0x1084 <__ultoa_invert+0x86>
    1066:	c9 f7       	brne	.-14     	; 0x105a <__ultoa_invert+0x5c>
    1068:	f6 cf       	rjmp	.-20     	; 0x1056 <__ultoa_invert+0x58>
    106a:	46 2f       	mov	r20, r22
    106c:	4f 70       	andi	r20, 0x0F	; 15
    106e:	40 5d       	subi	r20, 0xD0	; 208
    1070:	4a 33       	cpi	r20, 0x3A	; 58
    1072:	18 f0       	brcs	.+6      	; 0x107a <__ultoa_invert+0x7c>
    1074:	49 5d       	subi	r20, 0xD9	; 217
    1076:	31 fd       	sbrc	r19, 1
    1078:	40 52       	subi	r20, 0x20	; 32
    107a:	41 93       	st	Z+, r20
    107c:	02 d0       	rcall	.+4      	; 0x1082 <__ultoa_invert+0x84>
    107e:	a9 f7       	brne	.-22     	; 0x106a <__ultoa_invert+0x6c>
    1080:	ea cf       	rjmp	.-44     	; 0x1056 <__ultoa_invert+0x58>
    1082:	b4 e0       	ldi	r27, 0x04	; 4
    1084:	a6 95       	lsr	r26
    1086:	97 95       	ror	r25
    1088:	87 95       	ror	r24
    108a:	77 95       	ror	r23
    108c:	67 95       	ror	r22
    108e:	ba 95       	dec	r27
    1090:	c9 f7       	brne	.-14     	; 0x1084 <__ultoa_invert+0x86>
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 05       	cpc	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	08 95       	ret
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	0a 2e       	mov	r0, r26
    10a0:	06 94       	lsr	r0
    10a2:	57 95       	ror	r21
    10a4:	47 95       	ror	r20
    10a6:	37 95       	ror	r19
    10a8:	27 95       	ror	r18
    10aa:	ba 95       	dec	r27
    10ac:	c9 f7       	brne	.-14     	; 0x10a0 <__ultoa_invert+0xa2>
    10ae:	62 0f       	add	r22, r18
    10b0:	73 1f       	adc	r23, r19
    10b2:	84 1f       	adc	r24, r20
    10b4:	95 1f       	adc	r25, r21
    10b6:	a0 1d       	adc	r26, r0
    10b8:	08 95       	ret

000010ba <__prologue_saves__>:
    10ba:	2f 92       	push	r2
    10bc:	3f 92       	push	r3
    10be:	4f 92       	push	r4
    10c0:	5f 92       	push	r5
    10c2:	6f 92       	push	r6
    10c4:	7f 92       	push	r7
    10c6:	8f 92       	push	r8
    10c8:	9f 92       	push	r9
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	ca 1b       	sub	r28, r26
    10e4:	db 0b       	sbc	r29, r27
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	09 94       	ijmp

000010f2 <__epilogue_restores__>:
    10f2:	2a 88       	ldd	r2, Y+18	; 0x12
    10f4:	39 88       	ldd	r3, Y+17	; 0x11
    10f6:	48 88       	ldd	r4, Y+16	; 0x10
    10f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    10fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    10fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1100:	9b 84       	ldd	r9, Y+11	; 0x0b
    1102:	aa 84       	ldd	r10, Y+10	; 0x0a
    1104:	b9 84       	ldd	r11, Y+9	; 0x09
    1106:	c8 84       	ldd	r12, Y+8	; 0x08
    1108:	df 80       	ldd	r13, Y+7	; 0x07
    110a:	ee 80       	ldd	r14, Y+6	; 0x06
    110c:	fd 80       	ldd	r15, Y+5	; 0x05
    110e:	0c 81       	ldd	r16, Y+4	; 0x04
    1110:	1b 81       	ldd	r17, Y+3	; 0x03
    1112:	aa 81       	ldd	r26, Y+2	; 0x02
    1114:	b9 81       	ldd	r27, Y+1	; 0x01
    1116:	ce 0f       	add	r28, r30
    1118:	d1 1d       	adc	r29, r1
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	ed 01       	movw	r28, r26
    1126:	08 95       	ret

00001128 <_exit>:
    1128:	f8 94       	cli

0000112a <__stop_program>:
    112a:	ff cf       	rjmp	.-2      	; 0x112a <__stop_program>
