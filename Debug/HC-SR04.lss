
HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001170  00001204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080014e  0080014e  00001252  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b1  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b61  00000000  00000000  00002ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147b  00000000  00000000  00003612  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00004a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011e6d  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d43  00000000  00000000  00016bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00017904  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000042d9  00000000  00000000  00017a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	88 c0       	rjmp	.+272    	; 0x116 <__vector_1>
       6:	00 00       	nop
       8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__vector_6>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c0       	rjmp	.+102    	; 0xa0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e7       	ldi	r30, 0x70	; 112
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 34       	cpi	r26, 0x4E	; 78
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e4       	ldi	r26, 0x4E	; 78
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 35       	cpi	r26, 0x51	; 81
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	03 d0       	rcall	.+6      	; 0xa2 <main>
      9c:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <main>:
volatile uint16_t pulse;
volatile uint8_t iIRC = 0;
volatile int f_wdt = 1;

int main(void)
{
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	/* Initialization */
	
	initLCD();
      b0:	3b d2       	rcall	.+1142   	; 0x528 <initLCD>
	uint8_t distance = 0;
	uint8_t diagnostics = 0;
      b2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t iteration = 0;
	
	while( f_wdt == 1 )
      b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
      b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
      bc:	01 97       	sbiw	r24, 0x01	; 1
      be:	19 f5       	brne	.+70     	; 0x106 <main+0x64>
      c0:	10 e0       	ldi	r17, 0x00	; 0
	{
		iteration += 1;
		/* Ultrasonic sensor */
		init_ultrasonic();
      c2:	1f 5f       	subi	r17, 0xFF	; 255
      c4:	ac d0       	rcall	.+344    	; 0x21e <init_ultrasonic>
		distance = getDistance_main(&diagnostics);
      c6:	ce 01       	movw	r24, r28
      c8:	01 96       	adiw	r24, 0x01	; 1
      ca:	c1 d0       	rcall	.+386    	; 0x24e <getDistance_main>
      cc:	08 2f       	mov	r16, r24
		
		/* Display measurements */
		displayLCD_main(1, "Iteration ", iteration, "NONE");
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	41 2f       	mov	r20, r17
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	71 e0       	ldi	r23, 0x01	; 1
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	71 d3       	rcall	.+1762   	; 0x7be <displayLCD_main>
		displayLCD_main(2, "Distance = ", distance, " cm");
      dc:	22 e1       	ldi	r18, 0x12	; 18
      de:	31 e0       	ldi	r19, 0x01	; 1
      e0:	40 2f       	mov	r20, r16
      e2:	66 e1       	ldi	r22, 0x16	; 22
      e4:	71 e0       	ldi	r23, 0x01	; 1
      e6:	82 e0       	ldi	r24, 0x02	; 2
      e8:	6a d3       	rcall	.+1748   	; 0x7be <displayLCD_main>
		displayLCD_main(3, "DTC = ", diagnostics, "NONE");
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	31 e0       	ldi	r19, 0x01	; 1
      ee:	49 81       	ldd	r20, Y+1	; 0x01
      f0:	62 e2       	ldi	r22, 0x22	; 34
      f2:	71 e0       	ldi	r23, 0x01	; 1
      f4:	83 e0       	ldi	r24, 0x03	; 3
		
		/* Power management - processor sleep for energy reduction */
		PwrMngmnt_main();
      f6:	63 d3       	rcall	.+1734   	; 0x7be <displayLCD_main>
      f8:	82 d0       	rcall	.+260    	; 0x1fe <PwrMngmnt_main>
	initLCD();
	uint8_t distance = 0;
	uint8_t diagnostics = 0;
	uint8_t iteration = 0;
	
	while( f_wdt == 1 )
      fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
      fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     102:	01 97       	sbiw	r24, 0x01	; 1
     104:	f1 f2       	breq	.-68     	; 0xc2 <main+0x20>
		
		/* Power management - processor sleep for energy reduction */
		PwrMngmnt_main();
		//_delay_ms(500);
	}
}
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0f 90       	pop	r0
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <__vector_1>:
Inputs:		none
Outputs:	internal timer
Description:calculates elapsed time of a measurement
******************************************************************** */
ISR(INT0_vect)
{
     116:	1f 92       	push	r1
     118:	0f 92       	push	r0
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
     120:	8f 93       	push	r24
     122:	9f 93       	push	r25
     124:	ef 93       	push	r30
     126:	ff 93       	push	r31
	switch (iIRC)
     128:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     12c:	88 23       	and	r24, r24
     12e:	19 f0       	breq	.+6      	; 0x136 <__vector_1+0x20>
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	51 f0       	breq	.+20     	; 0x148 <__vector_1+0x32>
     134:	1a c0       	rjmp	.+52     	; 0x16a <__vector_1+0x54>
	{
		case 0: //when logic changes from LOW to HIGH
		{
			iIRC = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
			TCCR1B |= (1<<CS11);
     13c:	e1 e8       	ldi	r30, 0x81	; 129
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	82 60       	ori	r24, 0x02	; 2
     144:	80 83       	st	Z, r24
			break;
     146:	11 c0       	rjmp	.+34     	; 0x16a <__vector_1+0x54>
		}
		case 1:
		{
			/* reset iIRC */
			iIRC = 0;
     148:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
			/* stop counter */
			TCCR1B &= ~(1<<CS11);
     14c:	e1 e8       	ldi	r30, 0x81	; 129
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	8d 7f       	andi	r24, 0xFD	; 253
     154:	80 83       	st	Z, r24
			/* assign counter value to pulse */
			pulse = TCNT1;
     156:	e4 e8       	ldi	r30, 0x84	; 132
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	91 81       	ldd	r25, Z+1	; 0x01
     15e:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <pulse+0x1>
     162:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <pulse>
			/* reset counter */
			TCNT1=0;
     166:	11 82       	std	Z+1, r1	; 0x01
     168:	10 82       	st	Z, r1
			break;
		}
	}
}
     16a:	ff 91       	pop	r31
     16c:	ef 91       	pop	r30
     16e:	9f 91       	pop	r25
     170:	8f 91       	pop	r24
     172:	0f 90       	pop	r0
     174:	0f be       	out	0x3f, r0	; 63
     176:	0f 90       	pop	r0
     178:	1f 90       	pop	r1
     17a:	18 95       	reti

0000017c <__vector_6>:
Inputs:		none
Outputs:	f_wdt
Description:wakes up processor after internal timer limit reached (8 sec)
******************************************************************** */
ISR(WDT_vect)
{
     17c:	1f 92       	push	r1
     17e:	0f 92       	push	r0
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	0f 92       	push	r0
     184:	11 24       	eor	r1, r1
     186:	8f 93       	push	r24
     188:	9f 93       	push	r25
	/* set the flag. */
	if(f_wdt == 0)
     18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     192:	89 2b       	or	r24, r25
     194:	31 f4       	brne	.+12     	; 0x1a2 <__vector_6+0x26>
	{
		f_wdt = 1;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	//else there is an error -> flag was not cleared
}
     1a2:	9f 91       	pop	r25
     1a4:	8f 91       	pop	r24
     1a6:	0f 90       	pop	r0
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	0f 90       	pop	r0
     1ac:	1f 90       	pop	r1
     1ae:	18 95       	reti

000001b0 <PwrMngmnt_init>:
Description:initialization of power management / watchdog
******************************************************************** */
void PwrMngmnt_init(void)
{
	/* Disable global interrupts */
	cli(); 
     1b0:	f8 94       	cli
	
	/* Clear the reset flag. */
	MCUSR &= ~(1<<WDRF); // WDRF is set if a WDG system reset occurs
     1b2:	84 b7       	in	r24, 0x34	; 52
     1b4:	87 7f       	andi	r24, 0xF7	; 247
     1b6:	84 bf       	out	0x34, r24	; 52
  
	/* In order to change WDE or the prescaler, we need to
	* set WDCE (This will allow updates for 4 clock cycles).
	*/
	WDTCSR |= (1<<WDCE) | (1<<WDE);
     1b8:	e0 e6       	ldi	r30, 0x60	; 96
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	88 61       	ori	r24, 0x18	; 24
     1c0:	80 83       	st	Z, r24

	/* set new watchdog timeout prescaler value */
	//WDTCSR = 1<<WDP0 | 1<<WDP3; /* 8.0 seconds */
	WDTCSR = 1<<WDP3; /* 4.0 seconds */
     1c2:	80 e2       	ldi	r24, 0x20	; 32
     1c4:	80 83       	st	Z, r24
  
	/* Enable global interrupts */
	sei();
     1c6:	78 94       	sei
	
	/* Enable watchdog interrupt */
	WDTCSR |= (1 << WDIE);
     1c8:	80 81       	ld	r24, Z
     1ca:	80 64       	ori	r24, 0x40	; 64
     1cc:	80 83       	st	Z, r24
     1ce:	08 95       	ret

000001d0 <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     1d0:	83 b7       	in	r24, 0x33	; 51
     1d2:	81 7f       	andi	r24, 0xF1	; 241
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
     1d8:	83 b7       	in	r24, 0x33	; 51
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
     1de:	83 b7       	in	r24, 0x33	; 51
     1e0:	81 60       	ori	r24, 0x01	; 1
     1e2:	83 bf       	out	0x33, r24	; 51
     1e4:	88 95       	sleep
     1e6:	83 b7       	in	r24, 0x33	; 51
     1e8:	8e 7f       	andi	r24, 0xFE	; 254
     1ea:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
     1ec:	83 b7       	in	r24, 0x33	; 51
     1ee:	8e 7f       	andi	r24, 0xFE	; 254
     1f0:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
     1f2:	e4 e6       	ldi	r30, 0x64	; 100
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	80 71       	andi	r24, 0x10	; 16
     1fa:	80 83       	st	Z, r24
     1fc:	08 95       	ret

000001fe <PwrMngmnt_main>:
Description:main function of power management
******************************************************************** */
void PwrMngmnt_main(void)
{
	/* Initialize watchdog */
	PwrMngmnt_init();
     1fe:	d8 df       	rcall	.-80     	; 0x1b0 <PwrMngmnt_init>

	/* Re-enter sleep mode. */
	enterSleep();
     200:	e7 cf       	rjmp	.-50     	; 0x1d0 <enterSleep>
     202:	08 95       	ret

00000204 <configUltrasonicPorts>:
     204:	52 98       	cbi	0x0a, 2	; 10
******************************************************************** */
void configUltrasonicPorts()
{
	/* ECHO - input - port ECHO_pin */
	U_DDR_echo &= ~(1<<U_ECHO_pin);
	U_Port_echo &= ~(1<<U_ECHO_pin);
     206:	5a 98       	cbi	0x0b, 2	; 11
	
	/* TRIG - output - port TRIG_pin */
	U_DDR_trig |= (1<<U_TRIG_pin);
     208:	20 9a       	sbi	0x04, 0	; 4
	U_Port_trig &= ~(1<<U_TRIG_pin); 
     20a:	28 98       	cbi	0x05, 0	; 5
     20c:	08 95       	ret

0000020e <enable_interrupts>:
Outputs:	none
Description:configures the interrupts and enables the global interrupts
******************************************************************** */
 void enable_interrupts()
 {
	EIMSK |= (1<<INT0);
     20e:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00);
     210:	e9 e6       	ldi	r30, 0x69	; 105
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	81 60       	ori	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
	sei();
     21a:	78 94       	sei
     21c:	08 95       	ret

0000021e <init_ultrasonic>:
Outputs:	none
Description:main function for the ultrasonic initialization
******************************************************************** */
void init_ultrasonic(void)
{
	configUltrasonicPorts();
     21e:	f2 df       	rcall	.-28     	; 0x204 <configUltrasonicPorts>
	enable_interrupts();
     220:	f6 cf       	rjmp	.-20     	; 0x20e <enable_interrupts>
     222:	08 95       	ret

00000224 <triggerUltrasonic>:
     224:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	89 ef       	ldi	r24, 0xF9	; 249
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	80 40       	sbci	r24, 0x00	; 0
     230:	90 40       	sbci	r25, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <triggerUltrasonic+0x8>
     234:	00 c0       	rjmp	.+0      	; 0x236 <triggerUltrasonic+0x12>
     236:	00 00       	nop
		/* trigger ultrasonic */
		U_Port_trig |= (1<<U_TRIG_pin);
		_delay_ms(20);

		/* stop trigger ultrasonic */
		U_Port_trig &= ~(1<<U_TRIG_pin);
     238:	28 98       	cbi	0x05, 0	; 5
     23a:	2f ef       	ldi	r18, 0xFF	; 255
     23c:	89 ef       	ldi	r24, 0xF9	; 249
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	21 50       	subi	r18, 0x01	; 1
     242:	80 40       	sbci	r24, 0x00	; 0
     244:	90 40       	sbci	r25, 0x00	; 0
     246:	e1 f7       	brne	.-8      	; 0x240 <triggerUltrasonic+0x1c>
     248:	00 c0       	rjmp	.+0      	; 0x24a <triggerUltrasonic+0x26>
     24a:	00 00       	nop
     24c:	08 95       	ret

0000024e <getDistance_main>:
Inputs:		pointer to diagnosis
Outputs:	distance measurements
Description:triggers measurements and plausibility checks
******************************************************************** */
 uint8_t getDistance_main(uint8_t * diag)
 {
     24e:	2f 92       	push	r2
     250:	3f 92       	push	r3
     252:	4f 92       	push	r4
     254:	5f 92       	push	r5
     256:	6f 92       	push	r6
     258:	7f 92       	push	r7
     25a:	8f 92       	push	r8
     25c:	9f 92       	push	r9
     25e:	af 92       	push	r10
     260:	bf 92       	push	r11
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	8c 01       	movw	r16, r24
     274:	c4 e0       	ldi	r28, 0x04	; 4
		{
			* diag = 15; // DTC: Low sensor range
		}		
		else if ( abs(distance_array[0] - distance_array[1]) > SNSR_TOLERANCE ) /* Check measurements tolerance */
		{	
			* diag = 12;		// DTC: Imprecise meas.
     276:	0f 2e       	mov	r0, r31
     278:	fc e0       	ldi	r31, 0x0C	; 12
     27a:	2f 2e       	mov	r2, r31
     27c:	f0 2d       	mov	r31, r0
		{
			* diag = 13; // DTC: Defect sensor 
		}
		else if ( dist <= 20 ) // Too low range for the sensor (in case of sensor AJ-SR04M)
		{
			* diag = 15; // DTC: Low sensor range
     27e:	df e0       	ldi	r29, 0x0F	; 15
		dist = sum/2;
		distance = dist;
		
		if ( dist <= 0 ) // Check if sensor defect or not connected (in which case it shows 0)
		{
			* diag = 13; // DTC: Defect sensor 
     280:	0f 2e       	mov	r0, r31
     282:	fd e0       	ldi	r31, 0x0D	; 13
     284:	3f 2e       	mov	r3, r31
     286:	f0 2d       	mov	r31, r0
	/* re-measurements for confirmation of unexpected results */
	for (uint8_t i = 0; i <= ULTRAS_ITER_MAX; i++)
	{
		/* Reset before measurement */
		sum = 0;
		* diag = 0;
     288:	f8 01       	movw	r30, r16
     28a:	10 82       	st	Z, r1
		
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
     28c:	cb df       	rcall	.-106    	; 0x224 <triggerUltrasonic>
float getDistance()
{
	/* factor to be multiplied by pulse
	f = speedOfSound (343 m/s) * 100 * 8 (prescale factor) / 2 (way-back) / F_CPU;  ( ~0.008575 ); */

	return pulse * 0.008575;
     28e:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <pulse>
     292:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <pulse+0x1>
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	2d d3       	rcall	.+1626   	; 0x8f6 <__floatunsisf>
     29c:	28 e2       	ldi	r18, 0x28	; 40
     29e:	3e e7       	ldi	r19, 0x7E	; 126
     2a0:	4c e0       	ldi	r20, 0x0C	; 12
     2a2:	5c e3       	ldi	r21, 0x3C	; 60
     2a4:	de d3       	rcall	.+1980   	; 0xa62 <__mulsf3>
     2a6:	4b 01       	movw	r8, r22
     2a8:	5c 01       	movw	r10, r24
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
			distance_array[j] = getDistance();
			sum +=distance_array[j];
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	a9 01       	movw	r20, r18
     2b0:	89 d2       	rcall	.+1298   	; 0x7c4 <__addsf3>
     2b2:	6b 01       	movw	r12, r22
     2b4:	7c 01       	movw	r14, r24
     2b6:	ff ef       	ldi	r31, 0xFF	; 255
     2b8:	21 ee       	ldi	r18, 0xE1	; 225
     2ba:	84 e0       	ldi	r24, 0x04	; 4
     2bc:	f1 50       	subi	r31, 0x01	; 1
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	80 40       	sbci	r24, 0x00	; 0
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <getDistance_main+0x6e>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <getDistance_main+0x78>
		* diag = 0;
		
		/* Execute two measurements and calculate mean value for redundancy */
		for (uint8_t j = 0; j < 2; j++)
		{
			triggerUltrasonic();
     2c6:	00 00       	nop
     2c8:	ad df       	rcall	.-166    	; 0x224 <triggerUltrasonic>
float getDistance()
{
	/* factor to be multiplied by pulse
	f = speedOfSound (343 m/s) * 100 * 8 (prescale factor) / 2 (way-back) / F_CPU;  ( ~0.008575 ); */

	return pulse * 0.008575;
     2ca:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <pulse>
     2ce:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <pulse+0x1>
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0f d3       	rcall	.+1566   	; 0x8f6 <__floatunsisf>
     2d8:	28 e2       	ldi	r18, 0x28	; 40
     2da:	3e e7       	ldi	r19, 0x7E	; 126
     2dc:	4c e0       	ldi	r20, 0x0C	; 12
     2de:	5c e3       	ldi	r21, 0x3C	; 60
     2e0:	c0 d3       	rcall	.+1920   	; 0xa62 <__mulsf3>
     2e2:	2b 01       	movw	r4, r22
     2e4:	3c 01       	movw	r6, r24
     2e6:	9f ef       	ldi	r25, 0xFF	; 255
     2e8:	e1 ee       	ldi	r30, 0xE1	; 225
     2ea:	f4 e0       	ldi	r31, 0x04	; 4
     2ec:	91 50       	subi	r25, 0x01	; 1
     2ee:	e0 40       	sbci	r30, 0x00	; 0
     2f0:	f0 40       	sbci	r31, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <getDistance_main+0x9e>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <getDistance_main+0xa8>
			triggerUltrasonic();
			distance_array[j] = getDistance();
			sum +=distance_array[j];
			_delay_ms(100);
		}
		dist = sum/2;
     2f6:	00 00       	nop
     2f8:	a7 01       	movw	r20, r14
     2fa:	96 01       	movw	r18, r12
     2fc:	c3 01       	movw	r24, r6
     2fe:	b2 01       	movw	r22, r4
     300:	61 d2       	rcall	.+1218   	; 0x7c4 <__addsf3>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	5f e3       	ldi	r21, 0x3F	; 63
     30a:	ab d3       	rcall	.+1878   	; 0xa62 <__mulsf3>
     30c:	6b 01       	movw	r12, r22
		distance = dist;
		
		if ( dist <= 0 ) // Check if sensor defect or not connected (in which case it shows 0)
     30e:	7c 01       	movw	r14, r24
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	a9 01       	movw	r20, r18
     316:	ba d2       	rcall	.+1396   	; 0x88c <__cmpsf2>
     318:	18 16       	cp	r1, r24
		{
			* diag = 13; // DTC: Defect sensor 
     31a:	1c f0       	brlt	.+6      	; 0x322 <getDistance_main+0xd4>
     31c:	f8 01       	movw	r30, r16
     31e:	30 82       	st	Z, r3
		}
		else if ( dist <= 20 ) // Too low range for the sensor (in case of sensor AJ-SR04M)
     320:	2b c0       	rjmp	.+86     	; 0x378 <getDistance_main+0x12a>
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 ea       	ldi	r20, 0xA0	; 160
     328:	51 e4       	ldi	r21, 0x41	; 65
     32a:	c7 01       	movw	r24, r14
     32c:	b6 01       	movw	r22, r12
     32e:	ae d2       	rcall	.+1372   	; 0x88c <__cmpsf2>
		{
			* diag = 15; // DTC: Low sensor range
     330:	18 16       	cp	r1, r24
     332:	1c f0       	brlt	.+6      	; 0x33a <getDistance_main+0xec>
     334:	f8 01       	movw	r30, r16
		}		
		else if ( abs(distance_array[0] - distance_array[1]) > SNSR_TOLERANCE ) /* Check measurements tolerance */
     336:	d0 83       	st	Z, r29
     338:	1f c0       	rjmp	.+62     	; 0x378 <getDistance_main+0x12a>
     33a:	a3 01       	movw	r20, r6
     33c:	92 01       	movw	r18, r4
     33e:	c5 01       	movw	r24, r10
     340:	b4 01       	movw	r22, r8
     342:	3f d2       	rcall	.+1150   	; 0x7c2 <__subsf3>
     344:	a7 d2       	rcall	.+1358   	; 0x894 <__fixsfsi>
     346:	9b 01       	movw	r18, r22
     348:	77 23       	and	r23, r23
     34a:	24 f4       	brge	.+8      	; 0x354 <getDistance_main+0x106>
     34c:	22 27       	eor	r18, r18
     34e:	33 27       	eor	r19, r19
     350:	26 1b       	sub	r18, r22
     352:	37 0b       	sbc	r19, r23
     354:	26 30       	cpi	r18, 0x06	; 6
     356:	31 05       	cpc	r19, r1
		{	
			* diag = 12;		// DTC: Imprecise meas.
     358:	1c f0       	brlt	.+6      	; 0x360 <getDistance_main+0x112>
     35a:	f8 01       	movw	r30, r16
     35c:	20 82       	st	Z, r2
		}
		else if ( dist >= 250 ) // distance too high
     35e:	0c c0       	rjmp	.+24     	; 0x378 <getDistance_main+0x12a>
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	4a e7       	ldi	r20, 0x7A	; 122
     366:	53 e4       	ldi	r21, 0x43	; 67
     368:	c7 01       	movw	r24, r14
     36a:	b6 01       	movw	r22, r12
     36c:	76 d3       	rcall	.+1772   	; 0xa5a <__gesf2>
     36e:	88 23       	and	r24, r24
		{
			* diag = 14; // DTC: Sensor out of range
     370:	34 f0       	brlt	.+12     	; 0x37e <getDistance_main+0x130>
     372:	2e e0       	ldi	r18, 0x0E	; 14
     374:	f8 01       	movw	r30, r16
     376:	20 83       	st	Z, r18
	float dist = 0;
	float distance_array[2];
	float sum = 0;
		
	/* re-measurements for confirmation of unexpected results */
	for (uint8_t i = 0; i <= ULTRAS_ITER_MAX; i++)
     378:	c1 50       	subi	r28, 0x01	; 1
     37a:	09 f0       	breq	.+2      	; 0x37e <getDistance_main+0x130>
		{ 
			break;
		}
	}

	return distance;
     37c:	85 cf       	rjmp	.-246    	; 0x288 <getDistance_main+0x3a>
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	8d d2       	rcall	.+1306   	; 0x89e <__fixunssfsi>
     384:	86 2f       	mov	r24, r22
 }
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	bf 90       	pop	r11
     398:	af 90       	pop	r10
     39a:	9f 90       	pop	r9
     39c:	8f 90       	pop	r8
     39e:	7f 90       	pop	r7
     3a0:	6f 90       	pop	r6
     3a2:	5f 90       	pop	r5
     3a4:	4f 90       	pop	r4
     3a6:	3f 90       	pop	r3
     3a8:	2f 90       	pop	r2
     3aa:	08 95       	ret

000003ac <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
     3ac:	8a b1       	in	r24, 0x0a	; 10
     3ae:	80 6f       	ori	r24, 0xF0	; 240
     3b0:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
     3b2:	8a b1       	in	r24, 0x0a	; 10
     3b4:	8b 60       	ori	r24, 0x0B	; 11
     3b6:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
     3b8:	20 9a       	sbi	0x04, 0	; 4
     3ba:	08 95       	ret

000003bc <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <lcd_write_4+0x6>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <lcd_write_4+0x8>
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
     3c8:	19 82       	std	Y+1, r1	; 0x01
     3ca:	1a 82       	std	Y+2, r1	; 0x02
     3cc:	1b 82       	std	Y+3, r1	; 0x03
     3ce:	1c 82       	std	Y+4, r1	; 0x04
     3d0:	fe 01       	movw	r30, r28
     3d2:	31 96       	adiw	r30, 0x01	; 1
     3d4:	27 e0       	ldi	r18, 0x07	; 7
     3d6:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     3d8:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
     3da:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     3dc:	ac 01       	movw	r20, r24
     3de:	02 2e       	mov	r0, r18
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <lcd_write_4+0x2a>
     3e2:	55 95       	asr	r21
     3e4:	47 95       	ror	r20
     3e6:	0a 94       	dec	r0
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <lcd_write_4+0x26>
     3ea:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
     3ec:	60 83       	st	Z, r22
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	31 09       	sbc	r19, r1
     3f2:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
     3f4:	23 30       	cpi	r18, 0x03	; 3
     3f6:	31 05       	cpc	r19, r1
     3f8:	89 f7       	brne	.-30     	; 0x3dc <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
     3fa:	8b b1       	in	r24, 0x0b	; 11
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
     400:	2b b1       	in	r18, 0x0b	; 11
     402:	49 81       	ldd	r20, Y+1	; 0x01
     404:	30 e8       	ldi	r19, 0x80	; 128
     406:	43 9f       	mul	r20, r19
     408:	c0 01       	movw	r24, r0
     40a:	11 24       	eor	r1, r1
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	30 e4       	ldi	r19, 0x40	; 64
     410:	93 9f       	mul	r25, r19
     412:	a0 01       	movw	r20, r0
     414:	11 24       	eor	r1, r1
     416:	48 2b       	or	r20, r24
     418:	42 2b       	or	r20, r18
     41a:	9b 81       	ldd	r25, Y+3	; 0x03
     41c:	80 e2       	ldi	r24, 0x20	; 32
     41e:	98 9f       	mul	r25, r24
     420:	90 01       	movw	r18, r0
     422:	11 24       	eor	r1, r1
     424:	24 2b       	or	r18, r20
     426:	9c 81       	ldd	r25, Y+4	; 0x04
     428:	30 e1       	ldi	r19, 0x10	; 16
     42a:	93 9f       	mul	r25, r19
     42c:	c0 01       	movw	r24, r0
     42e:	11 24       	eor	r1, r1
     430:	82 2b       	or	r24, r18
     432:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
     434:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     436:	85 e0       	ldi	r24, 0x05	; 5
     438:	8a 95       	dec	r24
     43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43c:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
     43e:	5b 98       	cbi	0x0b, 3	; 11
     440:	35 e0       	ldi	r19, 0x05	; 5
     442:	3a 95       	dec	r19
     444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     446:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
     456:	cf 93       	push	r28
     458:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     45a:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
     45c:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     45e:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
     460:	ad df       	rcall	.-166    	; 0x3bc <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
     462:	8c 2f       	mov	r24, r28
     464:	82 95       	swap	r24
     466:	80 7f       	andi	r24, 0xF0	; 240
     468:	a9 df       	rcall	.-174    	; 0x3bc <lcd_write_4>
}
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
     46e:	cf 93       	push	r28
     470:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     472:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
     474:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     476:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
     478:	a1 df       	rcall	.-190    	; 0x3bc <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
     47a:	8c 2f       	mov	r24, r28
     47c:	82 95       	swap	r24
     47e:	80 7f       	andi	r24, 0xF0	; 240
     480:	9d df       	rcall	.-198    	; 0x3bc <lcd_write_4>
}
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
     486:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
     488:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
     48a:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     48c:	5b 9a       	sbi	0x0b, 3	; 11
     48e:	85 e0       	ldi	r24, 0x05	; 5
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_check_BF_4+0xa>
     494:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
     496:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     498:	5b 98       	cbi	0x0b, 3	; 11
     49a:	95 e0       	ldi	r25, 0x05	; 5
     49c:	9a 95       	dec	r25
     49e:	f1 f7       	brne	.-4      	; 0x49c <lcd_check_BF_4+0x16>
     4a0:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     4a2:	5b 9a       	sbi	0x0b, 3	; 11
     4a4:	95 e0       	ldi	r25, 0x05	; 5
     4a6:	9a 95       	dec	r25
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <lcd_check_BF_4+0x20>
     4aa:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     4ac:	5b 98       	cbi	0x0b, 3	; 11
     4ae:	95 e0       	ldi	r25, 0x05	; 5
     4b0:	9a 95       	dec	r25
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <lcd_check_BF_4+0x2a>
     4b4:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
     4b6:	88 23       	and	r24, r24
     4b8:	4c f3       	brlt	.-46     	; 0x48c <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
     4ba:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
     4bc:	57 9a       	sbi	0x0a, 7	; 10
     4be:	08 95       	ret

000004c0 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c0:	2f ef       	ldi	r18, 0xFF	; 255
     4c2:	81 ee       	ldi	r24, 0xE1	; 225
     4c4:	94 e0       	ldi	r25, 0x04	; 4
     4c6:	21 50       	subi	r18, 0x01	; 1
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	90 40       	sbci	r25, 0x00	; 0
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <lcd_init_4f+0x6>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <lcd_init_4f+0x10>
     4d0:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
     4d2:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
     4d4:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
     4d6:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
     4d8:	80 e3       	ldi	r24, 0x30	; 48
     4da:	70 df       	rcall	.-288    	; 0x3bc <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	25 e3       	ldi	r18, 0x35	; 53
     4de:	2a 95       	dec	r18
     4e0:	f1 f7       	brne	.-4      	; 0x4de <lcd_init_4f+0x1e>
     4e2:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
     4e4:	80 e3       	ldi	r24, 0x30	; 48
     4e6:	6a df       	rcall	.-300    	; 0x3bc <lcd_write_4>
     4e8:	8f e1       	ldi	r24, 0x1F	; 31
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <lcd_init_4f+0x2c>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
     4f2:	00 00       	nop
     4f4:	80 e3       	ldi	r24, 0x30	; 48
     4f6:	62 df       	rcall	.-316    	; 0x3bc <lcd_write_4>
     4f8:	8f e3       	ldi	r24, 0x3F	; 63
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <lcd_init_4f+0x3c>
     500:	00 c0       	rjmp	.+0      	; 0x502 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
     502:	00 00       	nop
     504:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
     506:	5a df       	rcall	.-332    	; 0x3bc <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
     508:	be df       	rcall	.-132    	; 0x486 <lcd_check_BF_4>
     50a:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     50c:	b0 df       	rcall	.-160    	; 0x46e <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
     50e:	bb df       	rcall	.-138    	; 0x486 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
     510:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
     512:	ad df       	rcall	.-166    	; 0x46e <lcd_write_instruction_4f>
     514:	b8 df       	rcall	.-144    	; 0x486 <lcd_check_BF_4>
     516:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
     518:	aa df       	rcall	.-172    	; 0x46e <lcd_write_instruction_4f>
     51a:	b5 df       	rcall	.-150    	; 0x486 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
     51c:	86 e0       	ldi	r24, 0x06	; 6
     51e:	a7 df       	rcall	.-178    	; 0x46e <lcd_write_instruction_4f>
     520:	b2 df       	rcall	.-156    	; 0x486 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	a4 cf       	rjmp	.-184    	; 0x46e <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
     526:	08 95       	ret

00000528 <initLCD>:
     528:	41 df       	rcall	.-382    	; 0x3ac <configLCDPorts>
     52a:	ca df       	rcall	.-108    	; 0x4c0 <lcd_init_4f>
     52c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52e:	81 ee       	ldi	r24, 0xE1	; 225
     530:	94 e0       	ldi	r25, 0x04	; 4
     532:	21 50       	subi	r18, 0x01	; 1
     534:	80 40       	sbci	r24, 0x00	; 0
     536:	90 40       	sbci	r25, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <initLCD+0xa>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <initLCD+0x14>
     53c:	00 00       	nop
     53e:	08 95       	ret

00000540 <lcd_write_string_4f>:
     540:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <lcd_write_string_4f+0xa>
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
     550:	1a 82       	std	Y+2, r1	; 0x02
     552:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
     554:	e9 81       	ldd	r30, Y+1	; 0x01
     556:	fa 81       	ldd	r31, Y+2	; 0x02
     558:	e8 0f       	add	r30, r24
     55a:	f9 1f       	adc	r31, r25
     55c:	80 81       	ld	r24, Z
     55e:	88 23       	and	r24, r24
     560:	99 f0       	breq	.+38     	; 0x588 <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
     562:	91 df       	rcall	.-222    	; 0x486 <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
     564:	e9 81       	ldd	r30, Y+1	; 0x01
     566:	fa 81       	ldd	r31, Y+2	; 0x02
     568:	e0 0f       	add	r30, r16
     56a:	f1 1f       	adc	r31, r17
     56c:	80 81       	ld	r24, Z
     56e:	73 df       	rcall	.-282    	; 0x456 <lcd_write_character_4f>
        i++;
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	9a 81       	ldd	r25, Y+2	; 0x02
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	9a 83       	std	Y+2, r25	; 0x02
     578:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
     57a:	e9 81       	ldd	r30, Y+1	; 0x01
     57c:	fa 81       	ldd	r31, Y+2	; 0x02
     57e:	e0 0f       	add	r30, r16
     580:	f1 1f       	adc	r31, r17
     582:	80 81       	ld	r24, Z
     584:	81 11       	cpse	r24, r1
     586:	ed cf       	rjmp	.-38     	; 0x562 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	08 95       	ret

00000596 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	af 97       	sbiw	r28, 0x2f	; 47
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	18 2f       	mov	r17, r24
     5b6:	d6 2e       	mov	r13, r22
     5b8:	07 2f       	mov	r16, r23
     5ba:	84 2f       	mov	r24, r20
     5bc:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
     5be:	20 e2       	ldi	r18, 0x20	; 32
     5c0:	30 e2       	ldi	r19, 0x20	; 32
     5c2:	3a 83       	std	Y+2, r19	; 0x02
     5c4:	29 83       	std	Y+1, r18	; 0x01
     5c6:	20 e2       	ldi	r18, 0x20	; 32
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	3c 83       	std	Y+4, r19	; 0x04
     5cc:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
     5ce:	96 e1       	ldi	r25, 0x16	; 22
     5d0:	e8 e3       	ldi	r30, 0x38	; 56
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	de 01       	movw	r26, r28
     5d6:	5a 96       	adiw	r26, 0x1a	; 26
     5d8:	01 90       	ld	r0, Z+
     5da:	0d 92       	st	X+, r0
     5dc:	9a 95       	dec	r25
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
     5e0:	4f 3f       	cpi	r20, 0xFF	; 255
     5e2:	31 f0       	breq	.+12     	; 0x5f0 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5e4:	4a e0       	ldi	r20, 0x0A	; 10
     5e6:	be 01       	movw	r22, r28
     5e8:	6f 5f       	subi	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	a5 d2       	rcall	.+1354   	; 0xb3a <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
     5f0:	62 e0       	ldi	r22, 0x02	; 2
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	8d 2d       	mov	r24, r13
     5f6:	90 2f       	mov	r25, r16
     5f8:	97 d2       	rcall	.+1326   	; 0xb28 <strcmp>
     5fa:	89 2b       	or	r24, r25
     5fc:	09 f4       	brne	.+2      	; 0x600 <updateLCDScreen+0x6a>
     5fe:	ac c0       	rjmp	.+344    	; 0x758 <updateLCDScreen+0x1c2>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     600:	62 e0       	ldi	r22, 0x02	; 2
     602:	71 e0       	ldi	r23, 0x01	; 1
     604:	c7 01       	movw	r24, r14
     606:	90 d2       	rcall	.+1312   	; 0xb28 <strcmp>
     608:	89 2b       	or	r24, r25
     60a:	31 f4       	brne	.+12     	; 0x618 <updateLCDScreen+0x82>
     60c:	0f 2e       	mov	r0, r31
     60e:	fd e4       	ldi	r31, 0x4D	; 77
     610:	ef 2e       	mov	r14, r31
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	ff 2e       	mov	r15, r31
     616:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     618:	ce 01       	movw	r24, r28
     61a:	4a 96       	adiw	r24, 0x1a	; 26
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	ff 92       	push	r15
     622:	ef 92       	push	r14
     624:	49 97       	sbiw	r24, 0x19	; 25
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	0f 93       	push	r16
     62c:	df 92       	push	r13
     62e:	89 e2       	ldi	r24, 0x29	; 41
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	1f 92       	push	r1
     638:	85 e1       	ldi	r24, 0x15	; 21
     63a:	8f 93       	push	r24
     63c:	ce 01       	movw	r24, r28
     63e:	05 96       	adiw	r24, 0x05	; 5
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	9d d2       	rcall	.+1338   	; 0xb80 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
     646:	62 e3       	ldi	r22, 0x32	; 50
     648:	71 e0       	ldi	r23, 0x01	; 1
     64a:	8d 2d       	mov	r24, r13
     64c:	90 2f       	mov	r25, r16
     64e:	6c d2       	rcall	.+1240   	; 0xb28 <strcmp>
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	89 2b       	or	r24, r25
     65c:	a9 f4       	brne	.+42     	; 0x688 <updateLCDScreen+0xf2>
     65e:	ce 01       	movw	r24, r28
     660:	4a 96       	adiw	r24, 0x1a	; 26
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	8f e2       	ldi	r24, 0x2F	; 47
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	1f 92       	push	r1
     670:	85 e1       	ldi	r24, 0x15	; 21
     672:	8f 93       	push	r24
     674:	ce 01       	movw	r24, r28
     676:	05 96       	adiw	r24, 0x05	; 5
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	81 d2       	rcall	.+1282   	; 0xb80 <snprintf>
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
     688:	12 30       	cpi	r17, 0x02	; 2
     68a:	a9 f0       	breq	.+42     	; 0x6b6 <updateLCDScreen+0x120>
     68c:	18 f4       	brcc	.+6      	; 0x694 <updateLCDScreen+0xfe>
     68e:	11 30       	cpi	r17, 0x01	; 1
     690:	31 f0       	breq	.+12     	; 0x69e <updateLCDScreen+0x108>
     692:	34 c0       	rjmp	.+104    	; 0x6fc <updateLCDScreen+0x166>
     694:	13 30       	cpi	r17, 0x03	; 3
     696:	d9 f0       	breq	.+54     	; 0x6ce <updateLCDScreen+0x138>
     698:	14 30       	cpi	r17, 0x04	; 4
     69a:	29 f1       	breq	.+74     	; 0x6e6 <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
     69c:	2f c0       	rjmp	.+94     	; 0x6fc <updateLCDScreen+0x166>
     69e:	80 e8       	ldi	r24, 0x80	; 128
     6a0:	e6 de       	rcall	.-564    	; 0x46e <lcd_write_instruction_4f>
     6a2:	9f ef       	ldi	r25, 0xFF	; 255
     6a4:	20 e7       	ldi	r18, 0x70	; 112
     6a6:	32 e0       	ldi	r19, 0x02	; 2
     6a8:	91 50       	subi	r25, 0x01	; 1
     6aa:	20 40       	sbci	r18, 0x00	; 0
     6ac:	30 40       	sbci	r19, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <updateLCDScreen+0x112>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <updateLCDScreen+0x11c>
     6b2:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
     6b4:	23 c0       	rjmp	.+70     	; 0x6fc <updateLCDScreen+0x166>
     6b6:	80 ec       	ldi	r24, 0xC0	; 192
     6b8:	da de       	rcall	.-588    	; 0x46e <lcd_write_instruction_4f>
     6ba:	8f ef       	ldi	r24, 0xFF	; 255
     6bc:	90 e7       	ldi	r25, 0x70	; 112
     6be:	22 e0       	ldi	r18, 0x02	; 2
     6c0:	81 50       	subi	r24, 0x01	; 1
     6c2:	90 40       	sbci	r25, 0x00	; 0
     6c4:	20 40       	sbci	r18, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <updateLCDScreen+0x12a>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <updateLCDScreen+0x134>
     6ca:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
     6cc:	17 c0       	rjmp	.+46     	; 0x6fc <updateLCDScreen+0x166>
     6ce:	84 e9       	ldi	r24, 0x94	; 148
     6d0:	ce de       	rcall	.-612    	; 0x46e <lcd_write_instruction_4f>
     6d2:	3f ef       	ldi	r19, 0xFF	; 255
     6d4:	80 e7       	ldi	r24, 0x70	; 112
     6d6:	92 e0       	ldi	r25, 0x02	; 2
     6d8:	31 50       	subi	r19, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <updateLCDScreen+0x142>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <updateLCDScreen+0x14c>
     6e2:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
     6e4:	0b c0       	rjmp	.+22     	; 0x6fc <updateLCDScreen+0x166>
     6e6:	84 ed       	ldi	r24, 0xD4	; 212
     6e8:	c2 de       	rcall	.-636    	; 0x46e <lcd_write_instruction_4f>
     6ea:	2f ef       	ldi	r18, 0xFF	; 255
     6ec:	30 e7       	ldi	r19, 0x70	; 112
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <updateLCDScreen+0x15a>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <updateLCDScreen+0x164>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
     6fa:	00 00       	nop
     6fc:	ce 01       	movw	r24, r28
     6fe:	05 96       	adiw	r24, 0x05	; 5
     700:	1f df       	rcall	.-450    	; 0x540 <lcd_write_string_4f>
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	20 e7       	ldi	r18, 0x70	; 112
     706:	32 e0       	ldi	r19, 0x02	; 2
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	20 40       	sbci	r18, 0x00	; 0
     70c:	30 40       	sbci	r19, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <updateLCDScreen+0x172>
     710:	00 c0       	rjmp	.+0      	; 0x712 <updateLCDScreen+0x17c>
     712:	00 00       	nop
}
     714:	46 c0       	rjmp	.+140    	; 0x7a2 <updateLCDScreen+0x20c>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     716:	ce 01       	movw	r24, r28
     718:	4a 96       	adiw	r24, 0x1a	; 26
     71a:	9f 93       	push	r25
     71c:	8f 93       	push	r24
     71e:	8d e4       	ldi	r24, 0x4D	; 77
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	9e 01       	movw	r18, r28
     728:	2f 5f       	subi	r18, 0xFF	; 255
     72a:	3f 4f       	sbci	r19, 0xFF	; 255
     72c:	3f 93       	push	r19
     72e:	2f 93       	push	r18
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	89 e2       	ldi	r24, 0x29	; 41
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	1f 92       	push	r1
     73e:	85 e1       	ldi	r24, 0x15	; 21
     740:	8f 93       	push	r24
     742:	ce 01       	movw	r24, r28
     744:	05 96       	adiw	r24, 0x05	; 5
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	1a d2       	rcall	.+1076   	; 0xb80 <snprintf>
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     756:	98 cf       	rjmp	.-208    	; 0x688 <updateLCDScreen+0xf2>
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	c7 01       	movw	r24, r14
     75e:	e4 d1       	rcall	.+968    	; 0xb28 <strcmp>
     760:	89 2b       	or	r24, r25
     762:	c9 f2       	breq	.-78     	; 0x716 <updateLCDScreen+0x180>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     764:	ce 01       	movw	r24, r28
     766:	4a 96       	adiw	r24, 0x1a	; 26
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	ff 92       	push	r15
     76e:	ef 92       	push	r14
     770:	49 97       	sbiw	r24, 0x19	; 25
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	8d e4       	ldi	r24, 0x4D	; 77
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	89 e2       	ldi	r24, 0x29	; 41
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	1f 92       	push	r1
     788:	85 e1       	ldi	r24, 0x15	; 21
     78a:	8f 93       	push	r24
     78c:	ce 01       	movw	r24, r28
     78e:	05 96       	adiw	r24, 0x05	; 5
     790:	9f 93       	push	r25
     792:	8f 93       	push	r24
     794:	f5 d1       	rcall	.+1002   	; 0xb80 <snprintf>
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
     7a0:	73 cf       	rjmp	.-282    	; 0x688 <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
     7a2:	af 96       	adiw	r28, 0x2f	; 47
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	08 95       	ret

000007be <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
     7be:	eb ce       	rjmp	.-554    	; 0x596 <updateLCDScreen>
     7c0:	08 95       	ret

000007c2 <__subsf3>:
     7c2:	50 58       	subi	r21, 0x80	; 128

000007c4 <__addsf3>:
     7c4:	bb 27       	eor	r27, r27
     7c6:	aa 27       	eor	r26, r26
     7c8:	0e d0       	rcall	.+28     	; 0x7e6 <__addsf3x>
     7ca:	0d c1       	rjmp	.+538    	; 0x9e6 <__fp_round>
     7cc:	fe d0       	rcall	.+508    	; 0x9ca <__fp_pscA>
     7ce:	30 f0       	brcs	.+12     	; 0x7dc <__addsf3+0x18>
     7d0:	03 d1       	rcall	.+518    	; 0x9d8 <__fp_pscB>
     7d2:	20 f0       	brcs	.+8      	; 0x7dc <__addsf3+0x18>
     7d4:	31 f4       	brne	.+12     	; 0x7e2 <__addsf3+0x1e>
     7d6:	9f 3f       	cpi	r25, 0xFF	; 255
     7d8:	11 f4       	brne	.+4      	; 0x7de <__addsf3+0x1a>
     7da:	1e f4       	brtc	.+6      	; 0x7e2 <__addsf3+0x1e>
     7dc:	f3 c0       	rjmp	.+486    	; 0x9c4 <__fp_nan>
     7de:	0e f4       	brtc	.+2      	; 0x7e2 <__addsf3+0x1e>
     7e0:	e0 95       	com	r30
     7e2:	e7 fb       	bst	r30, 7
     7e4:	e9 c0       	rjmp	.+466    	; 0x9b8 <__fp_inf>

000007e6 <__addsf3x>:
     7e6:	e9 2f       	mov	r30, r25
     7e8:	0f d1       	rcall	.+542    	; 0xa08 <__fp_split3>
     7ea:	80 f3       	brcs	.-32     	; 0x7cc <__addsf3+0x8>
     7ec:	ba 17       	cp	r27, r26
     7ee:	62 07       	cpc	r22, r18
     7f0:	73 07       	cpc	r23, r19
     7f2:	84 07       	cpc	r24, r20
     7f4:	95 07       	cpc	r25, r21
     7f6:	18 f0       	brcs	.+6      	; 0x7fe <__addsf3x+0x18>
     7f8:	71 f4       	brne	.+28     	; 0x816 <__addsf3x+0x30>
     7fa:	9e f5       	brtc	.+102    	; 0x862 <__addsf3x+0x7c>
     7fc:	27 c1       	rjmp	.+590    	; 0xa4c <__fp_zero>
     7fe:	0e f4       	brtc	.+2      	; 0x802 <__addsf3x+0x1c>
     800:	e0 95       	com	r30
     802:	0b 2e       	mov	r0, r27
     804:	ba 2f       	mov	r27, r26
     806:	a0 2d       	mov	r26, r0
     808:	0b 01       	movw	r0, r22
     80a:	b9 01       	movw	r22, r18
     80c:	90 01       	movw	r18, r0
     80e:	0c 01       	movw	r0, r24
     810:	ca 01       	movw	r24, r20
     812:	a0 01       	movw	r20, r0
     814:	11 24       	eor	r1, r1
     816:	ff 27       	eor	r31, r31
     818:	59 1b       	sub	r21, r25
     81a:	99 f0       	breq	.+38     	; 0x842 <__addsf3x+0x5c>
     81c:	59 3f       	cpi	r21, 0xF9	; 249
     81e:	50 f4       	brcc	.+20     	; 0x834 <__addsf3x+0x4e>
     820:	50 3e       	cpi	r21, 0xE0	; 224
     822:	68 f1       	brcs	.+90     	; 0x87e <__addsf3x+0x98>
     824:	1a 16       	cp	r1, r26
     826:	f0 40       	sbci	r31, 0x00	; 0
     828:	a2 2f       	mov	r26, r18
     82a:	23 2f       	mov	r18, r19
     82c:	34 2f       	mov	r19, r20
     82e:	44 27       	eor	r20, r20
     830:	58 5f       	subi	r21, 0xF8	; 248
     832:	f3 cf       	rjmp	.-26     	; 0x81a <__addsf3x+0x34>
     834:	46 95       	lsr	r20
     836:	37 95       	ror	r19
     838:	27 95       	ror	r18
     83a:	a7 95       	ror	r26
     83c:	f0 40       	sbci	r31, 0x00	; 0
     83e:	53 95       	inc	r21
     840:	c9 f7       	brne	.-14     	; 0x834 <__addsf3x+0x4e>
     842:	7e f4       	brtc	.+30     	; 0x862 <__addsf3x+0x7c>
     844:	1f 16       	cp	r1, r31
     846:	ba 0b       	sbc	r27, r26
     848:	62 0b       	sbc	r22, r18
     84a:	73 0b       	sbc	r23, r19
     84c:	84 0b       	sbc	r24, r20
     84e:	ba f0       	brmi	.+46     	; 0x87e <__addsf3x+0x98>
     850:	91 50       	subi	r25, 0x01	; 1
     852:	a1 f0       	breq	.+40     	; 0x87c <__addsf3x+0x96>
     854:	ff 0f       	add	r31, r31
     856:	bb 1f       	adc	r27, r27
     858:	66 1f       	adc	r22, r22
     85a:	77 1f       	adc	r23, r23
     85c:	88 1f       	adc	r24, r24
     85e:	c2 f7       	brpl	.-16     	; 0x850 <__addsf3x+0x6a>
     860:	0e c0       	rjmp	.+28     	; 0x87e <__addsf3x+0x98>
     862:	ba 0f       	add	r27, r26
     864:	62 1f       	adc	r22, r18
     866:	73 1f       	adc	r23, r19
     868:	84 1f       	adc	r24, r20
     86a:	48 f4       	brcc	.+18     	; 0x87e <__addsf3x+0x98>
     86c:	87 95       	ror	r24
     86e:	77 95       	ror	r23
     870:	67 95       	ror	r22
     872:	b7 95       	ror	r27
     874:	f7 95       	ror	r31
     876:	9e 3f       	cpi	r25, 0xFE	; 254
     878:	08 f0       	brcs	.+2      	; 0x87c <__addsf3x+0x96>
     87a:	b3 cf       	rjmp	.-154    	; 0x7e2 <__addsf3+0x1e>
     87c:	93 95       	inc	r25
     87e:	88 0f       	add	r24, r24
     880:	08 f0       	brcs	.+2      	; 0x884 <__addsf3x+0x9e>
     882:	99 27       	eor	r25, r25
     884:	ee 0f       	add	r30, r30
     886:	97 95       	ror	r25
     888:	87 95       	ror	r24
     88a:	08 95       	ret

0000088c <__cmpsf2>:
     88c:	71 d0       	rcall	.+226    	; 0x970 <__fp_cmp>
     88e:	08 f4       	brcc	.+2      	; 0x892 <__cmpsf2+0x6>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	08 95       	ret

00000894 <__fixsfsi>:
     894:	04 d0       	rcall	.+8      	; 0x89e <__fixunssfsi>
     896:	68 94       	set
     898:	b1 11       	cpse	r27, r1
     89a:	d9 c0       	rjmp	.+434    	; 0xa4e <__fp_szero>
     89c:	08 95       	ret

0000089e <__fixunssfsi>:
     89e:	bc d0       	rcall	.+376    	; 0xa18 <__fp_splitA>
     8a0:	88 f0       	brcs	.+34     	; 0x8c4 <__fixunssfsi+0x26>
     8a2:	9f 57       	subi	r25, 0x7F	; 127
     8a4:	90 f0       	brcs	.+36     	; 0x8ca <__fixunssfsi+0x2c>
     8a6:	b9 2f       	mov	r27, r25
     8a8:	99 27       	eor	r25, r25
     8aa:	b7 51       	subi	r27, 0x17	; 23
     8ac:	a0 f0       	brcs	.+40     	; 0x8d6 <__fixunssfsi+0x38>
     8ae:	d1 f0       	breq	.+52     	; 0x8e4 <__fixunssfsi+0x46>
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	88 1f       	adc	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	1a f0       	brmi	.+6      	; 0x8c0 <__fixunssfsi+0x22>
     8ba:	ba 95       	dec	r27
     8bc:	c9 f7       	brne	.-14     	; 0x8b0 <__fixunssfsi+0x12>
     8be:	12 c0       	rjmp	.+36     	; 0x8e4 <__fixunssfsi+0x46>
     8c0:	b1 30       	cpi	r27, 0x01	; 1
     8c2:	81 f0       	breq	.+32     	; 0x8e4 <__fixunssfsi+0x46>
     8c4:	c3 d0       	rcall	.+390    	; 0xa4c <__fp_zero>
     8c6:	b1 e0       	ldi	r27, 0x01	; 1
     8c8:	08 95       	ret
     8ca:	c0 c0       	rjmp	.+384    	; 0xa4c <__fp_zero>
     8cc:	67 2f       	mov	r22, r23
     8ce:	78 2f       	mov	r23, r24
     8d0:	88 27       	eor	r24, r24
     8d2:	b8 5f       	subi	r27, 0xF8	; 248
     8d4:	39 f0       	breq	.+14     	; 0x8e4 <__fixunssfsi+0x46>
     8d6:	b9 3f       	cpi	r27, 0xF9	; 249
     8d8:	cc f3       	brlt	.-14     	; 0x8cc <__fixunssfsi+0x2e>
     8da:	86 95       	lsr	r24
     8dc:	77 95       	ror	r23
     8de:	67 95       	ror	r22
     8e0:	b3 95       	inc	r27
     8e2:	d9 f7       	brne	.-10     	; 0x8da <__fixunssfsi+0x3c>
     8e4:	3e f4       	brtc	.+14     	; 0x8f4 <__fixunssfsi+0x56>
     8e6:	90 95       	com	r25
     8e8:	80 95       	com	r24
     8ea:	70 95       	com	r23
     8ec:	61 95       	neg	r22
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	08 95       	ret

000008f6 <__floatunsisf>:
     8f6:	e8 94       	clt
     8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>

000008fa <__floatsisf>:
     8fa:	97 fb       	bst	r25, 7
     8fc:	3e f4       	brtc	.+14     	; 0x90c <__stack+0xd>
     8fe:	90 95       	com	r25
     900:	80 95       	com	r24
     902:	70 95       	com	r23
     904:	61 95       	neg	r22
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	8f 4f       	sbci	r24, 0xFF	; 255
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	99 23       	and	r25, r25
     90e:	a9 f0       	breq	.+42     	; 0x93a <__stack+0x3b>
     910:	f9 2f       	mov	r31, r25
     912:	96 e9       	ldi	r25, 0x96	; 150
     914:	bb 27       	eor	r27, r27
     916:	93 95       	inc	r25
     918:	f6 95       	lsr	r31
     91a:	87 95       	ror	r24
     91c:	77 95       	ror	r23
     91e:	67 95       	ror	r22
     920:	b7 95       	ror	r27
     922:	f1 11       	cpse	r31, r1
     924:	f8 cf       	rjmp	.-16     	; 0x916 <__stack+0x17>
     926:	fa f4       	brpl	.+62     	; 0x966 <__stack+0x67>
     928:	bb 0f       	add	r27, r27
     92a:	11 f4       	brne	.+4      	; 0x930 <__stack+0x31>
     92c:	60 ff       	sbrs	r22, 0
     92e:	1b c0       	rjmp	.+54     	; 0x966 <__stack+0x67>
     930:	6f 5f       	subi	r22, 0xFF	; 255
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	8f 4f       	sbci	r24, 0xFF	; 255
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	16 c0       	rjmp	.+44     	; 0x966 <__stack+0x67>
     93a:	88 23       	and	r24, r24
     93c:	11 f0       	breq	.+4      	; 0x942 <__stack+0x43>
     93e:	96 e9       	ldi	r25, 0x96	; 150
     940:	11 c0       	rjmp	.+34     	; 0x964 <__stack+0x65>
     942:	77 23       	and	r23, r23
     944:	21 f0       	breq	.+8      	; 0x94e <__stack+0x4f>
     946:	9e e8       	ldi	r25, 0x8E	; 142
     948:	87 2f       	mov	r24, r23
     94a:	76 2f       	mov	r23, r22
     94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0x59>
     94e:	66 23       	and	r22, r22
     950:	71 f0       	breq	.+28     	; 0x96e <__stack+0x6f>
     952:	96 e8       	ldi	r25, 0x86	; 134
     954:	86 2f       	mov	r24, r22
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	2a f0       	brmi	.+10     	; 0x966 <__stack+0x67>
     95c:	9a 95       	dec	r25
     95e:	66 0f       	add	r22, r22
     960:	77 1f       	adc	r23, r23
     962:	88 1f       	adc	r24, r24
     964:	da f7       	brpl	.-10     	; 0x95c <__stack+0x5d>
     966:	88 0f       	add	r24, r24
     968:	96 95       	lsr	r25
     96a:	87 95       	ror	r24
     96c:	97 f9       	bld	r25, 7
     96e:	08 95       	ret

00000970 <__fp_cmp>:
     970:	99 0f       	add	r25, r25
     972:	00 08       	sbc	r0, r0
     974:	55 0f       	add	r21, r21
     976:	aa 0b       	sbc	r26, r26
     978:	e0 e8       	ldi	r30, 0x80	; 128
     97a:	fe ef       	ldi	r31, 0xFE	; 254
     97c:	16 16       	cp	r1, r22
     97e:	17 06       	cpc	r1, r23
     980:	e8 07       	cpc	r30, r24
     982:	f9 07       	cpc	r31, r25
     984:	c0 f0       	brcs	.+48     	; 0x9b6 <__fp_cmp+0x46>
     986:	12 16       	cp	r1, r18
     988:	13 06       	cpc	r1, r19
     98a:	e4 07       	cpc	r30, r20
     98c:	f5 07       	cpc	r31, r21
     98e:	98 f0       	brcs	.+38     	; 0x9b6 <__fp_cmp+0x46>
     990:	62 1b       	sub	r22, r18
     992:	73 0b       	sbc	r23, r19
     994:	84 0b       	sbc	r24, r20
     996:	95 0b       	sbc	r25, r21
     998:	39 f4       	brne	.+14     	; 0x9a8 <__fp_cmp+0x38>
     99a:	0a 26       	eor	r0, r26
     99c:	61 f0       	breq	.+24     	; 0x9b6 <__fp_cmp+0x46>
     99e:	23 2b       	or	r18, r19
     9a0:	24 2b       	or	r18, r20
     9a2:	25 2b       	or	r18, r21
     9a4:	21 f4       	brne	.+8      	; 0x9ae <__fp_cmp+0x3e>
     9a6:	08 95       	ret
     9a8:	0a 26       	eor	r0, r26
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__fp_cmp+0x3e>
     9ac:	a1 40       	sbci	r26, 0x01	; 1
     9ae:	a6 95       	lsr	r26
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	81 1d       	adc	r24, r1
     9b4:	81 1d       	adc	r24, r1
     9b6:	08 95       	ret

000009b8 <__fp_inf>:
     9b8:	97 f9       	bld	r25, 7
     9ba:	9f 67       	ori	r25, 0x7F	; 127
     9bc:	80 e8       	ldi	r24, 0x80	; 128
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	08 95       	ret

000009c4 <__fp_nan>:
     9c4:	9f ef       	ldi	r25, 0xFF	; 255
     9c6:	80 ec       	ldi	r24, 0xC0	; 192
     9c8:	08 95       	ret

000009ca <__fp_pscA>:
     9ca:	00 24       	eor	r0, r0
     9cc:	0a 94       	dec	r0
     9ce:	16 16       	cp	r1, r22
     9d0:	17 06       	cpc	r1, r23
     9d2:	18 06       	cpc	r1, r24
     9d4:	09 06       	cpc	r0, r25
     9d6:	08 95       	ret

000009d8 <__fp_pscB>:
     9d8:	00 24       	eor	r0, r0
     9da:	0a 94       	dec	r0
     9dc:	12 16       	cp	r1, r18
     9de:	13 06       	cpc	r1, r19
     9e0:	14 06       	cpc	r1, r20
     9e2:	05 06       	cpc	r0, r21
     9e4:	08 95       	ret

000009e6 <__fp_round>:
     9e6:	09 2e       	mov	r0, r25
     9e8:	03 94       	inc	r0
     9ea:	00 0c       	add	r0, r0
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <__fp_round+0xc>
     9ee:	88 23       	and	r24, r24
     9f0:	52 f0       	brmi	.+20     	; 0xa06 <__fp_round+0x20>
     9f2:	bb 0f       	add	r27, r27
     9f4:	40 f4       	brcc	.+16     	; 0xa06 <__fp_round+0x20>
     9f6:	bf 2b       	or	r27, r31
     9f8:	11 f4       	brne	.+4      	; 0x9fe <__fp_round+0x18>
     9fa:	60 ff       	sbrs	r22, 0
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fp_round+0x20>
     9fe:	6f 5f       	subi	r22, 0xFF	; 255
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	8f 4f       	sbci	r24, 0xFF	; 255
     a04:	9f 4f       	sbci	r25, 0xFF	; 255
     a06:	08 95       	ret

00000a08 <__fp_split3>:
     a08:	57 fd       	sbrc	r21, 7
     a0a:	90 58       	subi	r25, 0x80	; 128
     a0c:	44 0f       	add	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	59 f0       	breq	.+22     	; 0xa28 <__fp_splitA+0x10>
     a12:	5f 3f       	cpi	r21, 0xFF	; 255
     a14:	71 f0       	breq	.+28     	; 0xa32 <__fp_splitA+0x1a>
     a16:	47 95       	ror	r20

00000a18 <__fp_splitA>:
     a18:	88 0f       	add	r24, r24
     a1a:	97 fb       	bst	r25, 7
     a1c:	99 1f       	adc	r25, r25
     a1e:	61 f0       	breq	.+24     	; 0xa38 <__fp_splitA+0x20>
     a20:	9f 3f       	cpi	r25, 0xFF	; 255
     a22:	79 f0       	breq	.+30     	; 0xa42 <__fp_splitA+0x2a>
     a24:	87 95       	ror	r24
     a26:	08 95       	ret
     a28:	12 16       	cp	r1, r18
     a2a:	13 06       	cpc	r1, r19
     a2c:	14 06       	cpc	r1, r20
     a2e:	55 1f       	adc	r21, r21
     a30:	f2 cf       	rjmp	.-28     	; 0xa16 <__fp_split3+0xe>
     a32:	46 95       	lsr	r20
     a34:	f1 df       	rcall	.-30     	; 0xa18 <__fp_splitA>
     a36:	08 c0       	rjmp	.+16     	; 0xa48 <__fp_splitA+0x30>
     a38:	16 16       	cp	r1, r22
     a3a:	17 06       	cpc	r1, r23
     a3c:	18 06       	cpc	r1, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	f1 cf       	rjmp	.-30     	; 0xa24 <__fp_splitA+0xc>
     a42:	86 95       	lsr	r24
     a44:	71 05       	cpc	r23, r1
     a46:	61 05       	cpc	r22, r1
     a48:	08 94       	sec
     a4a:	08 95       	ret

00000a4c <__fp_zero>:
     a4c:	e8 94       	clt

00000a4e <__fp_szero>:
     a4e:	bb 27       	eor	r27, r27
     a50:	66 27       	eor	r22, r22
     a52:	77 27       	eor	r23, r23
     a54:	cb 01       	movw	r24, r22
     a56:	97 f9       	bld	r25, 7
     a58:	08 95       	ret

00000a5a <__gesf2>:
     a5a:	8a df       	rcall	.-236    	; 0x970 <__fp_cmp>
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <__gesf2+0x6>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	08 95       	ret

00000a62 <__mulsf3>:
     a62:	0b d0       	rcall	.+22     	; 0xa7a <__mulsf3x>
     a64:	c0 cf       	rjmp	.-128    	; 0x9e6 <__fp_round>
     a66:	b1 df       	rcall	.-158    	; 0x9ca <__fp_pscA>
     a68:	28 f0       	brcs	.+10     	; 0xa74 <__mulsf3+0x12>
     a6a:	b6 df       	rcall	.-148    	; 0x9d8 <__fp_pscB>
     a6c:	18 f0       	brcs	.+6      	; 0xa74 <__mulsf3+0x12>
     a6e:	95 23       	and	r25, r21
     a70:	09 f0       	breq	.+2      	; 0xa74 <__mulsf3+0x12>
     a72:	a2 cf       	rjmp	.-188    	; 0x9b8 <__fp_inf>
     a74:	a7 cf       	rjmp	.-178    	; 0x9c4 <__fp_nan>
     a76:	11 24       	eor	r1, r1
     a78:	ea cf       	rjmp	.-44     	; 0xa4e <__fp_szero>

00000a7a <__mulsf3x>:
     a7a:	c6 df       	rcall	.-116    	; 0xa08 <__fp_split3>
     a7c:	a0 f3       	brcs	.-24     	; 0xa66 <__mulsf3+0x4>

00000a7e <__mulsf3_pse>:
     a7e:	95 9f       	mul	r25, r21
     a80:	d1 f3       	breq	.-12     	; 0xa76 <__mulsf3+0x14>
     a82:	95 0f       	add	r25, r21
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	55 1f       	adc	r21, r21
     a88:	62 9f       	mul	r22, r18
     a8a:	f0 01       	movw	r30, r0
     a8c:	72 9f       	mul	r23, r18
     a8e:	bb 27       	eor	r27, r27
     a90:	f0 0d       	add	r31, r0
     a92:	b1 1d       	adc	r27, r1
     a94:	63 9f       	mul	r22, r19
     a96:	aa 27       	eor	r26, r26
     a98:	f0 0d       	add	r31, r0
     a9a:	b1 1d       	adc	r27, r1
     a9c:	aa 1f       	adc	r26, r26
     a9e:	64 9f       	mul	r22, r20
     aa0:	66 27       	eor	r22, r22
     aa2:	b0 0d       	add	r27, r0
     aa4:	a1 1d       	adc	r26, r1
     aa6:	66 1f       	adc	r22, r22
     aa8:	82 9f       	mul	r24, r18
     aaa:	22 27       	eor	r18, r18
     aac:	b0 0d       	add	r27, r0
     aae:	a1 1d       	adc	r26, r1
     ab0:	62 1f       	adc	r22, r18
     ab2:	73 9f       	mul	r23, r19
     ab4:	b0 0d       	add	r27, r0
     ab6:	a1 1d       	adc	r26, r1
     ab8:	62 1f       	adc	r22, r18
     aba:	83 9f       	mul	r24, r19
     abc:	a0 0d       	add	r26, r0
     abe:	61 1d       	adc	r22, r1
     ac0:	22 1f       	adc	r18, r18
     ac2:	74 9f       	mul	r23, r20
     ac4:	33 27       	eor	r19, r19
     ac6:	a0 0d       	add	r26, r0
     ac8:	61 1d       	adc	r22, r1
     aca:	23 1f       	adc	r18, r19
     acc:	84 9f       	mul	r24, r20
     ace:	60 0d       	add	r22, r0
     ad0:	21 1d       	adc	r18, r1
     ad2:	82 2f       	mov	r24, r18
     ad4:	76 2f       	mov	r23, r22
     ad6:	6a 2f       	mov	r22, r26
     ad8:	11 24       	eor	r1, r1
     ada:	9f 57       	subi	r25, 0x7F	; 127
     adc:	50 40       	sbci	r21, 0x00	; 0
     ade:	8a f0       	brmi	.+34     	; 0xb02 <__mulsf3_pse+0x84>
     ae0:	e1 f0       	breq	.+56     	; 0xb1a <__mulsf3_pse+0x9c>
     ae2:	88 23       	and	r24, r24
     ae4:	4a f0       	brmi	.+18     	; 0xaf8 <__mulsf3_pse+0x7a>
     ae6:	ee 0f       	add	r30, r30
     ae8:	ff 1f       	adc	r31, r31
     aea:	bb 1f       	adc	r27, r27
     aec:	66 1f       	adc	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	88 1f       	adc	r24, r24
     af2:	91 50       	subi	r25, 0x01	; 1
     af4:	50 40       	sbci	r21, 0x00	; 0
     af6:	a9 f7       	brne	.-22     	; 0xae2 <__mulsf3_pse+0x64>
     af8:	9e 3f       	cpi	r25, 0xFE	; 254
     afa:	51 05       	cpc	r21, r1
     afc:	70 f0       	brcs	.+28     	; 0xb1a <__mulsf3_pse+0x9c>
     afe:	5c cf       	rjmp	.-328    	; 0x9b8 <__fp_inf>
     b00:	a6 cf       	rjmp	.-180    	; 0xa4e <__fp_szero>
     b02:	5f 3f       	cpi	r21, 0xFF	; 255
     b04:	ec f3       	brlt	.-6      	; 0xb00 <__mulsf3_pse+0x82>
     b06:	98 3e       	cpi	r25, 0xE8	; 232
     b08:	dc f3       	brlt	.-10     	; 0xb00 <__mulsf3_pse+0x82>
     b0a:	86 95       	lsr	r24
     b0c:	77 95       	ror	r23
     b0e:	67 95       	ror	r22
     b10:	b7 95       	ror	r27
     b12:	f7 95       	ror	r31
     b14:	e7 95       	ror	r30
     b16:	9f 5f       	subi	r25, 0xFF	; 255
     b18:	c1 f7       	brne	.-16     	; 0xb0a <__mulsf3_pse+0x8c>
     b1a:	fe 2b       	or	r31, r30
     b1c:	88 0f       	add	r24, r24
     b1e:	91 1d       	adc	r25, r1
     b20:	96 95       	lsr	r25
     b22:	87 95       	ror	r24
     b24:	97 f9       	bld	r25, 7
     b26:	08 95       	ret

00000b28 <strcmp>:
     b28:	fb 01       	movw	r30, r22
     b2a:	dc 01       	movw	r26, r24
     b2c:	8d 91       	ld	r24, X+
     b2e:	01 90       	ld	r0, Z+
     b30:	80 19       	sub	r24, r0
     b32:	01 10       	cpse	r0, r1
     b34:	d9 f3       	breq	.-10     	; 0xb2c <strcmp+0x4>
     b36:	99 0b       	sbc	r25, r25
     b38:	08 95       	ret

00000b3a <__itoa_ncheck>:
     b3a:	bb 27       	eor	r27, r27
     b3c:	4a 30       	cpi	r20, 0x0A	; 10
     b3e:	31 f4       	brne	.+12     	; 0xb4c <__itoa_ncheck+0x12>
     b40:	99 23       	and	r25, r25
     b42:	22 f4       	brpl	.+8      	; 0xb4c <__itoa_ncheck+0x12>
     b44:	bd e2       	ldi	r27, 0x2D	; 45
     b46:	90 95       	com	r25
     b48:	81 95       	neg	r24
     b4a:	9f 4f       	sbci	r25, 0xFF	; 255
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <__utoa_common>

00000b4e <__utoa_ncheck>:
     b4e:	bb 27       	eor	r27, r27

00000b50 <__utoa_common>:
     b50:	fb 01       	movw	r30, r22
     b52:	55 27       	eor	r21, r21
     b54:	aa 27       	eor	r26, r26
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	aa 1f       	adc	r26, r26
     b5c:	a4 17       	cp	r26, r20
     b5e:	10 f0       	brcs	.+4      	; 0xb64 <__utoa_common+0x14>
     b60:	a4 1b       	sub	r26, r20
     b62:	83 95       	inc	r24
     b64:	50 51       	subi	r21, 0x10	; 16
     b66:	b9 f7       	brne	.-18     	; 0xb56 <__utoa_common+0x6>
     b68:	a0 5d       	subi	r26, 0xD0	; 208
     b6a:	aa 33       	cpi	r26, 0x3A	; 58
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <__utoa_common+0x20>
     b6e:	a9 5d       	subi	r26, 0xD9	; 217
     b70:	a1 93       	st	Z+, r26
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	79 f7       	brne	.-34     	; 0xb54 <__utoa_common+0x4>
     b76:	b1 11       	cpse	r27, r1
     b78:	b1 93       	st	Z+, r27
     b7a:	11 92       	st	Z+, r1
     b7c:	cb 01       	movw	r24, r22
     b7e:	15 c2       	rjmp	.+1066   	; 0xfaa <strrev>

00000b80 <snprintf>:
     b80:	ae e0       	ldi	r26, 0x0E	; 14
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e5 ec       	ldi	r30, 0xC5	; 197
     b86:	f5 e0       	ldi	r31, 0x05	; 5
     b88:	c8 c2       	rjmp	.+1424   	; 0x111a <__prologue_saves__+0x1c>
     b8a:	0d 89       	ldd	r16, Y+21	; 0x15
     b8c:	1e 89       	ldd	r17, Y+22	; 0x16
     b8e:	8f 89       	ldd	r24, Y+23	; 0x17
     b90:	98 8d       	ldd	r25, Y+24	; 0x18
     b92:	26 e0       	ldi	r18, 0x06	; 6
     b94:	2c 83       	std	Y+4, r18	; 0x04
     b96:	1a 83       	std	Y+2, r17	; 0x02
     b98:	09 83       	std	Y+1, r16	; 0x01
     b9a:	97 ff       	sbrs	r25, 7
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <snprintf+0x22>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e8       	ldi	r25, 0x80	; 128
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	9e 83       	std	Y+6, r25	; 0x06
     ba6:	8d 83       	std	Y+5, r24	; 0x05
     ba8:	ae 01       	movw	r20, r28
     baa:	45 5e       	subi	r20, 0xE5	; 229
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	69 8d       	ldd	r22, Y+25	; 0x19
     bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	11 d0       	rcall	.+34     	; 0xbda <vfprintf>
     bb8:	4d 81       	ldd	r20, Y+5	; 0x05
     bba:	5e 81       	ldd	r21, Y+6	; 0x06
     bbc:	57 fd       	sbrc	r21, 7
     bbe:	0a c0       	rjmp	.+20     	; 0xbd4 <snprintf+0x54>
     bc0:	2f 81       	ldd	r18, Y+7	; 0x07
     bc2:	38 85       	ldd	r19, Y+8	; 0x08
     bc4:	42 17       	cp	r20, r18
     bc6:	53 07       	cpc	r21, r19
     bc8:	0c f4       	brge	.+2      	; 0xbcc <snprintf+0x4c>
     bca:	9a 01       	movw	r18, r20
     bcc:	f8 01       	movw	r30, r16
     bce:	e2 0f       	add	r30, r18
     bd0:	f3 1f       	adc	r31, r19
     bd2:	10 82       	st	Z, r1
     bd4:	2e 96       	adiw	r28, 0x0e	; 14
     bd6:	e4 e0       	ldi	r30, 0x04	; 4
     bd8:	bc c2       	rjmp	.+1400   	; 0x1152 <__epilogue_restores__+0x1c>

00000bda <vfprintf>:
     bda:	ab e0       	ldi	r26, 0x0B	; 11
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e2 ef       	ldi	r30, 0xF2	; 242
     be0:	f5 e0       	ldi	r31, 0x05	; 5
     be2:	8d c2       	rjmp	.+1306   	; 0x10fe <__prologue_saves__>
     be4:	6c 01       	movw	r12, r24
     be6:	7b 01       	movw	r14, r22
     be8:	8a 01       	movw	r16, r20
     bea:	fc 01       	movw	r30, r24
     bec:	17 82       	std	Z+7, r1	; 0x07
     bee:	16 82       	std	Z+6, r1	; 0x06
     bf0:	83 81       	ldd	r24, Z+3	; 0x03
     bf2:	81 ff       	sbrs	r24, 1
     bf4:	bf c1       	rjmp	.+894    	; 0xf74 <vfprintf+0x39a>
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	3c 01       	movw	r6, r24
     bfc:	f6 01       	movw	r30, r12
     bfe:	93 81       	ldd	r25, Z+3	; 0x03
     c00:	f7 01       	movw	r30, r14
     c02:	93 fd       	sbrc	r25, 3
     c04:	85 91       	lpm	r24, Z+
     c06:	93 ff       	sbrs	r25, 3
     c08:	81 91       	ld	r24, Z+
     c0a:	7f 01       	movw	r14, r30
     c0c:	88 23       	and	r24, r24
     c0e:	09 f4       	brne	.+2      	; 0xc12 <vfprintf+0x38>
     c10:	ad c1       	rjmp	.+858    	; 0xf6c <vfprintf+0x392>
     c12:	85 32       	cpi	r24, 0x25	; 37
     c14:	39 f4       	brne	.+14     	; 0xc24 <vfprintf+0x4a>
     c16:	93 fd       	sbrc	r25, 3
     c18:	85 91       	lpm	r24, Z+
     c1a:	93 ff       	sbrs	r25, 3
     c1c:	81 91       	ld	r24, Z+
     c1e:	7f 01       	movw	r14, r30
     c20:	85 32       	cpi	r24, 0x25	; 37
     c22:	21 f4       	brne	.+8      	; 0xc2c <vfprintf+0x52>
     c24:	b6 01       	movw	r22, r12
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	d0 d1       	rcall	.+928    	; 0xfca <fputc>
     c2a:	e8 cf       	rjmp	.-48     	; 0xbfc <vfprintf+0x22>
     c2c:	91 2c       	mov	r9, r1
     c2e:	21 2c       	mov	r2, r1
     c30:	31 2c       	mov	r3, r1
     c32:	ff e1       	ldi	r31, 0x1F	; 31
     c34:	f3 15       	cp	r31, r3
     c36:	d8 f0       	brcs	.+54     	; 0xc6e <vfprintf+0x94>
     c38:	8b 32       	cpi	r24, 0x2B	; 43
     c3a:	79 f0       	breq	.+30     	; 0xc5a <vfprintf+0x80>
     c3c:	38 f4       	brcc	.+14     	; 0xc4c <vfprintf+0x72>
     c3e:	80 32       	cpi	r24, 0x20	; 32
     c40:	79 f0       	breq	.+30     	; 0xc60 <vfprintf+0x86>
     c42:	83 32       	cpi	r24, 0x23	; 35
     c44:	a1 f4       	brne	.+40     	; 0xc6e <vfprintf+0x94>
     c46:	23 2d       	mov	r18, r3
     c48:	20 61       	ori	r18, 0x10	; 16
     c4a:	1d c0       	rjmp	.+58     	; 0xc86 <vfprintf+0xac>
     c4c:	8d 32       	cpi	r24, 0x2D	; 45
     c4e:	61 f0       	breq	.+24     	; 0xc68 <vfprintf+0x8e>
     c50:	80 33       	cpi	r24, 0x30	; 48
     c52:	69 f4       	brne	.+26     	; 0xc6e <vfprintf+0x94>
     c54:	23 2d       	mov	r18, r3
     c56:	21 60       	ori	r18, 0x01	; 1
     c58:	16 c0       	rjmp	.+44     	; 0xc86 <vfprintf+0xac>
     c5a:	83 2d       	mov	r24, r3
     c5c:	82 60       	ori	r24, 0x02	; 2
     c5e:	38 2e       	mov	r3, r24
     c60:	e3 2d       	mov	r30, r3
     c62:	e4 60       	ori	r30, 0x04	; 4
     c64:	3e 2e       	mov	r3, r30
     c66:	2a c0       	rjmp	.+84     	; 0xcbc <vfprintf+0xe2>
     c68:	f3 2d       	mov	r31, r3
     c6a:	f8 60       	ori	r31, 0x08	; 8
     c6c:	1d c0       	rjmp	.+58     	; 0xca8 <vfprintf+0xce>
     c6e:	37 fc       	sbrc	r3, 7
     c70:	2d c0       	rjmp	.+90     	; 0xccc <vfprintf+0xf2>
     c72:	20 ed       	ldi	r18, 0xD0	; 208
     c74:	28 0f       	add	r18, r24
     c76:	2a 30       	cpi	r18, 0x0A	; 10
     c78:	40 f0       	brcs	.+16     	; 0xc8a <vfprintf+0xb0>
     c7a:	8e 32       	cpi	r24, 0x2E	; 46
     c7c:	b9 f4       	brne	.+46     	; 0xcac <vfprintf+0xd2>
     c7e:	36 fc       	sbrc	r3, 6
     c80:	75 c1       	rjmp	.+746    	; 0xf6c <vfprintf+0x392>
     c82:	23 2d       	mov	r18, r3
     c84:	20 64       	ori	r18, 0x40	; 64
     c86:	32 2e       	mov	r3, r18
     c88:	19 c0       	rjmp	.+50     	; 0xcbc <vfprintf+0xe2>
     c8a:	36 fe       	sbrs	r3, 6
     c8c:	06 c0       	rjmp	.+12     	; 0xc9a <vfprintf+0xc0>
     c8e:	8a e0       	ldi	r24, 0x0A	; 10
     c90:	98 9e       	mul	r9, r24
     c92:	20 0d       	add	r18, r0
     c94:	11 24       	eor	r1, r1
     c96:	92 2e       	mov	r9, r18
     c98:	11 c0       	rjmp	.+34     	; 0xcbc <vfprintf+0xe2>
     c9a:	ea e0       	ldi	r30, 0x0A	; 10
     c9c:	2e 9e       	mul	r2, r30
     c9e:	20 0d       	add	r18, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	22 2e       	mov	r2, r18
     ca4:	f3 2d       	mov	r31, r3
     ca6:	f0 62       	ori	r31, 0x20	; 32
     ca8:	3f 2e       	mov	r3, r31
     caa:	08 c0       	rjmp	.+16     	; 0xcbc <vfprintf+0xe2>
     cac:	8c 36       	cpi	r24, 0x6C	; 108
     cae:	21 f4       	brne	.+8      	; 0xcb8 <vfprintf+0xde>
     cb0:	83 2d       	mov	r24, r3
     cb2:	80 68       	ori	r24, 0x80	; 128
     cb4:	38 2e       	mov	r3, r24
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0xe2>
     cb8:	88 36       	cpi	r24, 0x68	; 104
     cba:	41 f4       	brne	.+16     	; 0xccc <vfprintf+0xf2>
     cbc:	f7 01       	movw	r30, r14
     cbe:	93 fd       	sbrc	r25, 3
     cc0:	85 91       	lpm	r24, Z+
     cc2:	93 ff       	sbrs	r25, 3
     cc4:	81 91       	ld	r24, Z+
     cc6:	7f 01       	movw	r14, r30
     cc8:	81 11       	cpse	r24, r1
     cca:	b3 cf       	rjmp	.-154    	; 0xc32 <vfprintf+0x58>
     ccc:	98 2f       	mov	r25, r24
     cce:	9f 7d       	andi	r25, 0xDF	; 223
     cd0:	95 54       	subi	r25, 0x45	; 69
     cd2:	93 30       	cpi	r25, 0x03	; 3
     cd4:	28 f4       	brcc	.+10     	; 0xce0 <vfprintf+0x106>
     cd6:	0c 5f       	subi	r16, 0xFC	; 252
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	9f e3       	ldi	r25, 0x3F	; 63
     cdc:	99 83       	std	Y+1, r25	; 0x01
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <vfprintf+0x120>
     ce0:	83 36       	cpi	r24, 0x63	; 99
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <vfprintf+0x116>
     ce4:	83 37       	cpi	r24, 0x73	; 115
     ce6:	71 f0       	breq	.+28     	; 0xd04 <vfprintf+0x12a>
     ce8:	83 35       	cpi	r24, 0x53	; 83
     cea:	09 f0       	breq	.+2      	; 0xcee <vfprintf+0x114>
     cec:	55 c0       	rjmp	.+170    	; 0xd98 <vfprintf+0x1be>
     cee:	20 c0       	rjmp	.+64     	; 0xd30 <vfprintf+0x156>
     cf0:	f8 01       	movw	r30, r16
     cf2:	80 81       	ld	r24, Z
     cf4:	89 83       	std	Y+1, r24	; 0x01
     cf6:	0e 5f       	subi	r16, 0xFE	; 254
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	88 24       	eor	r8, r8
     cfc:	83 94       	inc	r8
     cfe:	91 2c       	mov	r9, r1
     d00:	53 01       	movw	r10, r6
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <vfprintf+0x14e>
     d04:	28 01       	movw	r4, r16
     d06:	f2 e0       	ldi	r31, 0x02	; 2
     d08:	4f 0e       	add	r4, r31
     d0a:	51 1c       	adc	r5, r1
     d0c:	f8 01       	movw	r30, r16
     d0e:	a0 80       	ld	r10, Z
     d10:	b1 80       	ldd	r11, Z+1	; 0x01
     d12:	36 fe       	sbrs	r3, 6
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <vfprintf+0x142>
     d16:	69 2d       	mov	r22, r9
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x146>
     d1c:	6f ef       	ldi	r22, 0xFF	; 255
     d1e:	7f ef       	ldi	r23, 0xFF	; 255
     d20:	c5 01       	movw	r24, r10
     d22:	38 d1       	rcall	.+624    	; 0xf94 <strnlen>
     d24:	4c 01       	movw	r8, r24
     d26:	82 01       	movw	r16, r4
     d28:	f3 2d       	mov	r31, r3
     d2a:	ff 77       	andi	r31, 0x7F	; 127
     d2c:	3f 2e       	mov	r3, r31
     d2e:	15 c0       	rjmp	.+42     	; 0xd5a <vfprintf+0x180>
     d30:	28 01       	movw	r4, r16
     d32:	22 e0       	ldi	r18, 0x02	; 2
     d34:	42 0e       	add	r4, r18
     d36:	51 1c       	adc	r5, r1
     d38:	f8 01       	movw	r30, r16
     d3a:	a0 80       	ld	r10, Z
     d3c:	b1 80       	ldd	r11, Z+1	; 0x01
     d3e:	36 fe       	sbrs	r3, 6
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <vfprintf+0x16e>
     d42:	69 2d       	mov	r22, r9
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <vfprintf+0x172>
     d48:	6f ef       	ldi	r22, 0xFF	; 255
     d4a:	7f ef       	ldi	r23, 0xFF	; 255
     d4c:	c5 01       	movw	r24, r10
     d4e:	17 d1       	rcall	.+558    	; 0xf7e <strnlen_P>
     d50:	4c 01       	movw	r8, r24
     d52:	f3 2d       	mov	r31, r3
     d54:	f0 68       	ori	r31, 0x80	; 128
     d56:	3f 2e       	mov	r3, r31
     d58:	82 01       	movw	r16, r4
     d5a:	33 fc       	sbrc	r3, 3
     d5c:	19 c0       	rjmp	.+50     	; 0xd90 <vfprintf+0x1b6>
     d5e:	82 2d       	mov	r24, r2
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 16       	cp	r8, r24
     d64:	99 06       	cpc	r9, r25
     d66:	a0 f4       	brcc	.+40     	; 0xd90 <vfprintf+0x1b6>
     d68:	b6 01       	movw	r22, r12
     d6a:	80 e2       	ldi	r24, 0x20	; 32
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	2d d1       	rcall	.+602    	; 0xfca <fputc>
     d70:	2a 94       	dec	r2
     d72:	f5 cf       	rjmp	.-22     	; 0xd5e <vfprintf+0x184>
     d74:	f5 01       	movw	r30, r10
     d76:	37 fc       	sbrc	r3, 7
     d78:	85 91       	lpm	r24, Z+
     d7a:	37 fe       	sbrs	r3, 7
     d7c:	81 91       	ld	r24, Z+
     d7e:	5f 01       	movw	r10, r30
     d80:	b6 01       	movw	r22, r12
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	22 d1       	rcall	.+580    	; 0xfca <fputc>
     d86:	21 10       	cpse	r2, r1
     d88:	2a 94       	dec	r2
     d8a:	21 e0       	ldi	r18, 0x01	; 1
     d8c:	82 1a       	sub	r8, r18
     d8e:	91 08       	sbc	r9, r1
     d90:	81 14       	cp	r8, r1
     d92:	91 04       	cpc	r9, r1
     d94:	79 f7       	brne	.-34     	; 0xd74 <vfprintf+0x19a>
     d96:	e1 c0       	rjmp	.+450    	; 0xf5a <vfprintf+0x380>
     d98:	84 36       	cpi	r24, 0x64	; 100
     d9a:	11 f0       	breq	.+4      	; 0xda0 <vfprintf+0x1c6>
     d9c:	89 36       	cpi	r24, 0x69	; 105
     d9e:	39 f5       	brne	.+78     	; 0xdee <vfprintf+0x214>
     da0:	f8 01       	movw	r30, r16
     da2:	37 fe       	sbrs	r3, 7
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <vfprintf+0x1da>
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	0c 5f       	subi	r16, 0xFC	; 252
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <vfprintf+0x1ea>
     db4:	60 81       	ld	r22, Z
     db6:	71 81       	ldd	r23, Z+1	; 0x01
     db8:	07 2e       	mov	r0, r23
     dba:	00 0c       	add	r0, r0
     dbc:	88 0b       	sbc	r24, r24
     dbe:	99 0b       	sbc	r25, r25
     dc0:	0e 5f       	subi	r16, 0xFE	; 254
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	f3 2d       	mov	r31, r3
     dc6:	ff 76       	andi	r31, 0x6F	; 111
     dc8:	3f 2e       	mov	r3, r31
     dca:	97 ff       	sbrs	r25, 7
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <vfprintf+0x206>
     dce:	90 95       	com	r25
     dd0:	80 95       	com	r24
     dd2:	70 95       	com	r23
     dd4:	61 95       	neg	r22
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	8f 4f       	sbci	r24, 0xFF	; 255
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	f0 68       	ori	r31, 0x80	; 128
     dde:	3f 2e       	mov	r3, r31
     de0:	2a e0       	ldi	r18, 0x0A	; 10
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	a3 01       	movw	r20, r6
     de6:	2d d1       	rcall	.+602    	; 0x1042 <__ultoa_invert>
     de8:	88 2e       	mov	r8, r24
     dea:	86 18       	sub	r8, r6
     dec:	44 c0       	rjmp	.+136    	; 0xe76 <vfprintf+0x29c>
     dee:	85 37       	cpi	r24, 0x75	; 117
     df0:	31 f4       	brne	.+12     	; 0xdfe <vfprintf+0x224>
     df2:	23 2d       	mov	r18, r3
     df4:	2f 7e       	andi	r18, 0xEF	; 239
     df6:	b2 2e       	mov	r11, r18
     df8:	2a e0       	ldi	r18, 0x0A	; 10
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	25 c0       	rjmp	.+74     	; 0xe48 <vfprintf+0x26e>
     dfe:	93 2d       	mov	r25, r3
     e00:	99 7f       	andi	r25, 0xF9	; 249
     e02:	b9 2e       	mov	r11, r25
     e04:	8f 36       	cpi	r24, 0x6F	; 111
     e06:	c1 f0       	breq	.+48     	; 0xe38 <vfprintf+0x25e>
     e08:	18 f4       	brcc	.+6      	; 0xe10 <vfprintf+0x236>
     e0a:	88 35       	cpi	r24, 0x58	; 88
     e0c:	79 f0       	breq	.+30     	; 0xe2c <vfprintf+0x252>
     e0e:	ae c0       	rjmp	.+348    	; 0xf6c <vfprintf+0x392>
     e10:	80 37       	cpi	r24, 0x70	; 112
     e12:	19 f0       	breq	.+6      	; 0xe1a <vfprintf+0x240>
     e14:	88 37       	cpi	r24, 0x78	; 120
     e16:	21 f0       	breq	.+8      	; 0xe20 <vfprintf+0x246>
     e18:	a9 c0       	rjmp	.+338    	; 0xf6c <vfprintf+0x392>
     e1a:	e9 2f       	mov	r30, r25
     e1c:	e0 61       	ori	r30, 0x10	; 16
     e1e:	be 2e       	mov	r11, r30
     e20:	b4 fe       	sbrs	r11, 4
     e22:	0d c0       	rjmp	.+26     	; 0xe3e <vfprintf+0x264>
     e24:	fb 2d       	mov	r31, r11
     e26:	f4 60       	ori	r31, 0x04	; 4
     e28:	bf 2e       	mov	r11, r31
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <vfprintf+0x264>
     e2c:	34 fe       	sbrs	r3, 4
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <vfprintf+0x26a>
     e30:	29 2f       	mov	r18, r25
     e32:	26 60       	ori	r18, 0x06	; 6
     e34:	b2 2e       	mov	r11, r18
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x26a>
     e38:	28 e0       	ldi	r18, 0x08	; 8
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <vfprintf+0x26e>
     e3e:	20 e1       	ldi	r18, 0x10	; 16
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x26e>
     e44:	20 e1       	ldi	r18, 0x10	; 16
     e46:	32 e0       	ldi	r19, 0x02	; 2
     e48:	f8 01       	movw	r30, r16
     e4a:	b7 fe       	sbrs	r11, 7
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <vfprintf+0x282>
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	0c 5f       	subi	r16, 0xFC	; 252
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	06 c0       	rjmp	.+12     	; 0xe68 <vfprintf+0x28e>
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 5f       	subi	r16, 0xFE	; 254
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	a3 01       	movw	r20, r6
     e6a:	eb d0       	rcall	.+470    	; 0x1042 <__ultoa_invert>
     e6c:	88 2e       	mov	r8, r24
     e6e:	86 18       	sub	r8, r6
     e70:	fb 2d       	mov	r31, r11
     e72:	ff 77       	andi	r31, 0x7F	; 127
     e74:	3f 2e       	mov	r3, r31
     e76:	36 fe       	sbrs	r3, 6
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <vfprintf+0x2ba>
     e7a:	23 2d       	mov	r18, r3
     e7c:	2e 7f       	andi	r18, 0xFE	; 254
     e7e:	a2 2e       	mov	r10, r18
     e80:	89 14       	cp	r8, r9
     e82:	58 f4       	brcc	.+22     	; 0xe9a <vfprintf+0x2c0>
     e84:	34 fe       	sbrs	r3, 4
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <vfprintf+0x2c4>
     e88:	32 fc       	sbrc	r3, 2
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <vfprintf+0x2c4>
     e8c:	83 2d       	mov	r24, r3
     e8e:	8e 7e       	andi	r24, 0xEE	; 238
     e90:	a8 2e       	mov	r10, r24
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <vfprintf+0x2c4>
     e94:	b8 2c       	mov	r11, r8
     e96:	a3 2c       	mov	r10, r3
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <vfprintf+0x2c6>
     e9a:	b8 2c       	mov	r11, r8
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <vfprintf+0x2c6>
     e9e:	b9 2c       	mov	r11, r9
     ea0:	a4 fe       	sbrs	r10, 4
     ea2:	0f c0       	rjmp	.+30     	; 0xec2 <vfprintf+0x2e8>
     ea4:	fe 01       	movw	r30, r28
     ea6:	e8 0d       	add	r30, r8
     ea8:	f1 1d       	adc	r31, r1
     eaa:	80 81       	ld	r24, Z
     eac:	80 33       	cpi	r24, 0x30	; 48
     eae:	21 f4       	brne	.+8      	; 0xeb8 <vfprintf+0x2de>
     eb0:	9a 2d       	mov	r25, r10
     eb2:	99 7e       	andi	r25, 0xE9	; 233
     eb4:	a9 2e       	mov	r10, r25
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <vfprintf+0x2f0>
     eb8:	a2 fe       	sbrs	r10, 2
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <vfprintf+0x2ee>
     ebc:	b3 94       	inc	r11
     ebe:	b3 94       	inc	r11
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <vfprintf+0x2f0>
     ec2:	8a 2d       	mov	r24, r10
     ec4:	86 78       	andi	r24, 0x86	; 134
     ec6:	09 f0       	breq	.+2      	; 0xeca <vfprintf+0x2f0>
     ec8:	b3 94       	inc	r11
     eca:	a3 fc       	sbrc	r10, 3
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <vfprintf+0x314>
     ece:	a0 fe       	sbrs	r10, 0
     ed0:	06 c0       	rjmp	.+12     	; 0xede <vfprintf+0x304>
     ed2:	b2 14       	cp	r11, r2
     ed4:	80 f4       	brcc	.+32     	; 0xef6 <vfprintf+0x31c>
     ed6:	28 0c       	add	r2, r8
     ed8:	92 2c       	mov	r9, r2
     eda:	9b 18       	sub	r9, r11
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <vfprintf+0x31e>
     ede:	b2 14       	cp	r11, r2
     ee0:	58 f4       	brcc	.+22     	; 0xef8 <vfprintf+0x31e>
     ee2:	b6 01       	movw	r22, r12
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	70 d0       	rcall	.+224    	; 0xfca <fputc>
     eea:	b3 94       	inc	r11
     eec:	f8 cf       	rjmp	.-16     	; 0xede <vfprintf+0x304>
     eee:	b2 14       	cp	r11, r2
     ef0:	18 f4       	brcc	.+6      	; 0xef8 <vfprintf+0x31e>
     ef2:	2b 18       	sub	r2, r11
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <vfprintf+0x320>
     ef6:	98 2c       	mov	r9, r8
     ef8:	21 2c       	mov	r2, r1
     efa:	a4 fe       	sbrs	r10, 4
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <vfprintf+0x342>
     efe:	b6 01       	movw	r22, r12
     f00:	80 e3       	ldi	r24, 0x30	; 48
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	62 d0       	rcall	.+196    	; 0xfca <fputc>
     f06:	a2 fe       	sbrs	r10, 2
     f08:	16 c0       	rjmp	.+44     	; 0xf36 <vfprintf+0x35c>
     f0a:	a1 fc       	sbrc	r10, 1
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <vfprintf+0x33a>
     f0e:	88 e7       	ldi	r24, 0x78	; 120
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <vfprintf+0x33e>
     f14:	88 e5       	ldi	r24, 0x58	; 88
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	b6 01       	movw	r22, r12
     f1a:	0c c0       	rjmp	.+24     	; 0xf34 <vfprintf+0x35a>
     f1c:	8a 2d       	mov	r24, r10
     f1e:	86 78       	andi	r24, 0x86	; 134
     f20:	51 f0       	breq	.+20     	; 0xf36 <vfprintf+0x35c>
     f22:	a1 fe       	sbrs	r10, 1
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <vfprintf+0x350>
     f26:	8b e2       	ldi	r24, 0x2B	; 43
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <vfprintf+0x352>
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	a7 fc       	sbrc	r10, 7
     f2e:	8d e2       	ldi	r24, 0x2D	; 45
     f30:	b6 01       	movw	r22, r12
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	4a d0       	rcall	.+148    	; 0xfca <fputc>
     f36:	89 14       	cp	r8, r9
     f38:	30 f4       	brcc	.+12     	; 0xf46 <vfprintf+0x36c>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	44 d0       	rcall	.+136    	; 0xfca <fputc>
     f42:	9a 94       	dec	r9
     f44:	f8 cf       	rjmp	.-16     	; 0xf36 <vfprintf+0x35c>
     f46:	8a 94       	dec	r8
     f48:	f3 01       	movw	r30, r6
     f4a:	e8 0d       	add	r30, r8
     f4c:	f1 1d       	adc	r31, r1
     f4e:	80 81       	ld	r24, Z
     f50:	b6 01       	movw	r22, r12
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	3a d0       	rcall	.+116    	; 0xfca <fputc>
     f56:	81 10       	cpse	r8, r1
     f58:	f6 cf       	rjmp	.-20     	; 0xf46 <vfprintf+0x36c>
     f5a:	22 20       	and	r2, r2
     f5c:	09 f4       	brne	.+2      	; 0xf60 <vfprintf+0x386>
     f5e:	4e ce       	rjmp	.-868    	; 0xbfc <vfprintf+0x22>
     f60:	b6 01       	movw	r22, r12
     f62:	80 e2       	ldi	r24, 0x20	; 32
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	31 d0       	rcall	.+98     	; 0xfca <fputc>
     f68:	2a 94       	dec	r2
     f6a:	f7 cf       	rjmp	.-18     	; 0xf5a <vfprintf+0x380>
     f6c:	f6 01       	movw	r30, r12
     f6e:	86 81       	ldd	r24, Z+6	; 0x06
     f70:	97 81       	ldd	r25, Z+7	; 0x07
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x39e>
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	2b 96       	adiw	r28, 0x0b	; 11
     f7a:	e2 e1       	ldi	r30, 0x12	; 18
     f7c:	dc c0       	rjmp	.+440    	; 0x1136 <__epilogue_restores__>

00000f7e <strnlen_P>:
     f7e:	fc 01       	movw	r30, r24
     f80:	05 90       	lpm	r0, Z+
     f82:	61 50       	subi	r22, 0x01	; 1
     f84:	70 40       	sbci	r23, 0x00	; 0
     f86:	01 10       	cpse	r0, r1
     f88:	d8 f7       	brcc	.-10     	; 0xf80 <strnlen_P+0x2>
     f8a:	80 95       	com	r24
     f8c:	90 95       	com	r25
     f8e:	8e 0f       	add	r24, r30
     f90:	9f 1f       	adc	r25, r31
     f92:	08 95       	ret

00000f94 <strnlen>:
     f94:	fc 01       	movw	r30, r24
     f96:	61 50       	subi	r22, 0x01	; 1
     f98:	70 40       	sbci	r23, 0x00	; 0
     f9a:	01 90       	ld	r0, Z+
     f9c:	01 10       	cpse	r0, r1
     f9e:	d8 f7       	brcc	.-10     	; 0xf96 <strnlen+0x2>
     fa0:	80 95       	com	r24
     fa2:	90 95       	com	r25
     fa4:	8e 0f       	add	r24, r30
     fa6:	9f 1f       	adc	r25, r31
     fa8:	08 95       	ret

00000faa <strrev>:
     faa:	dc 01       	movw	r26, r24
     fac:	fc 01       	movw	r30, r24
     fae:	67 2f       	mov	r22, r23
     fb0:	71 91       	ld	r23, Z+
     fb2:	77 23       	and	r23, r23
     fb4:	e1 f7       	brne	.-8      	; 0xfae <strrev+0x4>
     fb6:	32 97       	sbiw	r30, 0x02	; 2
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <strrev+0x18>
     fba:	7c 91       	ld	r23, X
     fbc:	6d 93       	st	X+, r22
     fbe:	70 83       	st	Z, r23
     fc0:	62 91       	ld	r22, -Z
     fc2:	ae 17       	cp	r26, r30
     fc4:	bf 07       	cpc	r27, r31
     fc6:	c8 f3       	brcs	.-14     	; 0xfba <strrev+0x10>
     fc8:	08 95       	ret

00000fca <fputc>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	fb 01       	movw	r30, r22
     fd4:	23 81       	ldd	r18, Z+3	; 0x03
     fd6:	21 fd       	sbrc	r18, 1
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <fputc+0x16>
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	9f ef       	ldi	r25, 0xFF	; 255
     fde:	2c c0       	rjmp	.+88     	; 0x1038 <fputc+0x6e>
     fe0:	22 ff       	sbrs	r18, 2
     fe2:	16 c0       	rjmp	.+44     	; 0x1010 <fputc+0x46>
     fe4:	46 81       	ldd	r20, Z+6	; 0x06
     fe6:	57 81       	ldd	r21, Z+7	; 0x07
     fe8:	24 81       	ldd	r18, Z+4	; 0x04
     fea:	35 81       	ldd	r19, Z+5	; 0x05
     fec:	42 17       	cp	r20, r18
     fee:	53 07       	cpc	r21, r19
     ff0:	44 f4       	brge	.+16     	; 0x1002 <fputc+0x38>
     ff2:	a0 81       	ld	r26, Z
     ff4:	b1 81       	ldd	r27, Z+1	; 0x01
     ff6:	9d 01       	movw	r18, r26
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	31 83       	std	Z+1, r19	; 0x01
     ffe:	20 83       	st	Z, r18
    1000:	8c 93       	st	X, r24
    1002:	26 81       	ldd	r18, Z+6	; 0x06
    1004:	37 81       	ldd	r19, Z+7	; 0x07
    1006:	2f 5f       	subi	r18, 0xFF	; 255
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	37 83       	std	Z+7, r19	; 0x07
    100c:	26 83       	std	Z+6, r18	; 0x06
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <fputc+0x6e>
    1010:	8b 01       	movw	r16, r22
    1012:	ec 01       	movw	r28, r24
    1014:	fb 01       	movw	r30, r22
    1016:	00 84       	ldd	r0, Z+8	; 0x08
    1018:	f1 85       	ldd	r31, Z+9	; 0x09
    101a:	e0 2d       	mov	r30, r0
    101c:	09 95       	icall
    101e:	89 2b       	or	r24, r25
    1020:	e1 f6       	brne	.-72     	; 0xfda <fputc+0x10>
    1022:	d8 01       	movw	r26, r16
    1024:	16 96       	adiw	r26, 0x06	; 6
    1026:	8d 91       	ld	r24, X+
    1028:	9c 91       	ld	r25, X
    102a:	17 97       	sbiw	r26, 0x07	; 7
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	17 96       	adiw	r26, 0x07	; 7
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
    1034:	16 97       	sbiw	r26, 0x06	; 6
    1036:	ce 01       	movw	r24, r28
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <__ultoa_invert>:
    1042:	fa 01       	movw	r30, r20
    1044:	aa 27       	eor	r26, r26
    1046:	28 30       	cpi	r18, 0x08	; 8
    1048:	51 f1       	breq	.+84     	; 0x109e <__ultoa_invert+0x5c>
    104a:	20 31       	cpi	r18, 0x10	; 16
    104c:	81 f1       	breq	.+96     	; 0x10ae <__ultoa_invert+0x6c>
    104e:	e8 94       	clt
    1050:	6f 93       	push	r22
    1052:	6e 7f       	andi	r22, 0xFE	; 254
    1054:	6e 5f       	subi	r22, 0xFE	; 254
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	af 4f       	sbci	r26, 0xFF	; 255
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	3e d0       	rcall	.+124    	; 0x10de <__ultoa_invert+0x9c>
    1062:	b4 e0       	ldi	r27, 0x04	; 4
    1064:	3c d0       	rcall	.+120    	; 0x10de <__ultoa_invert+0x9c>
    1066:	67 0f       	add	r22, r23
    1068:	78 1f       	adc	r23, r24
    106a:	89 1f       	adc	r24, r25
    106c:	9a 1f       	adc	r25, r26
    106e:	a1 1d       	adc	r26, r1
    1070:	68 0f       	add	r22, r24
    1072:	79 1f       	adc	r23, r25
    1074:	8a 1f       	adc	r24, r26
    1076:	91 1d       	adc	r25, r1
    1078:	a1 1d       	adc	r26, r1
    107a:	6a 0f       	add	r22, r26
    107c:	71 1d       	adc	r23, r1
    107e:	81 1d       	adc	r24, r1
    1080:	91 1d       	adc	r25, r1
    1082:	a1 1d       	adc	r26, r1
    1084:	20 d0       	rcall	.+64     	; 0x10c6 <__ultoa_invert+0x84>
    1086:	09 f4       	brne	.+2      	; 0x108a <__ultoa_invert+0x48>
    1088:	68 94       	set
    108a:	3f 91       	pop	r19
    108c:	2a e0       	ldi	r18, 0x0A	; 10
    108e:	26 9f       	mul	r18, r22
    1090:	11 24       	eor	r1, r1
    1092:	30 19       	sub	r19, r0
    1094:	30 5d       	subi	r19, 0xD0	; 208
    1096:	31 93       	st	Z+, r19
    1098:	de f6       	brtc	.-74     	; 0x1050 <__ultoa_invert+0xe>
    109a:	cf 01       	movw	r24, r30
    109c:	08 95       	ret
    109e:	46 2f       	mov	r20, r22
    10a0:	47 70       	andi	r20, 0x07	; 7
    10a2:	40 5d       	subi	r20, 0xD0	; 208
    10a4:	41 93       	st	Z+, r20
    10a6:	b3 e0       	ldi	r27, 0x03	; 3
    10a8:	0f d0       	rcall	.+30     	; 0x10c8 <__ultoa_invert+0x86>
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__ultoa_invert+0x5c>
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <__ultoa_invert+0x58>
    10ae:	46 2f       	mov	r20, r22
    10b0:	4f 70       	andi	r20, 0x0F	; 15
    10b2:	40 5d       	subi	r20, 0xD0	; 208
    10b4:	4a 33       	cpi	r20, 0x3A	; 58
    10b6:	18 f0       	brcs	.+6      	; 0x10be <__ultoa_invert+0x7c>
    10b8:	49 5d       	subi	r20, 0xD9	; 217
    10ba:	31 fd       	sbrc	r19, 1
    10bc:	40 52       	subi	r20, 0x20	; 32
    10be:	41 93       	st	Z+, r20
    10c0:	02 d0       	rcall	.+4      	; 0x10c6 <__ultoa_invert+0x84>
    10c2:	a9 f7       	brne	.-22     	; 0x10ae <__ultoa_invert+0x6c>
    10c4:	ea cf       	rjmp	.-44     	; 0x109a <__ultoa_invert+0x58>
    10c6:	b4 e0       	ldi	r27, 0x04	; 4
    10c8:	a6 95       	lsr	r26
    10ca:	97 95       	ror	r25
    10cc:	87 95       	ror	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	ba 95       	dec	r27
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__ultoa_invert+0x86>
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	61 05       	cpc	r22, r1
    10da:	71 05       	cpc	r23, r1
    10dc:	08 95       	ret
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	0a 2e       	mov	r0, r26
    10e4:	06 94       	lsr	r0
    10e6:	57 95       	ror	r21
    10e8:	47 95       	ror	r20
    10ea:	37 95       	ror	r19
    10ec:	27 95       	ror	r18
    10ee:	ba 95       	dec	r27
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__ultoa_invert+0xa2>
    10f2:	62 0f       	add	r22, r18
    10f4:	73 1f       	adc	r23, r19
    10f6:	84 1f       	adc	r24, r20
    10f8:	95 1f       	adc	r25, r21
    10fa:	a0 1d       	adc	r26, r0
    10fc:	08 95       	ret

000010fe <__prologue_saves__>:
    10fe:	2f 92       	push	r2
    1100:	3f 92       	push	r3
    1102:	4f 92       	push	r4
    1104:	5f 92       	push	r5
    1106:	6f 92       	push	r6
    1108:	7f 92       	push	r7
    110a:	8f 92       	push	r8
    110c:	9f 92       	push	r9
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	ca 1b       	sub	r28, r26
    1128:	db 0b       	sbc	r29, r27
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	09 94       	ijmp

00001136 <__epilogue_restores__>:
    1136:	2a 88       	ldd	r2, Y+18	; 0x12
    1138:	39 88       	ldd	r3, Y+17	; 0x11
    113a:	48 88       	ldd	r4, Y+16	; 0x10
    113c:	5f 84       	ldd	r5, Y+15	; 0x0f
    113e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1140:	7d 84       	ldd	r7, Y+13	; 0x0d
    1142:	8c 84       	ldd	r8, Y+12	; 0x0c
    1144:	9b 84       	ldd	r9, Y+11	; 0x0b
    1146:	aa 84       	ldd	r10, Y+10	; 0x0a
    1148:	b9 84       	ldd	r11, Y+9	; 0x09
    114a:	c8 84       	ldd	r12, Y+8	; 0x08
    114c:	df 80       	ldd	r13, Y+7	; 0x07
    114e:	ee 80       	ldd	r14, Y+6	; 0x06
    1150:	fd 80       	ldd	r15, Y+5	; 0x05
    1152:	0c 81       	ldd	r16, Y+4	; 0x04
    1154:	1b 81       	ldd	r17, Y+3	; 0x03
    1156:	aa 81       	ldd	r26, Y+2	; 0x02
    1158:	b9 81       	ldd	r27, Y+1	; 0x01
    115a:	ce 0f       	add	r28, r30
    115c:	d1 1d       	adc	r29, r1
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	ed 01       	movw	r28, r26
    116a:	08 95       	ret

0000116c <_exit>:
    116c:	f8 94       	cli

0000116e <__stop_program>:
    116e:	ff cf       	rjmp	.-2      	; 0x116e <__stop_program>
